{"version":3,"sources":["model/EffectModel.js","components/Stem/index.jsx","actions/index.js","reducers/Track.js","reducers/Connection.js","reducers/Master.js","reducers/Stem.js","reducers/Effect.js","reducers/MIDI.js","reducers/Settings.js","reducers/index.js","Connection.js","store.js","middleware/index.js","actions/GlobalActions.js","containers/Stem.jsx","components/util/PlusButton/PlusButton.jsx","components/util/Toggle/index.jsx","components/Effect/Slider/index.jsx","components/Effect/CodeToggle/index.jsx","components/util/TemplateInput/index.jsx","components/Effect/index.jsx","components/Effect/CodeSlider/index.jsx","containers/Effect.jsx","components/Track/index.jsx","containers/Track.jsx","components/LaunchSpace/index.jsx","containers/LaunchSpace.jsx","components/CodeEditor/index.jsx","components/Effect/EffectCreator/index.jsx","components/MasterEditor/LanguageControls/index.jsx","components/MasterEditor/index.jsx","components/StemEditor/index.jsx","components/Flyout/index.jsx","containers/Flyout.jsx","components/Modal/index.jsx","components/ConnectionSettings/index.jsx","containers/ConnectionSettings.jsx","components/Settings/index.jsx","containers/Settings.jsx","components/Header/index.jsx","containers/Header.jsx","components/App/index.jsx","containers/App.jsx","containers/Render.jsx","index.js","model/Id.js","model/MasterModel.js","model/Settings.js","model/Midi.js","model/index.js","model/StemModel.js","renderers/Hydra/Hydra.js","renderers/TidalCycles/index.jsx","renderers/index.js","model/TrackModel.js","components/Render/index.jsx"],"names":["EffectModel","getNew","type","language","on","properties","clone","effect","propertes","Types","CODE_TOGGLE","SLIDER","PropertySpec","code","value","operator","min","max","step","scale","CODE_SLIDER","indices","util","defaultEffects","Stem","props","holdTime","Date","dragToggle","ref","React","createRef","timeout","touchMoveCount","this","current","classList","add","setTimeout","remove","openInFlyout","e","preventDefault","now","clearTimeout","shiftKey","globalActions","stemUpdate","id","selected","button","toggle","className","highlight","tabIndex","onKeyUp","bind","onTouchStart","onMouseDown","onTouchEnd","onMouseUp","onTouchMove","onContextMenu","x","style","width","name","ctrlKey","key","stemPaste","open","Component","ActionSpec","propogateToServer","ActionTypes","Actions","action","meta","fromServer","capitalSnake","s","split","map","slice","length","toLowerCase","join","camel","createAction","TrackReducer","tracks","payload","trackId","Object","assign","stems","filter","stemId","newTrack","concat","obj","effects","track","effectId","push","ConnectionReducer","connection","url","port","isConnected","MasterReducer","master","newLang","StemReducer","console","log","EffectReducer","MidiReducer","midi","SettingsReducer","settings","CopyReducer","copy","items","Model","defaultState","Connection","WebSocket","host","window","location","hostname","onOpen","onClose","onErr","ws","close","MozWebSocket","require","isOpen","onopen","onmessage","onMessage","onerror","warn","onclose","data","event","message","JSON","parse","store","dispatch","send","stringify","createStore","state","RECEIVE_STATE","applyMiddleware","next","newAction","PUSH_STATE","sendAction","dynamicMiddlewares","getPosition","keys","findIndex","includes","stem","GlobalActions","pushState","providedState","getState","undefined","receiveState","connect","actions","onError","init","stemCopy","pastePos","anchorPos","diffPos","forEach","sId","cpPos","newPos","targetTrackId","trackAddStem","targetStemId","save","localStorage","setItem","load","newState","getItem","Id","loadFromServer","LOAD_FROM_SERVER","file","text","then","input","document","createElement","onchange","files","click","download","dataStr","encodeURIComponent","anchor","setAttribute","masterUpdate","masterAddEffect","new","stemUpdateLanguage","stemDeleteEffect","stemAddEffect","trackUpdate","trackDeleteStem","find","StemModel","trackDeleteEffect","trackAddEffect","trackAdd","opt_language","TrackModel","trackDelete","effectUpdate","settingsUpdateStyle","ownProps","PlusButton","Toggle","onChange","onClick","SliderEffect","sliderValue","toSliderScale","prevProps","prevState","snapshot","setState","range","Math","pow","round","isVertical","renderVertical","renderHorizontal","newValue","parseFloat","target","noToggle","Grid","container","spacing","alignItems","item","xs","fromSliderScale","handleSliderChange","margin","onInput","persist","handleInputChange","orientation","Input","inputProps","textAlign","CodeToggle","debounce","onToggle","AutosizeInput","spanRef","innerText","scrollWidth","color","backgroundColor","pointerEvents","position","TemplateInput","_onChange","textChange","str","i","left","right","Effect","component","Track","row","top","rows","index","columns","stemToComponent","titleChange","height","padding","addStem","xmlns","fill","viewBox","d","updateEffect","gainEffect","LaunchSpace","trackIdToComponent","display","minWidth","y","flat","CodeEditor","updateCode","flashTimeout","onChangeLive","live","disabled","flash","onKeyPress","EffectCreator","creating","progress","querySelector","inside","options","select","transitionToSpec","cancel","widgets","prop","widget","placeholder","getInput","parsed","parseInt","parseValue","onCreate","LanguageControls","val","tempo","Languages","TidalCycles","changeTempo","macros","bootScriptLive","Hydra","updateMasterEffect","effectIdToComponent","languageSpecific","getLanguageSpecific","newEffect","MasterEditor","languageOpts","lang","languageChange","toggleLive","checked","StemEditor","_updateCode","textAreaRef","updateName","handleLanguageChange","createEffect","Button","marginTop","delete","variant","newEffects","Tab","switchToTab","label","closeAble","closeTab","Flyout","tab","history","opened","tabs","switchTab","content","Modal","focus","children","ConnectionSettings","TextField","marginLeft","maxWidth","SettingsWidgetMap","Settings","Widget","modalContent","Header","modal","getModal","openSettings","openConnections","openHelp","closeModal","App","divider","horizontalDivider","appRef","onDragOver","onKeyDown","border","borderBottom","borderRight","src","px","body","clientWidth","clientHeight","View","addMiddleware","logger","render","basename","process","path","exact","getElementById","MasterModel","mixMethod","j","mainEffectId","getCode","effectToCode","stemToCode","trackToCode","getMacros","masterEffects","masterEffectsCode","getTempoCode","EffectsToCode","stemsCode","effectsOn","effectsCode","Renderers","Render","hydraRef","hydraCode","hydraMacros","hydra","canvas","eval"],"mappings":"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","file":"static/js/main.12dbec39.chunk.js","sourcesContent":["\nfunction getNew(type, language, on = false, properties) {\n    // TODO something to validate that properties object matches the type here\n    return {\n        type,\n        language,\n        on,\n        properties\n    }\n}\n\nfunction clone(effect) {\n    return {\n        ...effect,\n        propertes: {...effect.properties}\n    }\n}\n\nlet Types = {\n    CODE_TOGGLE: 'CODE_TOGGLE',\n    SLIDER: \"SLIDER\",\n    // CODE_SLIDER: 'CODE_SLIDER'\n}\n\nlet PropertySpec = {\n    'SLIDER': {\n        code: \"string\",\n        value: 'float',\n        operator: \"string\",\n        min: 'float',\n        max: 'float',\n        step: 'float',\n        scale: 'string' // 'linear' or 'log'\n    },\n    CODE_TOGGLE: {\n        code: 'string',\n    },\n    CODE_SLIDER: {\n        code: 'string',\n        indices: 'array',\n        value: 'float',\n        min: 'float',\n        max: 'float',\n        step: 'float',\n        scale: 'string'\n    }\n}\n\nconst defaultEffects = {\n    'TidalCycles': () => {\n        return [\n            // EffectModel.getNew(EffectModel.Types.CODE_SLIDER,'TidalCycles',false,{\n            //     code:'stut  0.5 0.66',\n            //     indices: [5],\n            //     value: 2,\n            //     min: 1,\n            //     max: 0,\n            //     step: 1,\n            //     scale: 'linear'\n            // }),\n            EffectModel.getNew(EffectModel.Types.SLIDER, \"TidalCycles\", true,\n                {\n                    code: \"gain\",\n                    value: 1,\n                    operator: \"|*\",\n                    min: 0,\n                    max: 2,\n                    step: 0.01,\n                    scale: 'linear'\n                }),\n            EffectModel.getNew(EffectModel.Types.SLIDER, \"TidalCycles\", false,\n                {\n                    code: \"lpf\",\n                    value: 22000,\n                    operator: \"#\",\n                    min: 0,\n                    max: 22000,\n                    step: 10,\n                    scale: 'log'\n                }),\n            EffectModel.getNew(EffectModel.Types.SLIDER, \"TidalCycles\", false,\n                {\n                    code: \"hpf\",\n                    value: 0,\n                    operator: \"#\",\n                    min: 0,\n                    max: 22000,\n                    step: 10,\n                    scale: 'log'\n                }),\n            EffectModel.getNew(EffectModel.Types.SLIDER, \"TidalCycles\", false,\n                {\n                    code: \"coarse\",\n                    value: 0,\n                    operator: \"#\",\n                    min: 0,\n                    max: 24,\n                    step: 1,\n                    scale: 'linear'\n                }),\n            EffectModel.getNew(EffectModel.Types.SLIDER, \"TidalCycles\", false,\n                {\n                    code: \"room\",\n                    value: 0,\n                    operator: \"#\",\n                    min: 0,\n                    max: 1,\n                    step: 0.01,\n                    scale: 'linear'\n                }),\n            EffectModel.getNew(EffectModel.Types.SLIDER, \"TidalCycles\", false,\n                {\n                    code: \"size\",\n                    value: 0,\n                    operator: \"#\",\n                    min: 0,\n                    max: 1,\n                    step: 0.01,\n                    scale: 'linear'\n                }),\n            EffectModel.getNew(EffectModel.Types.CODE_TOGGLE, 'TidalCycles', false, {\n                code: ''\n            })\n        ]\n    },\n    'Hydra': () => {\n        return [\n            EffectModel.getNew(EffectModel.Types.SLIDER, 'Hydra', false,\n                {\n                    code: \"kaleid\",\n                    value: 1,\n                    min: 0,\n                    max: 50,\n                    step: 1,\n                    scale: 'linear'\n                }),\n            EffectModel.getNew(EffectModel.Types.SLIDER, 'Hydra', false,\n                {\n                    code: \"pixelate\",\n                    value: 1,\n                    min: 0,\n                    max: 200,\n                    step: 1,\n                    scale: 'linear'\n                })\n        ]\n    }\n}\n\nconst util = {defaultEffects};\n\nconst EffectModel = {\n    getNew,\n    clone,\n    Types,\n    PropertySpec,\n    util\n}\n\nexport default EffectModel\n","import React, {Component} from 'react'\nimport './index.css'\n\nexport default class Stem extends Component {\n    constructor(props) {\n        super(props);\n        this.holdTime = new Date();\n        this.dragToggle = false;\n        this.ref = React.createRef();\n        this.timeout = null;\n        this.touchMoveCount = 0;\n    }\n\n    flash(){\n        this.ref.current.classList.add('flash');\n        // setTimeout(()=>{this.ref.current.classList},500)\n        setTimeout(()=>{this.ref.current.classList.remove('flash')},500)\n    }\n\n    onMouseDown() {\n        this.timeout = setTimeout(()=>{\n            this.openInFlyout();\n        },500);\n        this.holdTime = new Date();\n        this.dragToggle = false;\n    }\n\n    onMouseUp(e) {\n        e.preventDefault();\n        this.touchMoveCount = 0;\n        let now = new Date();\n        if(!this.dragToggle){\n            if (now - this.holdTime < 500) {\n                clearTimeout(this.timeout);\n                if (e.shiftKey) {\n                    this.props.globalActions.stemUpdate(this.props.id, {selected: !this.props.selected});\n                } else {\n                    if (e.button) {\n                        e.preventDefault();\n                    } else {\n                        this.toggle()\n                    }\n                }\n            }\n        }\n\n        this.holdTime = now;\n        this.dragToggle = false;\n    }\n\n    onTouchMove(e){\n        this.touchMoveCount++;\n        e.preventDefault();\n        if(this.touchMoveCount>5){\n            clearTimeout(this.timeout);\n            this.dragToggle = true;\n        }\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.timeout);\n    }\n\n    render() {\n        return (\n            <div\n                ref={this.ref}\n                className={'Stem noselect' +' '+(this.props.highlight?'highlight':'')}\n                tabIndex={0}\n                onKeyUp={this.onKeyUp.bind(this)}\n                onTouchStart={this.onMouseDown.bind(this)}\n                onTouchEnd={this.onMouseUp.bind(this)}\n                onTouchMove={this.onTouchMove.bind(this)}\n                onMouseDown={this.onMouseDown.bind(this)}\n                onMouseUp={this.onMouseUp.bind(this)}\n\n                onContextMenu={(x) => {\n                    x.preventDefault();\n                    this.openInFlyout()\n                }}\n            >\n                <div className={'stemButton' + (this.props.selected ? ' selected' : '') + (this.props.on ? ' on ' : ' off ')}>\n                    <div className=\"verticalCenter\" style={{width: '100%'}}>\n                        {this.props.name}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    onKeyUp(e) {\n        if (e.ctrlKey && e.key === 'v') {\n            this.props.globalActions.stemPaste(this.props.id);\n        }\n    }\n\n    onTouchStart() {\n        this.toggle();\n    }\n\n    mouseUp(e) {\n        if (e.shiftKey) {\n            this.props.globalActions.stemUpdate(this.props.id, {selected: !this.props.selected});\n        } else {\n            if (e.button) {\n                e.preventDefault();\n            } else {\n                this.toggle()\n            }\n        }\n    }\n\n    openInFlyout() {\n        this.props.globalActions.stemUpdate(this.props.id, {open: true});\n    }\n\n    toggle() {\n        this.props.globalActions.stemUpdate(this.props.id, {on: !this.props.on});\n    }\n}\n","import {createAction} from 'redux-actions'\n\n\nexport const ActionSpec = {\n    'MIDI_UPDATE':{\n        name:'MIDI_UPDATE',\n        propogateToServer:true\n    },\n    'PUSH_STATE':{\n        name: 'PUSH_STATE',\n        propogateToServer:true\n    },\n    'RECEIVE_STATE':{\n        name: 'RECEIVE_STATE',\n        propogateToServer:false\n    },\n    'CONNECT': {\n        name: 'CONNECT',\n        propogateToServer: false\n    },\n    'SAVE': {\n        name: 'SAVE',\n        propogateToServer: false\n    },\n    'LOAD': {\n        name: 'LOAD',\n        propogateToServer: false\n    },\n    'LOAD_FROM_SERVER': {\n        name: 'LOAD_FROM_SERVER',\n        propogateToServer: false\n    },\n    'DOWNLOAD': {\n        name: 'DOWNLOAD',\n        propogateToServer: false\n    },\n    'MASTER_UPDATE': {\n        name: 'MASTER_UPDATE',\n        propogateToServer: true\n    },\n    'MASTER_ADD_EFFECT': {\n        name: 'MASTER_ADD_EFFECT',\n        propogateToServer: true\n    },\n    'STEM_UPDATE': {\n        name: 'STEM_UPDATE',\n        propogateToServer: true\n    },\n    'STEM_DELETE_EFFECT': {\n        name: 'STEM_DELETE_EFFECT',\n        propogateToServer: true\n    },\n    'STEM_ADD_EFFECT': {\n        name: 'STEM_ADD_EFFECT',\n        propogateToServer: true\n    },\n    'STEM_COPY': {\n        name: 'STEM_COPY',\n        propogateToServer: true\n    },\n    'STEM_PASTE': {\n        name: 'STEM_PASTE',\n        propogateToServer: true\n    },\n    'TRACK_UPDATE': {\n        name: 'TRACK_UPDATE',\n        propogateToServer: true\n    },\n    'TRACK_DELETE_STEM': {\n        name: 'TRACK_DELETE_STEM',\n        propogateToServer: true\n    },\n    'TRACK_ADD_STEM': {\n        name: 'TRACK_ADD_STEM',\n        propogateToServer: true\n    },\n    'TRACK_DELETE_EFFECT': {\n        name: 'TRACK_DELETE_EFFECT',\n        propogateToServer: true\n    },\n    'TRACK_ADD_EFFECT': {\n        name: 'TRACK_ADD_EFFECT',\n        propogateToServer: true\n    },\n    'TRACK_ADD': {\n        name: 'TRACK_ADD',\n        propogateToServer: true\n    },\n    'TRACK_DELETE': {\n        name: 'TRACK_DELETE',\n        propogateToServer: true\n    },\n    'EFFECT_UPDATE': {\n        name: 'EFFECT_UPDATE',\n        propogateToServer: true\n    },\n    'SETTINGS_UPDATE_STYLE':{\n        name: 'SETTINGS_UPDATE_STYLE',\n        propogateToServer:false\n    }\n}\n\nfunction camel(capitalSnake) {\n    let s = capitalSnake.split(\"_\");\n    s = s.map(x => {\n        return x[0] + x.slice(1, x.length).toLowerCase();\n    });\n    s[0] = s[0].toLowerCase();\n    return s.join(\"\");\n}\n\nexport let ActionTypes = {};\nexport let Actions = {};\nfor (let action in ActionSpec) {\n    let meta = {propogateToServer: ActionSpec[action].propogateToServer, fromServer:false};\n    Actions[camel(action)] = createAction(action, x => x, () => meta);\n    ActionTypes[action] = action;\n}\n\n//\n// export const ActionTypes = [\n//     'CONNECT',\n//     'SAVE',\n//     'LOAD',\n//     'DOWNLOAD',\n//     'MASTER_UPDATE',\n//     'MASTER_ADD_EFFECT',\n//     'STEM_UPDATE',\n//     'STEM_DELETE_EFFECT',\n//     'STEM_ADD_EFFECT',\n//     'STEM_COPY',\n//     'STEM_PASTE',\n//     'TRACK_UPDATE',\n//     'TRACK_DELETE_STEM',\n//     'TRACK_ADD_STEM',\n//     'TRACK_DELETE_EFFECT',\n//     'TRACK_ADD_EFFECT',\n//     'TRACK_ADD',\n//     'TRACK_DELETE',\n//     'EFFECT_UPDATE'\n// ]\n\n// const obj = {};\n// ActionTypes.forEach(x => {\n//     obj[camel(x)] = createAction(x)\n// });\n// export const Actions = obj\n\n// // MASTER ACTIONS\n// Actions.CONNECT = function(url, port, isConnected){\n//     return {type:'CONNECT', url, port, isConnected}\n// };\n//\n// // copy's given stems. if no argument copy's selected stems\n// Actions.COPY_STEMS = function(opt_stems){\n//     let stems = opt_stems;\n//     if(!stems){\n//         let state = store.getState();\n//         stems = state.tracks.map(x=>x.stems).flat().filter(x=>x.selected);\n//     }\n//     return {type:\"COPY_STEMS\", stems};\n// };\n//\n// Actions.PASTE_STEMS = function(trackId, stemId){\n//     return {type:\"PASTE_STEMS\",trackId,stemId}\n// };\n//\n// Actions.ADD_TRACK = function(){\n//     return {type:'ADD_TRACK'}\n// };\n//\n// Actions.REMOVE_TRACK = function(trackId){\n//     return {type:'ADD_TRACK', trackId};\n// };\n//\n// Actions.ADD_STEM = function(trackId){\n//     return {type:'ADD_STEM',trackId};\n// };\n//\n// Actions.REMOVE_STEM = function(trackId, stemId){\n//     return {type:'REMOVE_STEM', trackId, stemId};\n// };\n//\n// Actions.UPDATE_STEM = function(id, value){\n//     return {type:'UPDATE_STEM', id, value}\n// };\n//\n// Actions.ADD_STEM_EFFECT = function(trackId, stemId, effectType){\n//     return {type:'ADD_STEM_EFFECT', trackId, stemId, effectType}\n// }\n//\n// Actions.UPDATE_TRACK = function(value){\n//     return {type:'UPDATE_TRACK', value}\n// };\n//\n// Actions.UPDATE_MASTER = function(language,value){\n//     return {type:'UPDATE_MASTER', language, value}\n// }\n//\n// Actions.UPDATE_MASTER_EFFECT = function(effect){\n//     return {type:'UPDATE_MASTER_EFFECT', effect}\n// }\n//\n// Actions.UPDATE_EFFECT = function (effectId, effect){\n//     return {type: \"UPDATE_EFFECT\", id:effectId, value:effect}\n// }\n//\n// // Saving / Loading\n// Actions.SAVE = function(){\n//     return {type:'SAVE'}\n// };\n//\n// Actions.LOAD = function(newState){\n//     return {type:'LOAD',newState}\n// };\n//\n// Actions.DOWNLOAD = function(){\n//     return {type:'DOWNLOAD'}\n// };\n//\n// ActionTypes = {};\n// Object.keys(Actions).forEach(x=>{\n//     ActionTypes[x] = x;\n// });\n//\n// export default Actions\n","\n\nconst TrackReducer = function (tracks, action) {\n\n    const payload = action.payload;\n\n    if (action.type === 'TRACK_UPDATE') {\n        tracks[payload.trackId] = Object.assign({}, tracks[payload.trackId], payload.value);\n        return {...tracks};\n    } else if (action.type === 'TRACK_DELETE_STEM') {\n        tracks[payload.trackId].stems = tracks[payload.trackId].stems.filter(x=>{return x !== payload.stemId});\n        tracks[payload.trackId] = Object.assign({}, tracks[payload.trackId]);\n        return {...tracks};\n    } else if (action.type === 'TRACK_ADD_STEM') {\n        let newTrack = Object.assign({}, tracks[payload.trackId]);\n        newTrack.stems = newTrack.stems.concat([payload.stemId]);\n        let obj = {};\n        obj[payload.trackId] = newTrack;\n        return Object.assign({},tracks, obj)\n    } else if (action.type === 'TRACK_DELETE_EFFECT') {\n        tracks[payload.trackId] = {...tracks[payload.trackId]};\n        tracks[payload.trackId].effects = tracks[payload.track].filter(x=>{return x !== payload.effectId});\n        return {...tracks};\n    } else if (action.type === 'TRACK_ADD_EFFECT') {\n        tracks[payload.trackId] = {...tracks[payload.trackId]};\n        tracks[payload.trackId].effects.push(payload.effectId);\n        return {...tracks};\n    } else if (action.type === 'TRACK_ADD'){\n        tracks[payload.trackId] = payload.value;\n        return {...tracks};\n    }\n    return tracks\n}\n\n\nexport default TrackReducer","\nconst ConnectionReducer = function (connection, action){\n    switch (action.type){\n        case 'CONNECT':\n            return {url: action.payload.url, port:action.payload.port, isConnected:action.payload.isConnected};\n        default:\n            return connection\n    }\n}\n\nexport default ConnectionReducer","\nconst MasterReducer = function (master, action) {\n    let newLang;\n    switch (action.type) {\n        case \"MASTER_UPDATE\":\n            newLang = Object.assign({},master[action.payload.language],action.payload.value);\n            master[action.payload.language] = newLang;\n            return {...master};\n        case \"MASTER_ADD_EFFECT\":\n            newLang = Object.assign({},master[action.payload.language]);\n            newLang.effects = newLang.effects.concat([action.payload.effectId]);\n            master[action.payload.language] = newLang;\n            return {...master}\n\n        // case ActionTypes.UPDATE_MASTER:\n        //     newVal = Object.assign({}, master[action.language], action.value);\n        //     obj = {};\n        //     obj[action.language] = newVal;\n        //     return Object.assign({}, master, obj);\n        // case ActionTypes.UPDATE_MASTER_EFFECT:\n        //     let previousMaster = master[action.effect.language];\n        //     newVal = Object.assign({}, previousMaster, {\n        //         effects: previousMaster.effects.map(x => {\n        //             if (x.id === action.effect.id) {\n        //                 return Object.assign({}, x, action.effect);\n        //             }\n        //             return x\n        //         })\n        //     });\n        //     obj = {};\n        //     obj[action.effect.language] = newVal;\n        //     return Object.assign({},master,obj);\n        default:\n            return master\n    }\n}\n\nexport default MasterReducer;","\nconst StemReducer = (stems, action) => {\n    const payload = action.payload\n\n    if (action.type === 'STEM_UPDATE') {\n        stems[payload.stemId] = Object.assign({}, stems[payload.stemId], payload.value);\n        return {...stems};\n    } else if (action.type === 'STEM_DELETE_EFFECT') {\n        stems[payload.stemId] = Object.assign({}, stems[payload.stemId]);\n        stems[payload.stemId].effects = stems[payload.stemId].effects.filter(x => {\n            return x !== payload.effectId\n        });\n        return {...stems}\n    } else if (action.type === 'STEM_ADD_EFFECT') {\n        stems[payload.stemId] = Object.assign({}, stems[payload.stemId]);\n        stems[payload.stemId].effects.push(payload.effectId);\n        return {...stems}\n    } else if (action.type === 'STEM_COPY') {\n        // nothing\n        return stems\n    } else if (action.type === 'STEM_PASTE') {\n        console.log('paste not yet implemented');\n        return stems\n    } else if (action.type === 'TRACK_ADD_STEM') {\n        stems[payload.stemId] = payload.value;\n        return {...stems}\n    } else if (action.type === 'TRACK_DELETE_STEM') {\n        delete stems[payload.stemId];\n        return {...stems}\n    }\n\n    return stems\n}\n\nexport default StemReducer","\n\nconst EffectReducer = (effects, action) => {\n    if (action.type === 'EFFECT_UPDATE') {\n        effects[action.payload.effectId] = Object.assign({}, effects[action.payload.effectId], action.payload.value);\n        return {...effects};\n    } else if (action.type === \"STEM_ADD_EFFECT\") {\n        effects[action.payload.effectId] = action.payload.value;\n        return {...effects};\n    } else if (action.type === \"STEM_DELETE_EFFECT\") {\n        delete effects[action.payload.effectId];\n        return {...effects}\n    } else if (action.type === 'TRACK_ADD_EFFECT') {\n        effects[action.payload.effectId] = action.payload.value;\n        return {...effects};\n    } else if (action.type === \"TRACK_DELETE_EFFECT\") {\n        delete effects[action.payload.effectId];\n        return {...effects}\n    } else if (action.type === \"MASTER_ADD_EFFECT\") {\n        effects[action.payload.effectId] = action.payload.value;\n        return {...effects};\n    }\n    return effects;\n}\nexport default EffectReducer","\nconst MidiReducer = function (midi, action){\n    switch (action.type){\n        case 'MIDI_UPDATE':\n            return Object.assign({}, midi, action.payload);\n        default:\n            return midi\n    }\n}\n\nexport default MidiReducer","\nconst SettingsReducer = function (settings, action){\n    switch (action.type){\n        case 'SETTINGS_UPDATE_STYLE':\n            let style = Object.assign({}, settings.style, action.payload);\n            return Object.assign({}, settings,{style});\n        default:\n            return settings\n    }\n}\n\nexport default SettingsReducer","import Model from '../model'\nimport TrackReducer from \"./Track\";\nimport ConnectionReducer from \"./Connection\";\nimport MasterReducer from \"./Master\";\nimport StemReducer from './Stem.js'\nimport EffectReducer from \"./Effect\";\nimport {ActionSpec} from \"../actions\";\nimport MidiReducer from \"./MIDI\";\nimport SettingsReducer from \"./Settings\";\n\nconst CopyReducer = (copy, action)=>{\n    if (action.type==='STEM_COPY'){\n        return {type:'stems', items:action.payload.items};\n    }\n    return copy\n}\n\nconsole.log(Model.defaultState)\n\nexport default (state = Model.defaultState, action) =>{\n    if(action.type === 'LOAD'){\n        return action.payload\n    } else if (action.type === ActionSpec.RECEIVE_STATE.name){\n        return {...action.payload, connection: state.connection};\n    }\n\n    return {\n        copy: CopyReducer(state.copy,action),\n        master:MasterReducer(state.master, action),\n        connection: ConnectionReducer(state.connection, action),\n        tracks: TrackReducer(state.tracks, action),\n        stems: StemReducer(state.stems, action),\n        effects: EffectReducer(state.effects, action),\n        midi: MidiReducer(state.midi, action),\n        settings: SettingsReducer(state.settings, action)\n    }\n}\n\n\n\n// function pasteStemAtPosition(state, stem, pos) {\n//     if (pos.trackIndex >= state.tracks.length) return state;\n//     if (pos.stemIndex >= state.tracks[pos.trackIndex].stems.length) return state;\n//     let track = state.tracks[pos.trackIndex];\n//     let newStem = StemModel.clone(stem);\n//     newStem.trackId = track.id;\n//     newStem.open = false;\n//     track.stems = state.tracks[pos.trackIndex].stems.concat([]);//insertAt(state.tracks[pos.trackIndex].stems,pos.stemIndex,newStem).concat([]);\n//     track.stems[pos.stemIndex] = newStem;//insertAt(state.tracks[pos.trackIndex].stems,pos.stemIndex,newStem).concat([]);\n//     return Object.assign({}, state, {\n//         tracks: state.tracks.map(x => {\n//             if (x.id === track.id) {\n//                 return track\n//             }\n//             return x\n//         })\n//     })\n// }\n//\n// function getStemPosition(stem, state) {\n//     let trackIndex = state.tracks.findIndex(x => x.id === stem.trackId);\n//     let stemIndex = state.tracks[trackIndex].stems.findIndex(x => x.id === stem.id);\n//     return {trackIndex, stemIndex}\n// }\n\n\n/*\nActions:\n______________\nadd track\nadd stem row\nupdate value\nopen in flyout\nclose in flyout\nsave\nload\n\nStore:\n____________\n */\n","\n// TODO this is probably bad practice.... (?)\n// import {store} from \"./index\";\n\nimport store from './store'\n\nconst Connection = {};\n\nConnection.init = function(host=window.location.hostname,port=8000, onOpen=()=>{}, onClose=()=>{}, onErr=()=>{}){\n    if (Connection.ws){\n        Connection.ws.close();\n    }\n    var WebSocket;\n    if(typeof window!=='undefined'){\n        WebSocket = window.WebSocket || window.MozWebSocket;\n    } else{\n        WebSocket = require('ws');\n    }\n\n    try{\n        Connection.ws = new WebSocket('ws://' + host + \":\" + port);\n        Connection.ws.isOpen = false;\n        Connection.ws.onopen = function open() {\n            Connection.ws.isOpen = true;\n            console.log('ws connection established');\n            onOpen();\n        }\n        Connection.ws.onmessage = Connection.onMessage;\n\n        Connection.ws.onerror = (e)=>{\n            console.warn(e);\n            onErr(e);\n        }\n        Connection.ws.onclose =  function incoming(data) {\n            Connection.ws.isOpen = false;\n            onClose(data);\n        };\n    } catch (e) {\n        onErr();\n    }\n};\n\nConnection.onMessage = function(event){\n    let message = JSON.parse(event.data);\n    if(message.type==='action'){\n        let action = message.action;\n        action.meta = action.meta || {};\n        action.meta.fromServer = true;\n        store.dispatch(action)\n    } else{\n        console.warn('Unrecognized message type from WS server: '+message.type, message);\n    }\n};\n\nConnection.sendAction = function(action){\n    if(!Connection.ws || !Connection.ws.isOpen){\n        console.warn('Connection is closed');\n        return;\n    }\n    const data = {type:'action',action}\n    Connection.ws.send(JSON.stringify(data));\n}\n\nConnection.sendCode = function(code){\n    if(!Connection.ws || !Connection.ws.isOpen){\n        console.warn('Connection is closed');\n        return;\n    }\n    Connection.ws.send(JSON.stringify({type:'eval',code}));\n};\n\nexport default Connection","import {applyMiddleware, createStore} from \"redux\";\nimport DeadReducer from './reducers'\nimport {serverControl} from \"./middleware/index\";\nimport dynamicMiddlewares from 'redux-dynamic-middlewares'\n\n\n// TODO: dynamic middleware added so midi could re-use same store architecture and just add a middleware for\n//      midi related things - this should probably be changed so each client just instantiates its own proper store\n//      from the beginning...\nconst store = createStore(DeadReducer, applyMiddleware(serverControl, dynamicMiddlewares));\n// const store = createStore(DeadReducer, applyMiddleware(serverControl, dynamicMiddlewares));\nexport default store","import Connection from \"../Connection\";\nimport {ActionSpec, ActionTypes} from \"../actions\";\n\n\n// propogate action to server if it didn't originate from there\n//\n\n\n\nexport const serverControl = store => next => action => {\n    const meta = action.meta;\n    if (!meta.fromServer && meta.propogateToServer){\n        var newAction = {...action}\n        // if pushing state, change the action to a receive for other clients\n        if(newAction.type === ActionSpec.PUSH_STATE.name){\n            newAction.type = ActionSpec.RECEIVE_STATE.name\n        }\n\n        // dispatch to server\n        Connection.sendAction(newAction);\n    }\n    return next(action);\n}\n","\nimport {Actions} from './index.js';\nimport store from '../store.js';\nimport Connection from \"../Connection\";\nimport Id from \"../model/Id\";\nimport EffectModel from \"../model/EffectModel\";\nimport StemModel from \"../model/StemModel\";\nimport TrackModel from \"../model/TrackModel\";\nimport {ActionSpec} from \"./index\";\n\nfunction getPosition(state, stemId) {\n    let track = Object.keys(state.tracks).findIndex(x => {\n        return state.tracks[x].stems.includes(stemId)\n    });\n    let stem = state.tracks[Object.keys(state.tracks)[track]].stems.findIndex(x => {\n        return x === stemId\n    });\n    return {track, stem}\n}\n\nconst GlobalActions = dispatch => {\n    return {\n        pushState:()=>{\n            let providedState = {...store.getState(), connection:undefined};\n            dispatch(Actions.pushState(providedState));\n        },\n        receiveState:(state)=>{\n            dispatch(Actions.receiveState(state));\n        },\n        connect: (url, port) => {\n            let actions = Actions\n            let onOpen = () => {\n                dispatch(Actions.connect({url, port, isConnected: true}))\n            };\n            let onClose = () => {\n                dispatch(actions.connect({url:url, port:port, isConnected: false}))\n            };\n            let onError = onClose;\n            Connection.init(url, port, onOpen, onClose, onError);\n        },\n        stemCopy: () => {\n            let state = store.getState();\n            let items = Object.keys(state.stems).filter(x => {\n                return state.stems[x].selected\n            });\n            dispatch(Actions.stemCopy({items}))\n        },\n        stemPaste: (stemId) => {\n            let state = store.getState();\n            if (!state.copy || state.copy.items.length < 1) {\n                console.log('nothing copied');\n                return\n            }\n            let pastePos = getPosition(state, stemId);\n            let globalActions = GlobalActions(dispatch)\n            let anchorPos = getPosition(state, state.copy.items[0]);\n            let diffPos = {track: pastePos.track - anchorPos.track, stem: pastePos.stem - anchorPos.stem};\n            state.copy.items.forEach(sId => {\n                let cpPos = getPosition(state, sId);\n\n                let newPos = {track: cpPos.track + diffPos.track, stem: cpPos.stem + diffPos.stem};\n\n                if (newPos.track >= Object.keys(state.tracks).length) {\n                    console.log('too long');\n                    return\n                }\n\n                let targetTrackId = Object.keys(state.tracks)[newPos.track];\n\n                while (newPos.stem >= state.tracks[targetTrackId].stems.length) {\n                    globalActions.trackAddStem(targetTrackId);\n                    state = store.getState();\n                }\n                let targetStemId = state.tracks[targetTrackId].stems[newPos.stem];\n                globalActions.stemUpdate(targetStemId, state.stems[sId]);\n            })\n        },\n        save: () => {\n            window.localStorage.setItem('state', JSON.stringify(store.getState()));\n            console.log('saved')\n        },\n        load: () => {\n            let newState = window.localStorage.getItem('state');\n            if (newState) {\n                newState = JSON.parse(newState);\n                Id.init(newState);\n                dispatch(Actions.load(newState));\n            } else {\n                console.warn('Tried to load state but empty');\n            }\n        },\n        loadFromServer: ()=>{\n            Connection.sendAction({type:ActionSpec.LOAD_FROM_SERVER.name,meta:{propogateToServer:true,fromServer:false}});\n        },\n        open: (file) => {\n            if (!file) {\n                let input = document.createElement('input');\n                input.type = 'file';\n                input.onchange = (e) => {\n                    input.files[0].text().then(x => {\n                        let newState = JSON.parse(x);\n                        Id.init(newState);\n                        dispatch(Actions.load(newState));\n                    });\n                };\n                input.click();\n            } else {\n                file.text().then(x => {\n                    dispatch(Actions.load(JSON.parse(x)));\n                });\n            }\n        },\n        download: () => {\n            let dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(store.getState()));\n            let anchor = document.createElement('a');\n            anchor.setAttribute(\"href\", dataStr);\n            anchor.setAttribute(\"download\", \"dead_state.json\");\n            anchor.click();\n            dispatch(Actions.download());\n        },\n        masterUpdate: (language, value) => {\n            dispatch(Actions.masterUpdate({language, value}));\n        },\n        masterAddEffect: (type, language, on, properties) => {\n            let effectId = Id.new();\n            let value = EffectModel.getNew(type, language, on, properties);\n            dispatch(Actions.masterAddEffect({language, effectId, value}));\n        },\n        stemUpdate: (stemId, value) => {\n            dispatch(Actions.stemUpdate({stemId, value}));\n        },\n        // Separated to a different action so not every stemUpdate required importing the store and checking if\n        // language changed.\n        stemUpdateLanguage:(stemId, language) =>{\n            let stem = store.getState().stems[stemId];\n            let globalActions = GlobalActions(dispatch);\n            if (stem.language!==language){\n                stem.effects.forEach(x=>{globalActions.stemDeleteEffect(stemId,x)});\n                EffectModel.util.defaultEffects[language]().forEach(effect => {\n                    globalActions.stemAddEffect(stemId, effect.type, effect.language, effect.on, effect.properties);\n                });\n                globalActions.stemUpdate(stemId,{language:language});\n            }\n        },\n        stemDeleteEffect: (stemId, effectId) => {\n            dispatch(Actions.stemDeleteEffect({stemId, effectId}));\n        },\n        stemAddEffect: (stemId, type, language, on, properties) => {\n            let effectId = Id.new();\n            let value = EffectModel.getNew(type, language, on, properties);\n            dispatch(Actions.stemAddEffect({stemId, effectId, value}));\n        },\n        trackUpdate: (trackId, value) => {\n            dispatch(Actions.trackUpdate({trackId, value}));\n        },\n        trackDeleteStem: (trackId, stemId) => {\n            // if no trackId provided (not ideal), search for the track with the provided stemId\n            if(trackId===undefined){\n                let state = store.getState();\n                trackId = Object.keys(state.tracks).find(x=>{return state.tracks[x].stems.includes(stemId)});\n            }\n            dispatch(Actions.trackDeleteStem({trackId, stemId}));\n        },\n        // TODO: stuff like this would probably be better as sagas\n        trackAddStem: (trackId, language = 'TidalCycles') => {\n\n            // create stem and assign to track\n            let stemId = Id.new();\n            let stem = StemModel.getNew(language);\n            dispatch(Actions.trackAddStem({trackId, stemId, value: stem}));\n\n            // create default effects for the new stem\n            EffectModel.util.defaultEffects[language]().forEach(effect => {\n                GlobalActions(dispatch).stemAddEffect(stemId, effect.type, effect.language, effect.on, effect.properties);\n            });\n        },\n        trackDeleteEffect: (trackId, effectId) => {\n            dispatch(Actions.trackDeleteEffect({trackId, effectId}));\n        },\n        trackAddEffect: (trackId) => {\n            let effectId = Id.new();\n            let value = EffectModel.getNew(EffectModel.Types.SLIDER, \"TidalCycles\", true,\n                {\n                    code:'gain',\n                    value: 1,\n                    operator: \"|*\",\n                    min: 0,\n                    max: 2,\n                    step: 0.01,\n                    scale: 'linear'\n                });\n            dispatch(Actions.trackAddEffect({trackId, effectId, value}));\n        },\n        trackAdd: (opt_language) => {\n            let value = TrackModel.getNew(opt_language);\n            let trackId = Id.new();\n            dispatch(Actions.trackAdd({trackId, value}));\n            let globalActions = GlobalActions(dispatch);\n            [0, 0, 0, 0, 0].forEach(() => {\n                globalActions.trackAddStem(trackId)\n            });\n            globalActions.trackAddEffect(trackId,);\n        },\n        trackDelete: (trackId) => {\n            let state = store.getState();\n            let track = state.tracks[trackId];\n            let globalActions = GlobalActions(dispatch)\n            track.stems.forEach(s => {\n                globalActions.trackDeleteStem(trackId, s);\n            });\n            dispatch(Actions.trackDelete({trackId}));\n        },\n        effectUpdate: (effectId, value) => {\n            dispatch(Actions.effectUpdate({effectId, value}));\n        },\n        settingsUpdateStyle: (value) =>{\n            dispatch(Actions.settingsUpdateStyle({value}))\n        }\n    }\n}\n\nexport default GlobalActions\n\n// const GlobalActions = dispatch=> {\n//     return {\n//         connect: (url,port)=>{\n//             let onOpen = ()=>{\n//                 dispatch(Actions.CONNECT(url,port,true));\n//             };\n//             let onClose = ()=>{dispatch(Actions.CONNECT(url,port,false))};\n//             let onError = onClose;\n//             Connection.init(url,port, onOpen, onClose, onError);\n//         },\n//         updateMaster:(language, value) =>{\n//             dispatch(Actions.UPDATE_MASTER(language, value));\n//         },\n//         updateMasterEffect:(effect) =>{\n//             dispatch(Actions.UPDATE_MASTER_EFFECT(effect));\n//         },\n//         copyStems:(x)=>{\n//             dispatch(Actions.COPY_STEMS(x))\n//         },\n//         pasteStems:(trackId, stemId)=>{\n//             dispatch(Actions.PASTE_STEMS(trackId, stemId));\n//             let state = store.getState();\n//             state.tracks.forEach(track=>{\n//                 track.stems.filter(x=>x.selected).forEach(stem=>{\n//                     dispatch(Actions.UPDATE_STEM(stem.trackId,stem.id,{selected:false}));\n//                 })\n//             })\n//         },\n//         addTrack: ()=>{\n//             dispatch(Actions.ADD_TRACK())\n//         },\n//         removeTrack: (trackId)=>{\n//             dispatch(Actions.REMOVE_TRACK(trackId))\n//         },\n//         addStem: (trackId)=>{\n//             dispatch(Actions.ADD_STEM(trackId))\n//             // renderState(store.getState());\n//         },\n//         removeStem: (trackId, stemId)=>{\n//             dispatch(Actions.REMOVE_STEM(trackId,stemId))\n//             // renderState(store.getState());\n//         },\n//         updateStem: (trackId, stemId, value)=>{\n//             dispatch(Actions.UPDATE_STEM(stemId, value));\n//         },\n//         openInFlyout: (trackId, stemId)=> {\n//             dispatch(Actions.OPEN_IN_FLYOUT(trackId,stemId))\n//         },\n//         updateTrack: (value)=>{\n//             dispatch(Actions.UPDATE_TRACK(value))\n//             // renderState(store.getState());\n//         },\n//         addStemEffect:(trackId, stemId,type)=>{\n//             dispatch(Actions.ADD_STEM_EFFECT(trackId, stemId,type))\n//         },\n//         // toggleLive: (value)=>{\n//         //     dispatch(Actions.TOGGLE_LIVE(value))\n//         // },\n//         save:()=>{\n//             window.localStorage.setItem('state', JSON.stringify(store.getState()));\n//             console.log('saved')\n//         },\n//         load: ()=>{\n//             let newState = window.localStorage.getItem('state');\n//             if(newState){\n//                 newState = JSON.parse(newState);\n//                 Id.init(newState);\n//                 newState.tracks.forEach(track=>{\n//                     track.stems.forEach(stem=>{\n//                         stem.trackId = track.id\n//                     });\n//                 });\n//                 dispatch(Actions.LOAD(Model.defaultState));\n//                 dispatch(Actions.LOAD(newState));\n//                 // renderTempoChange(store.getState());\n//                 // renderBootScript(store.getState());\n//             } else {\n//                 console.warn('Tried to load state but empty')\n//             }\n//         },\n//         download: ()=>{\n//             let dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(store.getState()));\n//             let anchor = document.createElement('a')\n//             anchor.setAttribute(\"href\", dataStr);\n//             anchor.setAttribute(\"download\", \"dead_state.json\");\n//             anchor.click();\n//             dispatch(Actions.DOWNLOAD());\n//         },\n//         openFile: (file)=>{\n//             if(!file){\n//                 let input = document.createElement('input');\n//                 input.type = 'file';\n//                 input.onchange = (e)=>{\n//                     input.files[0].text().then(x=>{\n//                         dispatch(Actions.LOAD(JSON.parse(x)));\n//                     });\n//                 };\n//                 input.click();\n//             } else {\n//                 file.text().then(x=>{\n//                     dispatch(Actions.LOAD(JSON.parse(x)));\n//                 });\n//             }\n//         }\n//     }\n// };\n//\n// export default GlobalActions;\n","import Stem from '../components/Stem'\nimport {connect} from 'react-redux';\nimport GlobalActions from \"../actions/GlobalActions\";\n\nconst mapStateToProps = (state,ownProps) => {\n\n  // important for ownProps.id to refer to id of this stem\n  return {...state.stems[ownProps.id],...ownProps};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        globalActions: GlobalActions(dispatch)\n    }\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Stem);\n","import React , {Component} from \"react\";\nimport './index.css'\n\nexport default class PlusButton extends Component {\n\n    render() {\n        return (\n            <div {...this.props} className={\"plusButton\"}>\n                <div>+</div>\n            </div>\n        )\n    }\n\n}","import React , {Component} from \"react\";\nimport './index.css'\n\nexport default class Toggle extends Component {\n\n    onClick(){\n        if(this.props.onChange){\n            this.props.onChange(!this.props.on);\n        } else{\n            console.warn('no onChange for toggle')\n        }\n    }\n\n    render() {\n        return (\n            <div onContextMenu={this.onClick.bind(this)} onClick={this.onClick.bind(this)} className={\"Toggle\"+(this.props.on?\" on\":\"\")}>\n                <div></div>\n            </div>\n        )\n    }\n\n}","import React, {Component} from 'react';\nimport './index.css'\nimport {Grid, Slider, Input} from '@material-ui/core';\nimport Toggle from \"../../util/Toggle\";\n\nexport default class SliderEffect extends Component {\n    constructor (props){\n        super(props);\n        let sliderValue = this.toSliderScale(this.props.properties.value);\n        this.state = {value:this.props.properties.value, sliderValue};\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(this.props.properties.value !== prevProps.properties.value){\n            const sliderValue = this.toSliderScale(this.props.properties.value);\n            this.setState({value:this.props.properties.value, sliderValue});\n        }\n    }\n\n    toSliderScale(x){\n        if (this.props.properties.scale==='log'){\n            let range = this.props.properties.max-this.props.properties.min;\n            return Math.pow(x/range,0.5)*range;\n        }\n        return x\n    }\n\n    fromSliderScale(x){\n        if(this.props.properties.scale==='log'){\n            let range = this.props.properties.max-this.props.properties.min;\n            return Math.round(Math.pow(x/range,2)*range*this.props.properties.step)/this.props.properties.step;\n        }\n        return x\n    }\n\n    render(){\n        return (this.props.isVertical?this.renderVertical():this.renderHorizontal())\n    }\n\n    handleSliderChange(e, newValue){\n        if(newValue){\n            const properties = this.props.properties;\n            properties.value = newValue;\n            this.props.globalActions.effectUpdate(this.props.id,{properties});\n        }\n    }\n\n    handleInputChange(e){\n        let value = parseFloat(e.target.value);\n        const properties = this.props.properties;\n        properties.value = value;\n        this.props.globalActions.effectUpdate(this.props.id, {properties});\n    }\n\n    toggle(on){\n        this.props.globalActions.effectUpdate(this.props.id, {on})\n    }\n\n    renderHorizontal(){\n        return (\n            <div className={'Slider horizontal'}>\n                {this.props.noToggle ? null : <Toggle onChange={this.toggle.bind(this)} on={this.props.on}/>}\n                <div className={'text'}><div>{this.props.properties.code}</div></div>\n                <Grid container spacing={2} alignItems=\"center\">\n                    <Grid item xs>\n                        <Slider\n                            onChange={(e,newValue)=>{\n                                if(newValue){\n                                    this.setState({sliderValue:newValue,value:this.fromSliderScale(newValue)});\n                                    this.handleSliderChange(e,newValue);\n                                }\n                            }}\n                            min={this.props.properties.min}\n                            max={this.props.properties.max}\n                            step={this.props.properties.step}\n                            value={parseFloat(this.state.sliderValue)}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <input\n                            margin=\"dense\"\n                            onInput={(e)=>{\n                                let value = parseFloat(e.target.value);\n                                e.persist()\n                                this.setState({value:value, sliderValue:this.toSliderScale(value)});\n                                this.handleInputChange.bind(this)(e);\n                            }}\n                            value={this.state.value}\n                            step={this.props.properties.step}\n                            min={this.props.properties.min}\n                            max={this.props.properties.max}\n                            type={'number'}\n                        />\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n\n\n    renderVertical(){\n        return (\n            <div className={'Slider vertical'}>\n\n                <Slider\n                    orientation='vertical'\n                    onChange={(e,newValue)=>{\n                        if(newValue){\n                            this.setState({sliderValue:newValue,value:this.fromSliderScale(newValue)});\n                            this.handleSliderChange(e,newValue);\n                        }\n                    }}\n                    min={this.props.properties.min}\n                    max={this.props.properties.max}\n                    step={this.props.properties.step}\n                    value={parseFloat(this.state.sliderValue)}\n                />\n                        <Input\n                            margin=\"dense\"\n                            onChange={(e)=>{\n                                let value = parseFloat(e.target.value);\n                                e.persist()\n                                this.setState({value:value, sliderValue:this.toSliderScale(value)});\n                                this.handleInputChange.bind(this)(e);\n                            }}\n                            value={this.state.value}\n                            inputProps={{\n                                step: this.props.properties.step,\n                                min: this.props.properties.min,\n                                max: this.props.properties.max,\n                                type: 'number',\n                                'aria-labelledby': 'input-slider',\n                            }}\n                        />\n                        <div style={{textAlign:'center'}}>\n                            {this.props.properties.code}\n                            {this.props.noToggle ? null :\n                                <Toggle onChange={this.toggle.bind(this)} on={this.props.on}/>\n                            }\n                        </div>\n            </div>\n        )\n    }\n}\n","import React, {Component} from 'react';\nimport './index.css'\nimport Toggle from \"../../util/Toggle\";\nimport {debounce} from 'lodash';\n\nclass CodeToggle extends Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            code:this.props.properties.code\n        }\n        this.effectUpdate = debounce((code)=>{this.props.globalActions.effectUpdate(this.props.id,{properties:{code}})},500);\n    }\n\n    onChange(e){\n        const code = e.target.value;\n        this.setState({code});\n        this.effectUpdate(code);\n    }\n\n    onToggle(on){\n        this.props.globalActions.effectUpdate(this.props.id, {on});\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        // if props are different from state the let props override (eg. from server)\n        // but only if theres an actual difference in prev props and current props\n        if(prevProps.properties.code!== this.props.properties.code && this.props.properties.code!==this.state.code){\n            this.setState({...this.state, code:this.props.properties.code});\n        }\n    }\n\n    render() {\n        return (\n            <div className={'CodeToggle'}>\n                <div>\n                    <Toggle on={this.props.on} onChange={this.onToggle.bind(this)}/>\n                    <div className={'text'}><div>Code Toggle</div></div>\n                </div>\n                <div>\n                    <input type={'text'} onChange={this.onChange.bind(this)} value={this.state.code}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default CodeToggle;","import React, {Component} from 'react';\nimport './index.css'\nimport debounce from 'lodash/debounce'\n\nclass AutosizeInput extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            width: 0\n        }\n        this.spanRef = React.createRef()\n    }\n\n    onChange(e) {\n        this.spanRef.current.innerText = e.target.value;\n        let width = this.spanRef.current.scrollWidth;\n        this.setState({width});\n        this.props.onChange(e);\n    }\n\n    render() {\n        let style = this.props.style || {};\n        style.width = this.state.width + 'px';\n        return (\n            <div>\n                <input {...this.props} style={style} onChange={this.onChange.bind(this)}/>\n                <span ref={this.spanRef} style={{color:'transparent',backgroundColor:'transparent',pointerEvents:'none',position:'absolute'}}>{this.props.value}</span>\n            </div>\n        );\n    }\n}\n\n\n\nclass TemplateInput extends Component {\n\n    constructor(props) {\n        super(props);\n        // this.props.value;\n        this.state = {\n            text: this.props.text,\n            indices: this.props.indices,\n        }\n        this.onChange = debounce(this._onChange, 500);\n    }\n\n    _onChange() {\n\n    }\n\n    textChange(e) {\n    // debugger;\n    }\n\n    render() {\n        let key = 0;\n        let text = [<AutosizeInput onChange={this.textChange.bind(this)} key={key + 'text'} className={'text'}/>];\n        key++;\n        let str = this.state.text;\n        this.state.indices.forEach(i => {\n            let left = str.slice(0, i);\n            let right = str.slice(i);\n            str = right;\n            text.push(<AutosizeInput onChange={this.textChange.bind(this)} key={key + 'text'} className={'text'}\n                                     value={left}/>);\n            text.push(<AutosizeInput key={key + 'placeholder'} className={'placeholder'} value={this.props.value}/>);\n            key++\n        });\n        text.push(<AutosizeInput onChange={this.textChange.bind(this)} key={key + 'text'} className={'text'}\n                                 value={str}/>);\n\n\n        return (\n            <div className={'TemplateInput'}>\n                <div className={'text'}>\n                    {text}\n                </div>\n                <button>insert</button>\n            </div>\n        );\n    }\n}\n\nexport default TemplateInput;","import React, {Component} from 'react';\nimport './index.css'\nimport EffectModel from \"../../model/EffectModel\";\nimport Slider from \"./Slider\";\nimport CodeToggle from \"./CodeToggle\";\nimport CodeSlider from \"./CodeSlider\";\n\nexport default class Effect extends Component {\n    render() {\n        let component;\n\n        if (this.props.type === EffectModel.Types.SLIDER) {\n            component = <Slider {...this.props}/>;\n        } else if (this.props.type === EffectModel.Types.CODE_TOGGLE) {\n            component = <CodeToggle {...this.props}/>;\n        // } else if (this.props.type === EffectModel.Types.CODE_SLIDER) {\n        //     debugger\n        //     component = <CodeSlider {...this.props}/>;\n        } else {\n            debugger;\n        }\n\n        return (\n            <div className={'Effect'} id={this.props.id}>{component}</div>\n        )\n    }\n}\n","import React, {Component} from 'react';\nimport Toggle from \"../../util/Toggle\";\nimport TemplateInput from \"../../util/TemplateInput\";\n\n/*\n    CODE_SLIDER:{\n        code: 'string',\n        injectIndices: 'array',\n        value: 'float',\n        min: 'float',\n        max: 'float',\n        step: 'float',\n        scale: 'string'\n    }\n */\n\nclass CodeSlider extends Component {\n\n    onToggle(on){\n        this.props.globalActions.effectUpdate(this.props.id, {on});\n    }\n\n    onChange(...args){\n        console.log(...args)\n    }\n\n    render() {\n        return (\n            <div className={'CodeSlider'}>\n                <div>\n                    <Toggle on={this.props.on} onChange={this.onToggle.bind(this)}/>\n                    <div className={'text'}><div>Code Slider</div></div>\n                </div>\n                <TemplateInput onChange={this.onChange.bind(this)} text={this.props.properties.code} indices={this.props.properties.indices} value={this.props.properties.value} />\n\n            </div>\n        );\n    }\n}\n\nexport default CodeSlider;","import Effect from '../components/Effect'\nimport {connect} from 'react-redux';\nimport GlobalActions from \"../actions/GlobalActions\";\n\nconst mapStateToProps = (state,ownProps) => {\n  return {\n    ...state.effects[ownProps.id],\n    ...ownProps\n  }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        globalActions: GlobalActions(dispatch)\n    }\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Effect);\n","import React, {Component} from 'react'\nimport './index.css'\nimport Stem from '../../containers/Stem';\nimport PlusButton from \"../util/PlusButton/PlusButton\";\nimport Effect from \"../../containers/Effect\";\n\n\nexport default class Track extends Component {\n    stemToComponent(id, row) {\n\n        let highlight = row < (this.props.midi.top+this.props.midi.rows) && row >= this.props.midi.top && this.props.index< (this.props.midi.left+this.props.midi.columns) && this.props.index >= this.props.midi.left;\n        return <Stem key={id}\n                     id={id}\n                     highlight={highlight}\n        />\n    }\n\n    render() {\n        let stems = this.props.stems.map(this.stemToComponent.bind(this));\n        return (\n            <div className='Track'>\n                <input onChange={this.titleChange.bind(this)} value={this.props.name}/>\n                <div style={{position:'relative',height:'100%'}}>\n                    <div className={'stems'}>\n                        {stems}\n                        <div style={{padding:'5px'}}>\n                            <PlusButton onClick={this.addStem.bind(this)}/>\n                        </div>\n                    </div>\n                    <div className={'effects'}>\n                        <div className={'launchButton'}>\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"var(--font-color-dark)\" width=\"24\" height=\"24\"\n                                 viewBox=\"0 0 24 24\">\n                                <path d=\"M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z\"/>\n                                <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n                            </svg>\n                        </div>\n                        <Effect isVertical noToggle updateEffect={this.updateEffect.bind(this)}\n                                id={this.props.effects[0]}/>\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n\n\n    updateEffect(gainEffect) {\n        this.props.globalActions.trackUpdate(this.props.id, {effects: [gainEffect]});\n    }\n\n    addStem() {\n        this.props.globalActions.trackAddStem(this.props.id);\n    }\n\n    titleChange(e) {\n        this.props.globalActions.trackUpdate(this.props.id, {name: e.target.value});\n    }\n\n}\n","import Track from '../components/Track'\nimport {connect} from 'react-redux';\nimport GlobalActions from \"../actions/GlobalActions\";\n\nconst mapStateToProps = (state,ownProps) => {\n  // important for ownProps.id to refer to id of this track\n    let index = Object.keys(state.tracks).findIndex(x=> x===ownProps.id);\n    let track = state.tracks[ownProps.id];\n  return {...track,...ownProps,midi:state.midi, index}\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        globalActions: GlobalActions(dispatch)\n    }\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Track);\n","import React, { Component } from 'react';\nimport Track from '../../containers/Track';\nimport './index.css';\nimport PlusButton from \"../util/PlusButton/PlusButton\";\n\nexport default class LaunchSpace extends Component {\n\n    trackToDom(x){\n        x.globalActions = this.props.globalActions;\n        return (<Track key={x.id} {...x} />)\n    }\n\n    trackIdToComponent(id){\n      return <Track key={id} id={id}/>\n        // let track = this.populateTrack(this.props, this.props.tracks[id]);\n        // let stems = {};\n        // track.stems.forEach(x=>{stems[x] = this.props.stems[x]});\n        // let effects = {};track.effects.map(x=>{return this.props.effects[x]}).concat(stems.map(x=>{return this.props.effects[x]})).flat();\n        // let props = {\n        //     stems,\n        //     effects,\n        //     key:id\n        // }\n    }\n\n    render(){\n\n        let tracks = Object.keys(this.props.tracks).map(this.trackIdToComponent.bind(this));\n\n        return (\n            <div className=\"LaunchSpace\" style={this.props.style} tabIndex=\"1\" onKeyUp={this.onKeyUp.bind(this)}>\n                {tracks}\n                <PlusButton onClick={this.newTrack.bind(this)} style={{display:'inline-block',top:'0px',width:'50px',minWidth:'50px',height:'30px',margin:'5px'}}/>\n            </div>\n        )\n    }\n\n    onKeyUp(e){\n        if(e.key.toLowerCase()==='delete'){\n            let ids = Object.keys(this.props.tracks).map(x=>{return this.props.tracks[x].stems.map(y=>{return {trackId:x,stemId:y,selected:this.props.stems[y].selected}})}).flat();\n            let selectedIds = ids.filter(x=>x.selected);\n            selectedIds.forEach(x=>{this.props.globalActions.trackDeleteStem(x.trackId,x.stemId)});\n        }else if (e.ctrlKey && e.key.toLowerCase()==='c'){\n            this.props.globalActions.stemCopy();\n        } else if (e.key.toLowerCase()==='escape'){\n            let selectedStems = Object.keys(this.props.stems).filter(x=>{return this.props.stems[x].selected});\n            selectedStems.forEach(x=>this.props.globalActions.stemUpdate(x,{selected:false}));\n        }\n    }\n\n    newTrack(){\n        this.props.globalActions.trackAdd();\n    }\n\n}\n","import LaunchSpace from '../components/LaunchSpace'\nimport GlobalActions from \"../actions/GlobalActions\";\nimport {connect} from 'react-redux';\n\nexport const mapStateToProps = (state,props) => {\n  return state;\n    // let newState = {\n    //     connection:state.connection,\n    //     master:state.master,\n    //     tracks:[]\n    // };\n    //\n    // newState.tracks = Object.keys(Object.assign({},state.tracks)).map((x)=>{return populateTrack(state, x)});\n    // return newState;\n    // // Object.keys(state.tracks).forEach(trackId=>{\n    // //     let stems = state.tracks[trackId].stems.map(x=>{return state.stems[x]});\n    // // });\n};\n\n// function populateTrack(state, trackId){\n//     let track = state.tracks[trackId];\n//     track.id = trackId\n//     // let track = state.tracks[trackId];\n//     track.stems = track.stems.map(x=>{return populateStem(state, x)});\n//     //TODO temp hack\n//     // track.gainEffect = track.effects.map(x=>{return state.effects[x]});\n//     track.gainEffect = state.effects[track.effects[0]];\n//     return track\n// }\n//\n// function populateStem(state, stemId){\n//     let stem = state.stems[stemId];\n//     debugger;\n//     stem.id = stemId\n//     stem.effects = stem.effects.map(id=>{return populateEffect(state, id)});\n//     return stem\n// }\n//\n// function populateEffect(state, effectId){\n//     let effect = state.effects[effectId];\n//     effect.id = effectId;\n//     return effect;\n// }\n\n// function populateTrack(state, trackId){\n//     let track = Object.assign({},state.tracks[trackId]);\n//     // let track = state.tracks[trackId];\n//     track.stems = track.stems.map(x=>{return populateStem(state, x)});\n//     //TODO temp hack\n//     // track.gainEffect = track.effects.map(x=>{return state.effects[x]});\n//     track.gainEffect = state.effects[track.effects[0]];\n//     return track\n// }\n//\n// function populateStem(state, stemId){\n//     let stem = Object.assign({},state.stems[stemId]);\n//     // let stem = state.stems[stemId];\n//     stem.id = stemId;\n//     stem.effects = stem.effects.map(id=>{return populateEffect(state, id)});\n//     return stem\n// }\n//\n// function populateEffect(state, effectId){\n//     let effect = Object.assign({},state.effects[effectId]);\n//     // let effect = state.effects[effectId];\n//     effect.id = effectId;\n//     return effect;\n// }\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      globalActions: GlobalActions(dispatch)\n  }\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(LaunchSpace);\n","import React, {Component} from 'react'\nimport './index.css'\nimport debounce from \"lodash/debounce\";\nimport Toggle from \"../util/Toggle\";\n\nexport default class CodeEditor extends Component {\n\n    // onChange, onChangeLive, code, live\n    constructor(props) {\n        super(props);\n\n        this.state = {code: this.props.code};\n        this.updateCode = debounce(this.props.onChange, 1000);\n        this.flashTimeout = null;\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(prevProps.code !== this.props.code && (this.props.code !== this.state.code)){\n            this.setState({code:this.props.code});\n        }\n    }\n\n    render() {\n        return (\n            <div className={'CodeEditor'}>\n                <div className={'Liveness'}>\n                    <div><div className={'verticalCenter'}>Live</div></div>\n                    <Toggle onChange={(e)=>{this.props.onChangeLive(e)}} on={this.props.live}/>\n                    <button disabled={this.props.live} onClick={(e) => {\n                        this.props.onChange(this.state.code)\n                    }}>eval\n                    </button>\n                </div>\n                <textarea\n                    className={this.state.flash ? 'flash' : ''}\n                    onKeyPress={this.onKeyPress.bind(this)}\n                    onChange={(e) => {\n                        this.setState({code: e.target.value});\n                        if (this.props.live) {\n                            this.updateCode.bind(this)(e.target.value)\n                        }\n                    }\n                    }\n                    value={this.state.code}\n                />\n            </div>\n        )\n    }\n\n    onKeyPress(e) {\n        if (e.shiftKey) {\n            if (e.key === 'Enter') {\n                e.preventDefault();\n                this.props.onChange(this.state.code);\n                clearTimeout(this.flashTimeout);\n                this.setState({flash: true});\n                this.flashTimeout = setTimeout(() => {\n                    this.setState({flash: false})\n                }, 1);\n            }\n        }\n    }\n}","import React, {Component} from 'react';\nimport EffectModel from \"../../../model/EffectModel\";\nimport './index.css'\n\nfunction getInput(id, type) {\n    return {\n        'array': (<input placeholder={'array'} id={id} className={'specInput'} type='text'/>),\n        'string': (<input placeholder={'string'} id={id} className={'specInput'} type='text'/>),\n        'float': (<input placeholder={'float'} id={id} className={'specInput'} type='number'/>),\n        'integer': (<input placeholder={'integer'} id={id} className={'specInput'} type='number'/>),\n        'boolean': (<input placeholder={'boolean'} id={id} className={'specInput'} type='checkbox'/>)\n    }[type]\n}\n\nfunction parseValue(value, type){\n    switch(type){\n        case 'array':\n            return JSON.parse(value);\n        case 'string':\n            return value;\n        case 'float':\n            return parseFloat(value);\n        case 'integer':\n            return parseInt(value);\n        case 'boolean':\n            return value==='true';\n        default:\n            console.warn('Type not defined: '+type);\n            return value\n    }\n}\n\nclass EffectCreator extends Component {\n\n    constructor(props) {\n        super(props);\n        this.ref = React.createRef();\n        this.state = {\n            creating: false,\n            progress: 'plus',\n            type: null\n        }\n    }\n\n    transitionToSpec() {\n        let input = this.ref.current.querySelector('#effect_creator_type_input');\n        if (!input) {\n            console.warn('this shouldnt happen');\n            return\n        }\n        let type = input.value;\n        this.setState({type, progress: 'spec'});\n    }\n\n    render() {\n        let inside = [];\n\n        if (this.state.progress === 'plus') {\n            inside.push(\n                <button key={'plus'} onClick={() => {\n                    this.setState({progress: 'type'})\n                }}> + </button>\n            )\n        } else if (this.state.progress === 'type') {\n            let options = [];\n            Object.keys(EffectModel.Types).forEach(x=>{\n                x = EffectModel.Types[x];\n                options.push(<option key={x} value={x}>{x.toLowerCase()}</option>)\n            });\n            let select = (\n                <select key={\"effect_creator_type_input\"} id={\"effect_creator_type_input\"}>\n                    {options}\n                </select>\n            );\n            let next = (<button key={\"effect_creator_next\"} onClick={this.transitionToSpec.bind(this)}> next </button>)\n            let cancel = (<button key={\"effect_creator_cancel\"} onClick={()=>{this.setState({progress:'plus'})}}> cancel </button>)\n            inside.push([select, next, cancel]);\n        } else if (this.state.progress === 'spec') {\n            let widgets = [];\n            Object.keys(EffectModel.PropertySpec[this.state.type]).forEach(prop => {\n                let type = EffectModel.PropertySpec[this.state.type][prop];\n                let widget = getInput(prop, type);\n                widgets.push(\n                    <div key={prop}>\n                        <div>{prop}</div>\n                        {widget}\n                    </div>\n                )\n            });\n            inside.push(widgets)\n\n                inside.push(<button key={'create'} onClick={this.onClick.bind(this)}>create</button>)\n                inside.push(<button key={\"effect_creator_cancel\"} onClick={()=>{this.setState({progress:'plus'})}}> cancel </button>)\n\n            } else {\n            console.warn('something bad has happened');\n            inside.push(\n                <button onClick={() => {\n                    this.setState({progress: 'type'})\n                }}> + </button>\n            )\n        }\n\n        return (\n            <div ref={this.ref} className={'EffectCreator'}>\n                <div><div>New Effect</div></div>\n                {inside}\n            </div>\n        );\n    }\n\n    onClick() {\n        let obj = {}\n        Object.keys(EffectModel.PropertySpec[this.state.type]).forEach(prop=>{\n            let val = this.ref.current.querySelector('#' + prop).value;\n            let type = EffectModel.PropertySpec[this.state.type][prop];\n            let parsed = parseValue(val,type);\n            obj[prop] = parsed\n        })\n        if(this.props.onCreate){\n            this.props.onCreate(this.state.type, obj);\n        } else{\n            console.warn('onCreate not defineed for effect creator')\n        }\n        this.setState({progress:'plus'});\n    }\n}\n\nexport default EffectCreator;","import React, {Component} from 'react';\nimport CodeEditor from \"../../CodeEditor\";\nimport Effect from \"../../../containers/Effect\";\nimport EffectComponent from \"../../Effect\";\nimport Model from \"../../../model\";\nimport EffectCreator from \"../../Effect/EffectCreator\";\n\nclass LanguageControls extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {};\n    }\n\n    changeTempo(id, effect) {\n        let val = this.props\n        val.properties.tempo = effect.properties.value;\n        this.props.globalActions.masterUpdate(Model.Languages.TidalCycles, val);\n    }\n\n\n    getLanguageSpecific() {\n        switch (this.props.language) {\n            case Model.Languages.TidalCycles:\n                let e = {\n                    language: \"TidalCycles\", on: true,\n                    properties: {\n                        code: 'Tempo',\n                        max: 300,\n                        min: 0,\n                        operator: \"\",\n                        scale: \"linear\",\n                        step: 0.01,\n                        value: this.props.properties.tempo\n                    },\n                    globalActions:{effectUpdate:this.changeTempo.bind(this)},\n                    noToggle: true,\n                    key: 'tempo',\n                    type:\"SLIDER\",\n                    updateEffect: this.changeTempo.bind(this),\n                }\n\n                return [\n                    <CodeEditor\n                        key={'tidalEditorMain'}\n                        onChange={(macros) => {\n                            this.props.globalActions.masterUpdate(this.props.language, {macros});\n                        }}\n                        onChangeLive={(bootScriptLive) => {\n                            this.setState({bootScriptLive})\n                        }}\n                        code={this.props.macros}\n                        live={false}\n                    />,\n                    <EffectComponent {...e}/>\n                ]\n            case Model.Languages.Hydra:\n                return [\n                    <CodeEditor\n                        key={'HydraEditorMain'}\n                        onChange={(macros) => {\n                            this.props.globalActions.masterUpdate(this.props.language, {macros});\n                        }}\n                        onChangeLive={(bootScriptLive) => {\n                            this.setState({bootScriptLive})\n                        }}\n                        code={this.props.macros}\n                        live={false}\n                    />\n                ]\n            default:\n                console.warn('unrecognized language: ' + this.props.language)\n                return null;\n        }\n    }\n\n    newEffect(type, properties){\n        this.props.globalActions.masterAddEffect(type, this.props.language,false,properties);\n    }\n\n    updateEffect(e) {\n        this.props.globalActions.updateMasterEffect(e);\n    }\n\n    effectIdToComponent(id) {\n        return <Effect key={id} id={id} updateEffect={this.updateEffect.bind(this)}/>\n    }\n\n    render() {\n        const effects = this.props.effects.map(this.effectIdToComponent.bind(this));\n        const languageSpecific = this.getLanguageSpecific();\n        return (\n            <div className=\"LanguageControls\">\n                {languageSpecific}\n                {effects}\n                <EffectCreator onCreate={this.newEffect.bind(this)}/>\n            </div>\n        );\n    }\n}\n\nexport default LanguageControls;\n","import React, {Component} from 'react'\nimport './index.css'\nimport LanguageControls from \"./LanguageControls\";\n\nexport default class MasterEditor extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            language:Object.keys(this.props.master)[0]\n        };\n    }\n\n    languageChange(e){\n        this.setState(Object.assign({},this.state,{language:e.target.value}))\n    }\n\n    render(){\n\n        const languageOpts = Object.keys(this.props.master).map(lang=>{return <option key={lang} value={lang}>{lang}</option>});\n        return (\n            <div className={'MasterEditor'} style={this.props.style}>\n\n                <select onChange={this.languageChange.bind(this)} value={this.state.language}>\n                    {languageOpts}\n                </select>\n\n                <LanguageControls\n                    {...this.props.master[this.state.language]}\n                    language={this.state.language}\n                    globalActions={this.props.globalActions}\n                />\n            </div>\n        )\n    }\n\n    toggle(e){\n        this.props.globalActions.toggleLive(e.target.checked)\n    }\n}\n","import React, {Component} from 'react'\nimport './index.css'\nimport {Button} from \"@material-ui/core\";\nimport Effect from \"../../containers/Effect\";\nimport debounce from 'lodash/debounce'\nimport CodeEditor from \"../CodeEditor\";\nimport Model from \"../../model\";\nimport EffectCreator from \"../Effect/EffectCreator\";\n\n\nexport default class StemEditor extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {code: this.props.code};\n        this.updateCode = debounce(this._updateCode, 1000);\n        this.textAreaRef = React.createRef();\n    }\n\n    effectIdToComponent(id) {\n        return <Effect key={id} id={id}/>\n    }\n\n    render() {\n        let effects = this.props.effects.map(this.effectIdToComponent.bind(this))\n\n        return (\n            <div className={'StemEditor'} style={this.props.style}>\n                Name:\n                <input\n                    style={{backgroundColor: 'var(--stem-off)'}}\n                    onChange={this.updateName.bind(this)}\n                    type='text'\n                    value={this.props.name}\n                />\n\n                <select\n                    value={this.props.language}\n                    onChange={this.handleLanguageChange.bind(this)}\n                    name='language'\n                >\n                    {Object.keys(Model.Languages).map(x => <option key={x} value={x}>{x}</option>)}\n                </select>\n\n                <CodeEditor\n                    onChange={(code) => this.props.globalActions.stemUpdate(this.props.id, {code})}\n                    onChangeLive={(live) => this.props.globalActions.stemUpdate(this.props.id, {live})}\n                    code={this.props.code}\n                    live={this.props.live}\n                />\n                <div>\n                    {effects}\n\n                    <EffectCreator onCreate={this.createEffect.bind(this)}/>\n                    {/*<PlusButton style={{maxWidth: '60px', maxHeight: '30px', marginLeft: '10px'}}*/}\n                    {/*            onClick={this.newEffect.bind(this)}/>*/}\n                </div>\n                <Button style={{marginTop: '5px'}} onClick={this.delete.bind(this)} color='primary'\n                        variant='outlined'>delete</Button>\n            </div>\n        )\n    }\n\n    createEffect(type, properties) {\n        this.props.globalActions.stemAddEffect(this.props.id,type,this.props.language,false,properties);\n    }\n\n    handleLanguageChange(e) {\n        this.props.globalActions.stemUpdateLanguage(this.props.id, e.target.value);\n    }\n\n    maybeEval(e) {\n        if (e.shiftKey) {\n            if (e.key === 'Enter') {\n                e.preventDefault();\n                this.props.globalActions.stemUpdate(this.props.id, {code: this.state.code});\n                this.textAreaRef.current.classList.add('flash');\n                setTimeout(() => {\n                    this.textAreaRef.current.classList.remove('flash')\n                }, 250);\n            }\n        }\n    }\n\n    delete() {\n        this.props.globalActions.trackDeleteStem(this.props.trackId, this.props.id)\n    }\n\n\n    updateEffect(newEffect) {\n        let newEffects = this.props.effects.map(x => {\n            if (x.id === newEffect.id) {\n                return Object.assign(x, newEffect, {});\n            }\n            return x\n        });\n        this.props.globalActions.stemUpdate(this.props.id, {effects: newEffects})\n    }\n\n    updateName(e) {\n        this.props.globalActions.stemUpdate(this.props.id, {name: e.target.value})\n    }\n\n    _updateCode(e) {\n        this.props.globalActions.stemUpdate(this.props.id, {code: e.target.value})\n    }\n\n}\n","import React, {Component} from 'react';\nimport './index.css'\nimport MasterEditor from '../MasterEditor'\nimport StemEditor from \"../StemEditor\";\n\nclass Tab extends Component {\n    render() {\n        return (\n            <div onClick={this.props.switchToTab} className={'Tab' + (this.props.selected ? '' : ' unselected')}>\n                <label>{this.props.label}</label>\n                {this.props.closeAble ?\n                    <svg onClick={this.props.closeTab} xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\"\n                         viewBox=\"0 0 18 18\">\n                        <path\n                            d=\"M14.53 4.53l-1.06-1.06L9 7.94 4.53 3.47 3.47 4.53 7.94 9l-4.47 4.47 1.06 1.06L9 10.06l4.47 4.47 1.06-1.06L10.06 9z\"/>\n                    </svg> : null}\n                {this.props.selected ? <div className='indicator'/> : null}\n            </div>\n        )\n    }\n}\n\nexport default class Flyout extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tab: 'master',\n            history: []\n        }\n    }\n\n    switchTab(tab) {\n        let opened = this.props.stems.map(x => x.id);\n        if (tab === 'master' || opened.includes(tab)) {\n            let history = this.state.history.concat([tab]);\n            this.setState({tab, history});\n        } else {\n            console.log('err tab not found')\n        }\n    }\n\n    closeTab(stemId) {\n\n        let tab, history;\n        if (this.state.history.length - 1) {\n            history = this.state.history.slice(0, -1);\n            history = history.filter(x => x !== stemId);\n            tab = history[history.length - 1] || 'master';\n        } else {\n            tab = 'master';\n            history = this.state.history;\n        }\n        this.setState({tab, history});\n        setTimeout(() => {\n            this.props.globalActions.stemUpdate(stemId, {open: false});\n            this.setState({tab, history});\n        }, 1);\n    }\n\n    render() {\n        let tabs = this.props.stems.map(x => {\n            let tab = (\n                <Tab\n                    switchToTab={() => {this.switchTab.bind(this)(x.id)}}\n                    label={x.name === '' ? '<untitled>' : x.name}\n                    key={x.id+\"_tab\"}\n                    id={x.id}\n                    selected={this.state.tab === x.id}\n                    closeAble={true}\n                    closeTab={() => {this.closeTab.bind(this)(x.id)}}\n                />);\n            let content = (<StemEditor\n                    style={{display: (this.state.tab === x.id ? 'block' : 'none')}}\n                    key={x.id+\"_editor\"}\n                    {...x}\n                    globalActions={this.props.globalActions}\n                />\n            );\n            return {tab, content}\n        });\n\n\n        return (\n            <div className='Flyout' style={this.props.style}>\n                <div className={'scrollbarHidden'}>\n                    <div className={'TabContainer'}>\n                        <Tab\n                            switchToTab={() => {\n                                this.switchTab.bind(this)('master')\n                            }}\n                            value={'master'}\n                            label='master'\n                            selected={this.state.tab === 'master'}\n                        />\n                        {tabs.map(x => x.tab)}\n                    </div>\n                </div>\n                <div className={'content'}>\n                    <MasterEditor\n                        {...this.props}\n                        value={'master'}\n                        style={{display: this.state.tab === 'master' ? 'block' : 'none'}}\n                    />\n                    {tabs.map(x => x.content)}\n                </div>\n\n            </div>\n        )\n    }\n}\n","import Flyout from '../components/Flyout'\nimport {connect} from 'react-redux';\nimport GlobalActions from \"../actions/GlobalActions\";\n// import {mapStateToProps} from \"./LaunchSpace\";\n\nconst mapStateToProps = state => {\n\n  let stems = Object.keys(state.stems).map(id=>{\n    return Object.assign({},state.stems[id], {id})\n  }).filter(x=>{return x.open});\n\n  return {\n    master:state.master,\n    connection:state.connection,\n    stems\n  }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        globalActions: GlobalActions(dispatch)\n    }\n};\n\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Flyout);\n","import React, {Component} from 'react';\nimport './index.css'\nimport CloseIcon from '@material-ui/icons/Close';\n\nclass Modal extends Component {\n    constructor(props) {\n        super(props);\n        this.ref = React.createRef();\n    }\n\n    componentDidMount() {\n        this.ref.current && this.ref.current.focus();\n    }\n\n    render() {\n        return (\n            <div ref={this.ref} className={'Modal'} onKeyUp={this.onKeyPress.bind(this)} tabIndex={2}>\n                <div className={'modalBody'}>\n                    <div className={'modalClose'} >\n                        <CloseIcon onClick={this.props.onClose}/>\n                    </div>\n                    <div className={'modalContent'}>\n                    {this.props.children}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    onKeyPress(e){\n        if (e.key.toLowerCase()==='escape'){\n            this.props.onClose();\n        }\n    }\n}\n\nexport default Modal;","import React, {Component} from 'react';\nimport {TextField} from \"@material-ui/core\";\nimport debounce from \"lodash/debounce\";\n\nclass ConnectionSettings extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            connection:{...this.props},\n        };\n        this.connect = debounce(()=>{\n            this.props.globalActions.connect(this.state.connection.url, this.state.connection.port)\n        },2000);\n    }\n\n\n    render() {\n        return (\n            <div className={'ConnectionSettings'}>\n                <div>\n                    <TextField\n                        style={{width:'50%',marginLeft:'5px'}}\n                        label=\"URL\"\n                        value={this.state.connection.url}\n                        onChange={(e)=>{\n                            let connection = this.state.connection;\n                            connection.url = e.target.value;\n                            this.setState({connection});\n                            this.connect();\n                        }}\n                        margin=\"normal\"\n                    />\n                    <TextField\n                        style={{width:'50%',marginLeft:'5px',maxWidth:'100px'}}\n                        label=\"Port\"\n                        type='number'\n                        value={this.state.connection.port}\n                        onChange={(e)=>{\n                            let connection = this.state.connection;\n                            connection.port = parseInt(e.target.value);\n                            this.setState({connection});\n                            this.connect();\n                        }}\n                        margin=\"normal\"\n                    />\n                    <button style={{width:'100%'}} onClick={this.connect}>reconnect</button>\n                    <button style={{width:'100%'}} onClick={this.props.globalActions.pushState}>push state to other clients</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ConnectionSettings;","import {connect} from 'react-redux';\nimport GlobalActions from \"../actions/GlobalActions\";\nimport ConnectionSettings from \"../components/ConnectionSettings\";\n\nconst mapStateToProps = (state,ownProps) => {\n  // important for ownProps.id to refer to id of this stem\n  return {...state.connection,...ownProps}\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        globalActions: GlobalActions(dispatch)\n    }\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(ConnectionSettings);\n","import React, {Component} from 'react';\nimport debounce from \"lodash/debounce\";\nimport './index.css'\n\nconst SettingsWidgetMap = {\n    '--bg-image': (props) => <input value={props.value} type='text'/>,\n    '--launchspace-bg-color': (props) => <input value={props.value} type=\"color\"/>,\n    '--border-radius': (props) => <input value={props.value} type=\"number\"/>,\n    '--stem-on': (props) => <input value={props.value} type=\"color\"/>,\n    '--stem-off': (props) => <input value={props.value} type=\"color\"/>,\n    '--stem-editor-color': (props) => <input value={props.value} type=\"color\"/>,\n    '--font-family': (props) => <input value={props.value} type=\"text\"/>,\n    '--font-color-dark': (props) => <input value={props.value} type=\"color\"/>,\n    '--font-color-light': (props) => <input value={props.value} type=\"color\"/>,\n    '--scrollbar-width': (props) => <input value={props.value} type=\"number\"/>,\n    '--track-border-color': (props) => <input value={props.value} type=\"color\"/>,\n    '--select-color': (props) => <input value={props.value} type=\"color\"/>,\n    '--settings-background-color': (props) => <input value={props.value} type=\"color\"/>,\n    '--settings-font-color': (props) => <input value={props.value} type=\"color\"/>,\n    '--midi-background-color': (props) => <input value={props.value} type=\"color\"/>\n}\n\n\nclass Settings extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            connection: {...this.props},\n        };\n        this.connect = debounce(() => {\n            this.props.globalActions.connect(this.state.connection.url, this.state.connection.port)\n        }, 2000);\n    }\n\n\n    render() {\n        let widgets = Object.keys(SettingsWidgetMap).map(x => {\n            let Widget = SettingsWidgetMap[x]\n            debugger\n            return (\n                <div key={x}>\n                    {x}\n                    <Widget value={this.props[x]}/>\n                </div>\n            )\n        });\n\n        return (\n            <div id={'Settings'}>\n                <div className={'Setting'}>\n                    <h1>Style</h1>\n                    <form>\n                        {widgets}\n                    </form>\n                </div>\n            </div>\n        )\n\n\n    }\n}\n\nexport default Settings;","import {connect} from 'react-redux';\nimport GlobalActions from \"../actions/GlobalActions\";\nimport Settings from \"../components/Settings\";\n\nconst mapStateToProps = (state,ownProps) => {\n  return {...state.settings,...ownProps}\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        globalActions: GlobalActions(dispatch)\n    }\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Settings);\n","import React, {Component} from 'react';\nimport './index.css'\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport SaveIcon from '@material-ui/icons/Save';\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\nimport OpenInBrowserIcon from '@material-ui/icons/OpenInBrowser';\nimport SignalCellularAltIcon from '@material-ui/icons/SignalCellularAlt';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport Modal from \"../Modal\";\nimport HelpIcon from '@material-ui/icons/Help';\nimport ConnectionSettings from \"../../containers/ConnectionSettings\";\nimport Settings from '../../containers/Settings'\n\nconst modalContent = {\n    'settings': <Settings/>,\n    'connections':(<ConnectionSettings/>),\n    'help': 'Welcome to DeadCode! Should probably fill out these docs soon...'\n};\n\n\nclass Header extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {modal:null};\n    }\n\n    render() {\n        let modal = this.getModal(this.state.modal);\n\n        return (\n            <div className={'Header'}>\n                <SettingsIcon onClick={this.openSettings.bind(this)}/>\n                <SaveIcon onClick={this.props.globalActions.save}/>\n                <OpenInBrowserIcon onClick={this.props.globalActions.load}/>\n                <SaveAltIcon onClick={this.props.globalActions.download}/>\n                <FolderIcon onClick={()=>{this.props.globalActions.open()}}/>\n                <SignalCellularAltIcon onClick={this.openConnections.bind(this)} style={{fill:this.props.connection.isConnected?'green':'red'}}/>\n                <HelpIcon onClick={this.openHelp.bind(this)}/>\n                {modal}\n            </div>\n        );\n    }\n\n    closeModal(){\n        this.setState({modal:false});\n    }\n\n    getModal(type){\n        const content = modalContent[type]\n        if(!content){\n            return null\n        }\n        return <Modal onClose={this.closeModal.bind(this)}>\n            {content}\n        </Modal>\n    }\n\n    openSettings(){\n        this.setState({modal:'settings'});\n    }\n\n    openConnections(){\n        this.setState({modal:'connections'});\n    }\n\n    openHelp(){\n        this.setState({modal:'help'});\n    }\n\n}\n\nexport default Header;","import {connect} from 'react-redux';\nimport GlobalActions from \"../actions/GlobalActions\";\nimport Header from \"../components/Header\";\n\nconst mapStateToProps = (state,ownProps) => {\n  // important for ownProps.id to refer to id of this stem\n  return {connection:state.connection,...ownProps}\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        globalActions: GlobalActions(dispatch)\n    }\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Header);\n","import React, {Component} from 'react'\nimport LaunchSpace from '../../containers/LaunchSpace.jsx';\nimport Flyout from '../../containers/Flyout.jsx';\nimport './index.css';\nimport Header from '../../containers/Header'\n\n// import ResizeDivider from \"../ResizeDivider\";\n\nexport default class App extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            divider: 70, //%\n            horizontalDivider: 75\n        }\n        this.appRef = React.createRef()\n    }\n\n    componentDidMount() {\n        this.props.globalActions.connect(window.location.hostname, this.props.connection.port);\n    }\n\n    render() {\n        return (\n            <div\n                onDragOver={(e) => {\n                    e.preventDefault()\n                }}\n                ref={this.appRef} className='App' tabIndex=\"0\" onKeyDown={this.macros.bind(this)}>\n                <Header/>\n                <div style={{height:'100%'}}>\n                    <LaunchSpace style={{width: this.state.divider + \"%\"}}/>\n                    <div id={\"rightPanel\"} style={{width: 100 - this.state.divider + \"%\"}}>\n                        <Flyout style={{height: this.state.horizontalDivider + \"%\"}}/>\n                        <iframe style={{height:(100-this.state.horizontalDivider) + \"%\",border:'1pt solid var(--stem-on)',borderBottom:'none',borderRight:'none'}} src={\"/render\"}/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    dividerResize(px) {\n        this.setState({divider: px * 100 / document.body.clientWidth})\n    }\n\n    dividerResizeRightPanel(px) {\n        this.setState({horizontalDivider: px * 100 / document.body.clientHeight})\n    }\n\n\n    macros(e) {\n        if (e.ctrlKey) {\n            if (e.key === 's') {\n                e.preventDefault();\n                this.props.globalActions.save();\n            } else if (e.key.toLowerCase() === \"l\") {\n                e.preventDefault();\n                if(e.shiftKey){\n                    this.props.globalActions.loadFromServer();\n                } else{\n                    this.props.globalActions.load();\n                }\n            } else if (e.key === \"d\") {\n                e.preventDefault();\n                this.props.globalActions.download();\n            } else if (e.key === 'o') {\n                e.preventDefault();\n                this.props.globalActions.open();\n            } else if (e.key === 'p'){\n                e.preventDefault();\n                this.props.globalActions.pushState();\n            }\n        }\n    }\n}","import App from '../components/App'\nimport {connect} from 'react-redux';\nimport GlobalActions from \"../actions/GlobalActions\";\n\nconst mapStateToProps = state => state;\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        globalActions: GlobalActions(dispatch)\n    }\n};\n\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(App);","import {connect} from 'react-redux';\nimport View from '../components/Render'\nimport GlobalActions from \"../actions/GlobalActions\";\n\nconst mapStateToProps = state => state\n\nconst mapDispatchToProps = dispatch => {\n    return {globalActions:GlobalActions(dispatch)}\n};\n\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(View);\n","import {render} from 'react-dom'\nimport {Provider} from 'react-redux'\nimport App from './containers/App';\nimport React from 'react';\nimport logger from 'redux-logger'\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport View from \"./containers/Render\";\nimport store from \"./store\";\nimport {addMiddleware} from 'redux-dynamic-middlewares'\n\naddMiddleware(logger);\n\n// export const store = createStore(DeadReducer, applyMiddleware(serverControl,logger));\n\n// const store = store\n\nrender(\n    (\n        <Router basename={process.env.PUBLIC_URL}>\n            <Provider store={store}>\n                <Route path=\"/\" exact component={App}/>\n                <Route path=\"/render\" exact component={View}/>\n            </Provider>\n        </Router>),\ndocument.getElementById('root')\n)","\nconst Id = {index:0};\n\n// function getMaxId(obj){\n//     let ids = [];\n//     for (let i in obj){\n//         if(i==='id'){\n//             ids.push(obj[i])\n//         } else if(typeof obj[i] === 'object'){\n//             ids.push(getMaxId(obj[i]))\n//         }\n//     }\n//     return Math.max(...ids)\n// }\n\nId.init =  function (state){\n    const effects = Math.max(...Object.keys(state.effects).map(parseFloat));\n    const tracks = Math.max(...Object.keys(state.tracks).map(parseFloat));\n    const stems = Math.max(...Object.keys(state.stems).map(parseFloat));\n    Id.index = Math.max(effects,tracks,stems)+1;\n    console.log('loaded id index: '+Id.index);\n}\n\n\nId.new = function() {\n    return (Id.index++)+'';\n};\n\nexport default Id","\nfunction getNew(language,properties){\n    return {\n        macros:'',\n        effects:[],\n        properties\n    }\n}\n\nconst MasterModel = {getNew};\n\n\n\nexport default MasterModel;\n","const settings = {\n    style: {\n        '--bg-image': 'radial-gradient(rgb(170,170,170), rgb(170,170,170));',\n        '--launchspace-bg-color': ' transparent;',\n        '--border-radius': ' 0px;',\n        '--stem-on': ' rgb(0,255,240);',\n        '--stem-off': ' rgba(230,230,230);',\n        '--stem-editor-color': ' rgba(200, 200, 200, 0.5);',\n        '--font-family': \"'Helventica', sans-serif;\",\n        '--font-color-dark': ' black;',\n        '--font-color-light': ' rgb(30, 30, 30);',\n        '--scrollbar-width': ' 0px;',\n        '--track-border-color': ' lightgrey;',\n        '--select-color': ' rgb(250,10,10);',\n        '--settings-background-color': 'rgb(50,50,50);',\n        '--settings-font-color': 'rgb(150,150,150);',\n        '--midi-background-color': 'rgba(100,100,100,0.600);'\n    }\n};\n\n\nexport default settings;\n","const midi = {top:0, left:0, rows: 0, columns: 0}\n\nexport default midi;","import TrackModel from \"./TrackModel\";\nimport MasterModel from \"./MasterModel\";\nimport Id from \"./Id\";\nimport EffectModel from \"./EffectModel\";\nimport StemModel from \"./StemModel\";\nimport settings from \"./Settings\";\nimport midi from './Midi'\n\n\nconst Model = {};\n\nModel.Languages = {\n    TidalCycles: \"TidalCycles\",\n    Hydra: \"Hydra\"\n};\n\nconst tracks = {};\nconst stems = {};\nconst effects = {};\n\nconst TidalCycles = MasterModel.getNew('TidalCycles',{tempo:120});\nfor(let i in EffectModel.util.defaultEffects['TidalCycles']()){\n  let effectId = Id.new();\n  effects[effectId] = EffectModel.util.defaultEffects['TidalCycles']()[i];\n  TidalCycles.effects.push(effectId);\n}\n\n\nconst Hydra = MasterModel.getNew('Hydra', {mixMethod:'blend'});\nfor(let i in EffectModel.util.defaultEffects['Hydra']()){\n  let effectId = Id.new();\n  effects[effectId] = EffectModel.util.defaultEffects['Hydra']()[i];\n  Hydra.effects.push(effectId);\n}\n\nconst master = {TidalCycles, Hydra}\n\nfor (let i = 0; i < 8; i++) {\n    let trackId = Id.new();\n    tracks[trackId] = TrackModel.getNew();\n    for (let j = 0; j < 8; j++) {\n        let stemId = Id.new();\n        stems[stemId] = StemModel.getNew();\n        EffectModel.util.defaultEffects['TidalCycles']().forEach(effect => {\n            let effectId = Id.new();\n            effects[effectId] = effect;\n            stems[stemId].effects.push(effectId);\n        });\n        tracks[trackId].stems.push(stemId);\n    }\n    let mainEffectId = Id.new();\n    effects[mainEffectId] = EffectModel.getNew(EffectModel.Types.SLIDER, \"TidalCycles\", true, {\n        code: 'gain',\n        value: 1,\n        operator: \"|*\",\n        min: 0,\n        max: 2,\n        step: 0.01,\n        scale: 'linear'\n    });\n    tracks[trackId].effects.push(mainEffectId);\n}\n\n\n\n\nModel.defaultState = {\n    connection: {\n        isConnected: false,\n        url:'',\n        port: 8001\n    },\n    master,\n    copy: null,\n    tracks,\n    stems,\n    effects,\n    midi,\n    settings\n}\n\nexport default Model\n\n\n/*\n// model structure:\nvar a = {\n    'connection': {},\n    'copy': null,\n    'master': {\n        'TidalCycles': {},\n        'Hydra': {}\n    },\n    'tracks': {\n        'track_1': {\n            'name': \"new track\",\n            'stems': ['stem_1', 'stem_2'],\n            'effects': ['effect_1']\n        }\n    },\n    'stems': {\n        'stem_1': {\n            name: '',\n            on: false,\n            selected: false,\n            open: false,\n            live: false,\n            language: 'TidalCycles',\n            code: '',\n            effects: ['effect_1', 'effect_2']\n        }\n    },\n    'effects': {\n        'effect_1': {\n            name: '',\n            on: false,\n            type: EffectModel.Types.SLIDER,\n            language: 'TidalCycles',\n            properties: {}\n        }\n    }\n}\n*/","import EffectModel from \"./EffectModel\";\n\n\nfunction clone (stem){\n    return {\n        ...stem,\n        effects:[...stem.effects].map(EffectModel.clone),\n    }\n}\n\nfunction getNew(language = \"TidalCycles\"){\n    return {\n        name:'',\n        on: false,\n        selected:false,\n        open:false,\n        live:false,\n        language,\n        code:\"\",\n        effects: []\n    }\n};\n\nconst StemModel = {\n    getNew,\n    clone\n}\n\nexport default StemModel\n","import React from \"react\";\n// import \"./index.css\";\nimport EffectModel from \"../../model/EffectModel\";\nimport Model from \"../../model\";\nexport const Hydra = {\n    language:'Hydra',\n    getCode,\n    getMacros\n    // getAudienceDom,\n};\n\n\nfunction getMacros(state) {\n    return state.master['Hydra'].macros\n}\n\n\n\nfunction getCode(state){\n    let mixMethod = state.master.Hydra.properties.mixMethod;\n\n    let tracks = Object.keys(state.tracks).map(x=>{return trackToCode(state, state.tracks[x],mixMethod)}).filter(x=>x);\n\n    let code;\n    if(tracks.length>0){\n        code = tracks[0];\n    }\n    for(let i = 1; i<tracks.length; i++){\n        code += `.${state.master.Hydra.properties.mixMethod}(${tracks[i]},${1/tracks.length})`;\n    }\n\n    let effects = state.master.Hydra.effects.map(x=>{return state.effects[x]}).filter(e=>e.on).map(effectToCode);\n\n    if(!code){\n        code = 'solid(0,0,0,0)';\n    }\n    return code + effects.join(\"\")+\".out()\";\n}\n\nfunction trackToCode(state, track){\n    let code;\n    let stems = track.stems.map(x=>{return state.stems[x]}).filter(x=>{return x.on && x.code!=='' && x.language===Model.Languages.Hydra}).map(x=>stemToCode(state,x));\n    stems.join(state.master.Hydra.properties.mixMethod+\"(\"+1/stems.length+\"\")\n\n    if(stems.length>0){\n        code = stems[0];\n    } else {\n        return null;\n    }\n\n    for(let i = 1; i<stems.length; i++){\n        code += `.${state.master.Hydra.properties.mixMethod}(${stems[i]},${1/stems.length})`;\n    }\n\n    let effects = track.effects.map(x=>{return state.effects[x]}).filter(e=>e.on).map(effectToCode);\n\n    return code + effects.join(\"\");\n}\n\nfunction stemToCode(state, stem){\n    let effects = stem.effects.map(x=>{return state.effects[x]}).filter(e=>e.on).map(effectToCode);\n    return stem.code + effects.join(\"\");\n}\n\n\n\nfunction effectToCode(effect){\n    switch (effect.type) {\n        case EffectModel.Types.CODE_TOGGLE:\n            return effect.properties.code;\n        case EffectModel.Types.SLIDER:\n            // TODO make this cleaner\n            if(effect.properties.code==='gain'){\n                return `.blend(solid(0,0,0,0),${1-effect.properties.value/2})`;\n            }\n            return  `.${effect.properties.code}(${effect.properties.value})`;\n        default:\n            debugger\n            console.warn(\"Hydra renderer not implemented for type \" + effect.type);\n    }\n}\n\n\n\n\n\n// function getAudienceDom(state){\n//     return <div className={'code'}>{Hydra.getCode(state,\"blend\")}</div>\n// }\n\n// function getCode(fullState, mixMethod){\n//     let tracksCode = [];\n//     for(let i in fullState.tracks){\n//         let track = fullState.tracks[i];\n//         let code = trackToCode(track, mixMethod);\n//         if(code){\n//             tracksCode.push([code,track.gainEffect.properties.value]);\n//         }\n//     }\n//\n//     Object.keys(fullState.tracks);\n//\n//     let code = 'solid(0,0,0,0)';\n//\n//     // [['osc()', 0.5],['noise()',0.7]]\n//\n//     // 'osc().blend(noise(),'\n//\n//\n//     for (let i = 0;i<tracksCode.length;i++){\n//         let trackCode = tracksCode[i][0];\n//         let blendAmt = tracksCode[i][1];\n//         code = `${code}.${mixMethod}(${trackCode},${blendAmt})`;\n//         // code = `${code}.${mixMethod}(${trackCode}, ${blendAmt})`\n//     }\n//\n//     code = code+\".out()\";\n//     return code;\n// }\n\n\nconst effectToCodeFuncs  = {}\neffectToCodeFuncs[EffectModel.Types.SLIDER] = function(effect){\n    return `.${effect.name}(${effect.properties.value})`\n}\n//\n// function effectToCode(effect){\n//     return effectToCodeFuncs[effect.type](effect);\n// }\n\n// function trackToCode(track,mixMethod){\n//\n//     let stemsCode = [];\n//     for(let i in track.stems){\n//         let x = track.stems[i];\n//         if(x.on && x.language==='Hydra' && x.code !==''){\n//             stemsCode.push(stemToCode(x));\n//         }\n//     }\n//\n//\n//     if(stemsCode.length<1){\n//         return null\n//     };\n//\n//     let code = stemsCode[0];\n//     for (let i = 1;i<stemsCode.length;i++){\n//         code = `${code}.${mixMethod}(${stemsCode[i]})`\n//     }\n//     // const trackGain =\n//     return code;\n// }\n//\n// function stemToCode(stem){\n//     const effects = stem.effects.filter(x=>x.on).map(effectToCode).join(\"\");\n//\n//     return stem.code+effects;\n// }","import React from \"react\";\n// import './index.css';\nimport Model from \"../../model\";\nimport EffectModel from \"../../model/EffectModel\";\n\nexport const TidalCycles = {\n    language: 'TidalCycles',\n    getCode,\n    trackToCode,\n    getTempoCode,\n    // getAudienceDom\n}\n\n// function getAudienceDom(state){\n//\n//     let masterEffects = state.masterEffects.map(effectToCode).join(\" $ \");\n//     masterEffects= masterEffects + (state.masterEffects.length?\" $ \":\"\");\n//\n//     let stack = <span>{`d1 ${masterEffects} stack [`}</span>\n//     let stems = state.tracks.map(t=>t.stems).flat().filter(x=>{return x.on && x.language==='TidalCycles'}).map(stem=>{\n//         return [\n//             <div key={stem.id} className={'indented'}>{stemToCode(stem)}</div>,\n//             (<div key={stem.id+\"_c\"} style={{display:'inline-block'}}>{','}</div>)\n//         ]\n//     });\n//\n//     stems = stems.flat();\n//     stems = stems.slice(0,-1);\n//\n//     return (\n//         <div>\n//             {stack}\n//             {stems}\n//             ]\n//         </div>\n//     )\n// }\n\n// function getAudienceDom(state){\n//     // let effects = state.masterEffects.filter(effect=>effect.on).map(effectToDom).filter(x=>{return x!=null});\n//     let tracks = [];\n//     for(let i in state.tracks){\n//         let trackDom = trackToDom((state.tracks[i]));\n//         if(trackDom){\n//             tracks.push(trackDom);\n//             tracks.push(\",\");\n//         }\n//     }\n//     tracks = tracks.slice(0,-1);\n//\n//     let effects = state.master[Model.Languages.TidalCycles].effects.filter(effect=>effect.on).map(effectToDom).filter(x=>x);\n//     effects = effects.map(x=>{return [x,\" . \"]}).flat().slice(0,-1);\n//\n//\n//     return (\n//         <div className={'code TidalCycles'}>\n//\n//             d1 $ {effects} {effects.length?\"$\":\"\"} stack [\n//             {tracks}\n//             ]\n//\n//         </div>\n//     )\n//\n// }\n//\n// function trackToDom(track){\n//     let stems = [];\n//     for(let i in track.stems){\n//         let stem = track.stems[i];\n//         if(stem.on && stem.language === 'TidalCycles'){\n//             let code = stemToCode(stem);\n//             if(code){\n//                 stems.push(code);\n//             }\n//         }\n//     }\n//\n//     if(!stems.length){\n//         return null;\n//     }\n//     stems = stems.map(x=>[x,\",\"]).flat().slice(0,-1);\n//     let trackGain = `(|* gain ${track.gainEffect.properties.value*2})`;\n//     return (\n//         <div key={track.id} className=\"trackCode\">\n//\n//             {trackGain} {\" $ \"}\n//             stack [\n//             {stems}\n//             ]\n//         </div>\n//     )\n// }\n\n// function stemToDom(stem){\n//     const code = stemToCode(stem);\n//     if(code==='' || code ==='silence'){\n//         return null;\n//     }\n//\n//     let effects = stem.effects.filter(effect=>effect.on).map(effectToDom).filter(x=>x);\n//     effects = effects.map(x=>{return [x,\" . \"]}).flat().slice(0,-1);\n//     return (\n//         <div key={stem.id} className=\"stemCode\">\n//             {effects} {code}\n//         </div>\n//     )\n//\n// }\n\n// function effectToDom(effect){\n//     if (!effect.on) {return null}\n//     let code = effectToCode(effect);\n//     return (\n//         <div className={'effectCode'}>{code}</div>\n//     )\n// }\n\nfunction getTempoCode(state){\n    return 'setcps ' + state.master.TidalCycles.properties.tempo/60/2;\n}\n\nconst EffectsToCode = {};\nEffectsToCode[EffectModel.Types.SLIDER] = (x)=>{\n    return `(${x.properties.operator} ${x.properties.code} ${x.properties.value})`\n}\nEffectsToCode[EffectModel.Types.CODE_TOGGLE] = (x)=>{\n    return `(${x.properties.code})`\n}\n\n\nfunction effectToCode(x){\n    return EffectsToCode[x.type](x)\n}\n\nfunction stemToCode(state, stem){\n    if(stem.code==='') {return null}\n    let effectsOn = [];\n    stem.effects.forEach(e=>{\n        let effect = state.effects[e];\n        if(effect.on){\n            effectsOn.push(effectToCode(effect));\n        }\n    });\n    let code = effectsOn.join(\" $ \");\n    code += effectsOn.length?' $ ':'';\n    code += stem.code;\n    return code\n}\n\nfunction trackToCode(state, track){\n    let stemsCode = [];\n    track.stems.forEach(x=> {\n        let stem = state.stems[x];\n        if (stem.on && stem.code!=='' && stem.language === 'TidalCycles') {\n            stemsCode.push(stemToCode(state, stem))\n        }\n    });\n    if (stemsCode.length<1){return ''};\n\n    stemsCode = stemsCode.join(\", \");\n\n    let effectsOn = [];\n    track.effects.forEach(e=>{\n        let effect = state.effects[e];\n        if(effect.on){\n            effectsOn.push(effectToCode(effect));\n        }\n    });\n    let effectsCode = effectsOn.join(\" $ \");\n    return `${effectsCode} $ stack [${stemsCode}]`;\n}\n\nfunction getCode(state){\n    let stems = 'stack [';\n\n    let tracks = Object.keys(state.tracks).map(x=>{return trackToCode(state, state.tracks[x])});\n\n    stems += tracks.filter(x=>x!=='').join(\", \")+']';\n\n    let masterEffects = [];\n    state.master[Model.Languages.TidalCycles].effects.forEach(x=> {\n        let effect = state.effects[x];\n        if(effect.on){\n            masterEffects.push(effectToCode(effect));\n        }\n    })\n    let masterEffectsCode = masterEffects.join(\" $ \");\n\n    let code = `d1 $ ${masterEffectsCode}${masterEffects.length?' $ ':''}${stems}`;\n    return code;\n}","import {Hydra} from \"./Hydra/Hydra\"\nimport {TidalCycles} from \"./TidalCycles\";\n\nexport const Renderers = {\n    Hydra,\n    TidalCycles\n}","import EffectModel from \"./EffectModel\";\nimport StemModel from \"./StemModel\";\n\n\nfunction getNew() {\n    return {\n        name: 'New Track',\n        stems:[],\n        effects:[]\n    }\n}\n\n\nfunction clone(track) {\n    return {\n        ...track,\n        stems: track.stems.map(x => {\n            return StemModel.clone(x)\n        }),\n        effects: track.effects.map(EffectModel.clone)\n    }\n}\n\nconst TrackModel = {\n    getNew,\n    clone\n}\n\nexport default TrackModel\n","import React, {Component} from 'react';\nimport {Renderers} from \"../../renderers\";\nimport Hydra from \"hydra-synth\";\nimport './index.css'\nclass Render extends Component {\n\n    constructor(props) {\n        super(props);\n        this.hydraRef = React.createRef();\n        this.hydraCode = Renderers.Hydra.getCode(this.props);\n        this.hydraMacros = Renderers.Hydra.getMacros(this.props);\n        // this.tidalCode = Renderers.TidalCycles.getCode();\n    }\n\n    componentDidMount() {\n        this.props.globalActions.connect(window.location.hostname, this.props.connection.port);\n\n        try{\n            window.hydra = new Hydra({canvas: this.hydraRef.current});\n        } catch (e){\n            console.warn('Unable to start hydra');\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        let hydraCode = Renderers.Hydra.getCode(this.props);\n        let hydraMacros = Renderers.Hydra.getMacros(this.props);\n        console.log(\"????\")\n        if(hydraMacros !== this.hydraMacros){\n            try {\n                eval(hydraMacros);\n            } catch(e){\n                console.warn('Hydra Error',e);\n            }\n            this.hydraMacros = hydraMacros;\n        }\n\n        if(hydraCode !== this.hydraCode){\n            try {\n                eval(hydraCode);\n            } catch(e){\n                console.warn('Hydra Error',e);\n            }\n            this.hydraCode = hydraCode;\n        }\n\n    }\n\n    render() {\n        console.log(\"????\")\n\n        // if(this.props.connection.isConnected){\n        //     console.log(this.tidalCycles.tempo, this.props.master.TidalCycles.properties.tempo);\n        //     if(this.tidalCycles.tempo !== this.props.master.TidalCycles.properties.tempo){\n        //         Connection.sendCode(Renderers.TidalCycles.getTempoCode(this.props));\n        //         this.tidalCycles.tempo = this.props.master.TidalCycles.properties.tempo;\n        //         console.log('TidalCycles tempo: '+this.tidalCycles.tempo);\n        //     }\n        //     if(this.tidalCycles.macros !== this.props.master.TidalCycles.macros){\n        //         Connection.sendCode(this.props.master.TidalCycles.macros);\n        //         this.tidalCycles.macros = this.props.master.TidalCycles.macros;\n        //     }\n        //     const tidalCode = Renderers.TidalCycles.getCode(this.props);\n        //     if(this.tidalCycles.code!==tidalCode){\n        //         console.log('tidal:', tidal);\n        //         Connection.sendCode(tidal);\n        //         this.tidalCycles.code = tidalCode;\n        //     }\n        // }\n\n\n\n        return (\n            <div className={'Render'}>\n                <canvas ref={this.hydraRef}/>\n            </div>\n        )\n    }\n}\n\nexport default Render;"],"sourceRoot":""}