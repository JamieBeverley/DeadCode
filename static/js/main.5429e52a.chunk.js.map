{"version":3,"sources":["model/EffectModel.js","actions/index.js","actions/GlobalActions.js","model/Id.js","reducers/Track.js","reducers/Connection.js","reducers/Master.js","reducers/Stem.js","reducers/Effect.js","reducers/MIDI.js","reducers/Settings.js","reducers/index.js","store.js","middleware/index.js","model/MasterModel.js","model/Settings.js","model/Midi.js","model/index.js","components/util/Toggle/index.jsx","model/StemModel.js","containers/Effect.jsx","components/CodeEditor/index.jsx","components/util/CodeWriter/index.jsx","Connection.js","renderers/Hydra/index.js","renderers/index.js","model/TrackModel.js","components/Effect/EffectCreator/index.jsx","renderers/TidalCycles/index.js","components/Effect/Slider/index.jsx","components/Effect/CodeToggle/index.jsx","components/util/TemplateInput/index.jsx","components/Effect/CodeSlider/index.jsx","components/Effect/index.jsx","components/StemEditor/index.jsx","components/Render/index.jsx","renderers/TidalCycles/dom.jsx","renderers/Hydra/dom.jsx","components/Stem/index.jsx","containers/Stem.jsx","components/util/PlusButton/PlusButton.jsx","components/Track/index.jsx","containers/Track.jsx","components/LaunchSpace/index.jsx","containers/LaunchSpace.jsx","components/MasterEditor/LanguageControls/index.jsx","components/MasterEditor/index.jsx","components/Flyout/index.jsx","containers/Flyout.jsx","components/Modal/index.jsx","components/ConnectionSettings/index.jsx","containers/ConnectionSettings.jsx","components/util/TextColorPicker/index.js","components/Settings/index.jsx","containers/Settings.jsx","components/Header/index.jsx","containers/Header.jsx","components/App/index.jsx","containers/App.jsx","containers/Render.jsx","index.js"],"names":["EffectModel","getNew","type","language","on","properties","clone","effect","propertes","Types","CODE_TOGGLE","SLIDER","PropertySpec","code","value","operator","min","max","step","scale","CODE_SLIDER","indices","util","defaultEffects","ActionSpec","name","propogateToServer","ActionTypes","Actions","action","meta","fromServer","capitalSnake","s","split","map","x","slice","length","toLowerCase","join","camel","createAction","getPosition","state","stemId","track","Object","keys","tracks","findIndex","stems","includes","stem","GlobalActions","dispatch","pushState","providedState","store","getState","connection","undefined","receiveState","connect","url","port","actions","onClose","isConnected","onError","Connection","init","stemCopy","items","filter","selected","stemPaste","copy","console","log","pastePos","globalActions","anchorPos","diffPos","forEach","sId","cpPos","newPos","targetTrackId","trackAddStem","targetStemId","stemUpdate","save","window","localStorage","setItem","JSON","stringify","load","newState","getItem","parse","Id","warn","loadFromServer","sendAction","LOAD_FROM_SERVER","open","file","text","then","input","document","createElement","onchange","e","files","click","download","dataStr","encodeURIComponent","anchor","setAttribute","masterUpdate","masterAddEffect","effectId","new","stemUpdateLanguage","effects","stemDeleteEffect","stemAddEffect","trackUpdate","trackId","trackDeleteStem","find","StemModel","trackDeleteEffect","trackAddEffect","trackAdd","opt_language","TrackModel","trackDelete","effectUpdate","settingsUpdateStyle","styleElement","body","querySelector","append","innerHTML","key","index","Math","parseFloat","TrackReducer","payload","assign","newTrack","concat","obj","push","ConnectionReducer","MasterReducer","master","newLang","StemReducer","EffectReducer","MidiReducer","midi","SettingsReducer","settings","style","CopyReducer","Model","defaultState","createStore","RECEIVE_STATE","applyMiddleware","next","newAction","PUSH_STATE","dynamicMiddlewares","MasterModel","macros","top","left","rows","columns","TidalCycles","Hydra","tempo","i","mixMethod","j","mainEffectId","Toggle","this","props","onChange","onContextMenu","onClick","bind","className","Component","live","ownProps","id","Effect","CodeEditor","updateCode","debounce","flashTimeout","prevProps","prevState","snapshot","setState","onChangeLive","disabled","flash","onKeyPress","target","shiftKey","preventDefault","clearTimeout","setTimeout","CodeWriter","ref","React","createRef","current","innerText","interval","clearInterval","setInterval","substring","triggerResize","rate","componentDidUpdate","WebSocket","host","location","hostname","onOpen","onErr","ws","close","MozWebSocket","require","isOpen","onopen","onmessage","onMessage","onerror","onclose","data","event","message","send","Index","getCode","Languages","effectToCode","stemToCode","trackToCode","getMacros","Renderers","EffectCreator","creating","progress","inside","options","select","transitionToSpec","cancel","widgets","prop","widget","placeholder","getInput","parsed","parseInt","parseValue","onCreate","EffectsToCode","stemsCode","effectsOn","effectsCode","masterEffects","masterEffectsCode","getTempoCode","SliderEffect","sliderValue","toSliderScale","range","pow","round","isVertical","renderVertical","renderHorizontal","newValue","noToggle","toggle","Grid","container","spacing","alignItems","item","xs","fromSliderScale","handleSliderChange","margin","onInput","persist","handleInputChange","orientation","Input","inputProps","textAlign","CodeToggle","onToggle","AutosizeInput","width","spanRef","scrollWidth","color","backgroundColor","pointerEvents","position","TemplateInput","_onChange","textChange","str","right","component","StemEditor","_updateCode","textAreaRef","effectIdToComponent","updateName","handleLanguageChange","createEffect","marginTop","delete","variant","classList","add","remove","newEffect","newEffects","Render","hydraRef","hydraCode","hydraMacros","hydra","canvas","eval","height","TidalComponent","fontSize","isCorrectSize","justMinimized","throttle","leading","trailing","scrollHeight","clientHeight","childHeights","childNodes","lines","stemsDom","StemToDom","effectToDom","trackToDom","effectCode","HydraComponent","TrackToDom","trim","EffectToDom","Stem","holdTime","Date","dragToggle","timeout","touchMoveCount","openInFlyout","now","button","highlight","tabIndex","onKeyUp","onTouchStart","onMouseDown","onTouchEnd","onMouseUp","onTouchMove","ctrlKey","PlusButton","Track","row","stemToComponent","titleChange","padding","addStem","xmlns","fill","viewBox","d","updateEffect","gainEffect","LaunchSpace","trackIdToComponent","display","minWidth","y","flat","LanguageControls","val","changeTempo","bootScriptLive","updateMasterEffect","languageSpecific","getLanguageSpecific","MasterEditor","languageOpts","lang","languageChange","toggleLive","checked","Tab","switchToTab","label","closeAble","closeTab","Flyout","tab","history","opened","tabs","switchTab","content","Modal","focus","children","ConnectionSettings","TextField","marginLeft","maxWidth","TextColorPicker","SettingsWidgetMap","Settings","styleForm","Widget","updateStyleForm","updateStyle","modalContent","href","Header","modal","getModal","openSettings","openConnections","openHelp","closeModal","App","divider","horizontalDivider","appRef","onDragOver","onKeyDown","border","borderBottom","borderRight","src","px","clientWidth","View","addMiddleware","logger","render","basename","process","path","exact","getElementById"],"mappings":"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","file":"static/js/main.5429e52a.chunk.js","sourcesContent":["\nfunction getNew(type, language, on = false, properties) {\n    // TODO something to validate that properties object matches the type here\n    return {\n        type,\n        language,\n        on,\n        properties\n    }\n}\n\nfunction clone(effect) {\n    return {\n        ...effect,\n        propertes: {...effect.properties}\n    }\n}\n\nlet Types = {\n    CODE_TOGGLE: 'CODE_TOGGLE',\n    SLIDER: \"SLIDER\",\n    // CODE_SLIDER: 'CODE_SLIDER'\n}\n\nlet PropertySpec = {\n    'SLIDER': {\n        code: \"string\",\n        value: 'float',\n        operator: \"string\",\n        min: 'float',\n        max: 'float',\n        step: 'float',\n        scale: 'string' // 'linear' or 'log'\n    },\n    CODE_TOGGLE: {\n        code: 'string',\n    },\n    CODE_SLIDER: {\n        code: 'string',\n        indices: 'array',\n        value: 'float',\n        min: 'float',\n        max: 'float',\n        step: 'float',\n        scale: 'string'\n    }\n}\n\nconst defaultEffects = {\n    'TidalCycles': () => {\n        return [\n            // EffectModel.getNew(EffectModel.Types.CODE_SLIDER,'TidalCycles',false,{\n            //     code:'stut  0.5 0.66',\n            //     indices: [5],\n            //     value: 2,\n            //     min: 1,\n            //     max: 0,\n            //     step: 1,\n            //     scale: 'linear'\n            // }),\n            EffectModel.getNew(EffectModel.Types.SLIDER, \"TidalCycles\", true,\n                {\n                    code: \"gain\",\n                    value: 1,\n                    operator: \"|*\",\n                    min: 0,\n                    max: 2,\n                    step: 0.01,\n                    scale: 'linear'\n                }),\n            EffectModel.getNew(EffectModel.Types.SLIDER, \"TidalCycles\", false,\n                {\n                    code: \"lpf\",\n                    value: 22000,\n                    operator: \"#\",\n                    min: 0,\n                    max: 22000,\n                    step: 10,\n                    scale: 'log'\n                }),\n            EffectModel.getNew(EffectModel.Types.SLIDER, \"TidalCycles\", false,\n                {\n                    code: \"hpf\",\n                    value: 0,\n                    operator: \"#\",\n                    min: 0,\n                    max: 22000,\n                    step: 10,\n                    scale: 'log'\n                }),\n            EffectModel.getNew(EffectModel.Types.SLIDER, \"TidalCycles\", false,\n                {\n                    code: \"coarse\",\n                    value: 0,\n                    operator: \"#\",\n                    min: 0,\n                    max: 24,\n                    step: 1,\n                    scale: 'linear'\n                }),\n            EffectModel.getNew(EffectModel.Types.SLIDER, \"TidalCycles\", false,\n                {\n                    code: \"room\",\n                    value: 0,\n                    operator: \"#\",\n                    min: 0,\n                    max: 1,\n                    step: 0.01,\n                    scale: 'linear'\n                }),\n            EffectModel.getNew(EffectModel.Types.SLIDER, \"TidalCycles\", false,\n                {\n                    code: \"size\",\n                    value: 0,\n                    operator: \"#\",\n                    min: 0,\n                    max: 1,\n                    step: 0.01,\n                    scale: 'linear'\n                }),\n            EffectModel.getNew(EffectModel.Types.CODE_TOGGLE, 'TidalCycles', false, {\n                code: ''\n            })\n        ]\n    },\n    'Hydra': () => {\n        return [\n            EffectModel.getNew(EffectModel.Types.SLIDER, 'Hydra', false,\n                {\n                    code: \"kaleid\",\n                    value: 1,\n                    min: 0,\n                    max: 50,\n                    step: 1,\n                    scale: 'linear'\n                }),\n            EffectModel.getNew(EffectModel.Types.SLIDER, 'Hydra', false,\n                {\n                    code: \"pixelate\",\n                    value: 1,\n                    min: 0,\n                    max: 200,\n                    step: 1,\n                    scale: 'linear'\n                })\n        ]\n    }\n}\n\nconst util = {defaultEffects};\n\nconst EffectModel = {\n    getNew,\n    clone,\n    Types,\n    PropertySpec,\n    util\n}\n\nexport default EffectModel\n","import {createAction} from 'redux-actions'\n\n\nexport const ActionSpec = {\n    'MIDI_UPDATE':{\n        name:'MIDI_UPDATE',\n        propogateToServer:true\n    },\n    'PUSH_STATE':{\n        name: 'PUSH_STATE',\n        propogateToServer:true\n    },\n    'RECEIVE_STATE':{\n        name: 'RECEIVE_STATE',\n        propogateToServer:false\n    },\n    'CONNECT': {\n        name: 'CONNECT',\n        propogateToServer: false\n    },\n    'SAVE': {\n        name: 'SAVE',\n        propogateToServer: false\n    },\n    'LOAD': {\n        name: 'LOAD',\n        propogateToServer: false\n    },\n    'LOAD_FROM_SERVER': {\n        name: 'LOAD_FROM_SERVER',\n        propogateToServer: false\n    },\n    'DOWNLOAD': {\n        name: 'DOWNLOAD',\n        propogateToServer: false\n    },\n    'MASTER_UPDATE': {\n        name: 'MASTER_UPDATE',\n        propogateToServer: true\n    },\n    'MASTER_ADD_EFFECT': {\n        name: 'MASTER_ADD_EFFECT',\n        propogateToServer: true\n    },\n    'STEM_UPDATE': {\n        name: 'STEM_UPDATE',\n        propogateToServer: true\n    },\n    'STEM_DELETE_EFFECT': {\n        name: 'STEM_DELETE_EFFECT',\n        propogateToServer: true\n    },\n    'STEM_ADD_EFFECT': {\n        name: 'STEM_ADD_EFFECT',\n        propogateToServer: true\n    },\n    'STEM_COPY': {\n        name: 'STEM_COPY',\n        propogateToServer: true\n    },\n    'STEM_PASTE': {\n        name: 'STEM_PASTE',\n        propogateToServer: true\n    },\n    'TRACK_UPDATE': {\n        name: 'TRACK_UPDATE',\n        propogateToServer: true\n    },\n    'TRACK_DELETE_STEM': {\n        name: 'TRACK_DELETE_STEM',\n        propogateToServer: true\n    },\n    'TRACK_ADD_STEM': {\n        name: 'TRACK_ADD_STEM',\n        propogateToServer: true\n    },\n    'TRACK_DELETE_EFFECT': {\n        name: 'TRACK_DELETE_EFFECT',\n        propogateToServer: true\n    },\n    'TRACK_ADD_EFFECT': {\n        name: 'TRACK_ADD_EFFECT',\n        propogateToServer: true\n    },\n    'TRACK_ADD': {\n        name: 'TRACK_ADD',\n        propogateToServer: true\n    },\n    'TRACK_DELETE': {\n        name: 'TRACK_DELETE',\n        propogateToServer: true\n    },\n    'EFFECT_UPDATE': {\n        name: 'EFFECT_UPDATE',\n        propogateToServer: true\n    },\n    'SETTINGS_UPDATE_STYLE':{\n        name: 'SETTINGS_UPDATE_STYLE',\n        propogateToServer:false\n    }\n}\n\nfunction camel(capitalSnake) {\n    let s = capitalSnake.split(\"_\");\n    s = s.map(x => {\n        return x[0] + x.slice(1, x.length).toLowerCase();\n    });\n    s[0] = s[0].toLowerCase();\n    return s.join(\"\");\n}\n\nexport let ActionTypes = {};\nexport let Actions = {};\nfor (let action in ActionSpec) {\n    let meta = {propogateToServer: ActionSpec[action].propogateToServer, fromServer:false};\n    Actions[camel(action)] = createAction(action, x => x, () => meta);\n    ActionTypes[action] = action;\n}\n\n//\n// export const ActionTypes = [\n//     'CONNECT',\n//     'SAVE',\n//     'LOAD',\n//     'DOWNLOAD',\n//     'MASTER_UPDATE',\n//     'MASTER_ADD_EFFECT',\n//     'STEM_UPDATE',\n//     'STEM_DELETE_EFFECT',\n//     'STEM_ADD_EFFECT',\n//     'STEM_COPY',\n//     'STEM_PASTE',\n//     'TRACK_UPDATE',\n//     'TRACK_DELETE_STEM',\n//     'TRACK_ADD_STEM',\n//     'TRACK_DELETE_EFFECT',\n//     'TRACK_ADD_EFFECT',\n//     'TRACK_ADD',\n//     'TRACK_DELETE',\n//     'EFFECT_UPDATE'\n// ]\n\n// const obj = {};\n// ActionTypes.forEach(x => {\n//     obj[camel(x)] = createAction(x)\n// });\n// export const Actions = obj\n\n// // MASTER ACTIONS\n// Actions.CONNECT = function(url, port, isConnected){\n//     return {type:'CONNECT', url, port, isConnected}\n// };\n//\n// // copy's given stems. if no argument copy's selected stems\n// Actions.COPY_STEMS = function(opt_stems){\n//     let stems = opt_stems;\n//     if(!stems){\n//         let state = store.getState();\n//         stems = state.tracks.map(x=>x.stems).flat().filter(x=>x.selected);\n//     }\n//     return {type:\"COPY_STEMS\", stems};\n// };\n//\n// Actions.PASTE_STEMS = function(trackId, stemId){\n//     return {type:\"PASTE_STEMS\",trackId,stemId}\n// };\n//\n// Actions.ADD_TRACK = function(){\n//     return {type:'ADD_TRACK'}\n// };\n//\n// Actions.REMOVE_TRACK = function(trackId){\n//     return {type:'ADD_TRACK', trackId};\n// };\n//\n// Actions.ADD_STEM = function(trackId){\n//     return {type:'ADD_STEM',trackId};\n// };\n//\n// Actions.REMOVE_STEM = function(trackId, stemId){\n//     return {type:'REMOVE_STEM', trackId, stemId};\n// };\n//\n// Actions.UPDATE_STEM = function(id, value){\n//     return {type:'UPDATE_STEM', id, value}\n// };\n//\n// Actions.ADD_STEM_EFFECT = function(trackId, stemId, effectType){\n//     return {type:'ADD_STEM_EFFECT', trackId, stemId, effectType}\n// }\n//\n// Actions.UPDATE_TRACK = function(value){\n//     return {type:'UPDATE_TRACK', value}\n// };\n//\n// Actions.UPDATE_MASTER = function(language,value){\n//     return {type:'UPDATE_MASTER', language, value}\n// }\n//\n// Actions.UPDATE_MASTER_EFFECT = function(effect){\n//     return {type:'UPDATE_MASTER_EFFECT', effect}\n// }\n//\n// Actions.UPDATE_EFFECT = function (effectId, effect){\n//     return {type: \"UPDATE_EFFECT\", id:effectId, value:effect}\n// }\n//\n// // Saving / Loading\n// Actions.SAVE = function(){\n//     return {type:'SAVE'}\n// };\n//\n// Actions.LOAD = function(newState){\n//     return {type:'LOAD',newState}\n// };\n//\n// Actions.DOWNLOAD = function(){\n//     return {type:'DOWNLOAD'}\n// };\n//\n// ActionTypes = {};\n// Object.keys(Actions).forEach(x=>{\n//     ActionTypes[x] = x;\n// });\n//\n// export default Actions\n","import {Actions} from './index.js';\nimport store from '../store.js';\nimport Connection from \"../Connection\";\nimport Id from \"../model/Id\";\nimport EffectModel from \"../model/EffectModel\";\nimport StemModel from \"../model/StemModel\";\nimport TrackModel from \"../model/TrackModel\";\nimport {ActionSpec} from \"./index\";\n\nfunction getPosition(state, stemId) {\n    let track = Object.keys(state.tracks).findIndex(x => {\n        return state.tracks[x].stems.includes(stemId)\n    });\n    let stem = state.tracks[Object.keys(state.tracks)[track]].stems.findIndex(x => {\n        return x === stemId\n    });\n    return {track, stem}\n}\n\nconst GlobalActions = dispatch => {\n    return {\n        pushState: () => {\n            let providedState = {...store.getState(), connection: undefined};\n            dispatch(Actions.pushState(providedState));\n        },\n        receiveState: (state) => {\n            dispatch(Actions.receiveState(state));\n        },\n        connect: (url, port) => {\n            let actions = Actions\n            let onOpen = () => {\n                dispatch(Actions.connect({url, port, isConnected: true}))\n            };\n            let onClose = () => {\n                dispatch(actions.connect({url: url, port: port, isConnected: false}))\n            };\n            let onError = onClose;\n            Connection.init(url, port, onOpen, onClose, onError);\n        },\n        stemCopy: () => {\n            let state = store.getState();\n            let items = Object.keys(state.stems).filter(x => {\n                return state.stems[x].selected\n            });\n            dispatch(Actions.stemCopy({items}))\n        },\n        stemPaste: (stemId) => {\n            let state = store.getState();\n            if (!state.copy || state.copy.items.length < 1) {\n                console.log('nothing copied');\n                return\n            }\n            let pastePos = getPosition(state, stemId);\n            let globalActions = GlobalActions(dispatch)\n            let anchorPos = getPosition(state, state.copy.items[0]);\n            let diffPos = {track: pastePos.track - anchorPos.track, stem: pastePos.stem - anchorPos.stem};\n            state.copy.items.forEach(sId => {\n                let cpPos = getPosition(state, sId);\n\n                let newPos = {track: cpPos.track + diffPos.track, stem: cpPos.stem + diffPos.stem};\n\n                if (newPos.track >= Object.keys(state.tracks).length) {\n                    console.log('too long');\n                    return\n                }\n\n                let targetTrackId = Object.keys(state.tracks)[newPos.track];\n\n                while (newPos.stem >= state.tracks[targetTrackId].stems.length) {\n                    globalActions.trackAddStem(targetTrackId);\n                    state = store.getState();\n                }\n                let targetStemId = state.tracks[targetTrackId].stems[newPos.stem];\n                globalActions.stemUpdate(targetStemId, state.stems[sId]);\n            })\n        },\n        save: () => {\n            window.localStorage.setItem('state', JSON.stringify(store.getState()));\n            console.log('saved')\n        },\n        load: () => {\n            let newState = window.localStorage.getItem('state');\n            if (newState) {\n                newState = JSON.parse(newState);\n                Id.init(newState);\n                dispatch(Actions.load(newState));\n            } else {\n                console.warn('Tried to load state but empty');\n            }\n        },\n        loadFromServer: () => {\n            Connection.sendAction({\n                type: ActionSpec.LOAD_FROM_SERVER.name,\n                meta: {propogateToServer: true, fromServer: false}\n            });\n        },\n        open: (file) => {\n            if (!file) {\n                let input = document.createElement('input');\n                input.type = 'file';\n                input.onchange = (e) => {\n                    input.files[0].text().then(x => {\n                        let newState = JSON.parse(x);\n                        Id.init(newState);\n                        dispatch(Actions.load(newState));\n                    });\n                };\n                input.click();\n            } else {\n                file.text().then(x => {\n                    dispatch(Actions.load(JSON.parse(x)));\n                });\n            }\n        },\n        download: () => {\n            let dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(store.getState()));\n            let anchor = document.createElement('a');\n            anchor.setAttribute(\"href\", dataStr);\n            anchor.setAttribute(\"download\", \"dead_state.json\");\n            anchor.click();\n            dispatch(Actions.download());\n        },\n        masterUpdate: (language, value) => {\n            dispatch(Actions.masterUpdate({language, value}));\n        },\n        masterAddEffect: (type, language, on, properties) => {\n            let effectId = Id.new();\n            let value = EffectModel.getNew(type, language, on, properties);\n            dispatch(Actions.masterAddEffect({language, effectId, value}));\n        },\n        stemUpdate: (stemId, value) => {\n            dispatch(Actions.stemUpdate({stemId, value}));\n        },\n        // Separated to a different action so not every stemUpdate required importing the store and checking if\n        // language changed.\n        stemUpdateLanguage: (stemId, language) => {\n            let stem = store.getState().stems[stemId];\n            let globalActions = GlobalActions(dispatch);\n            if (stem.language !== language) {\n                stem.effects.forEach(x => {\n                    globalActions.stemDeleteEffect(stemId, x)\n                });\n                EffectModel.util.defaultEffects[language]().forEach(effect => {\n                    globalActions.stemAddEffect(stemId, effect.type, effect.language, effect.on, effect.properties);\n                });\n                globalActions.stemUpdate(stemId, {language: language});\n            }\n        },\n        stemDeleteEffect: (stemId, effectId) => {\n            dispatch(Actions.stemDeleteEffect({stemId, effectId}));\n        },\n        stemAddEffect: (stemId, type, language, on, properties) => {\n            let effectId = Id.new();\n            let value = EffectModel.getNew(type, language, on, properties);\n            dispatch(Actions.stemAddEffect({stemId, effectId, value}));\n        },\n        trackUpdate: (trackId, value) => {\n            dispatch(Actions.trackUpdate({trackId, value}));\n        },\n        trackDeleteStem: (trackId, stemId) => {\n            // if no trackId provided (not ideal), search for the track with the provided stemId\n            if (trackId === undefined) {\n                let state = store.getState();\n                trackId = Object.keys(state.tracks).find(x => {\n                    return state.tracks[x].stems.includes(stemId)\n                });\n            }\n            dispatch(Actions.trackDeleteStem({trackId, stemId}));\n        },\n        // TODO: stuff like this would probably be better as sagas\n        trackAddStem: (trackId, language = 'TidalCycles') => {\n\n            // create stem and assign to track\n            let stemId = Id.new();\n            let stem = StemModel.getNew(language);\n            dispatch(Actions.trackAddStem({trackId, stemId, value: stem}));\n\n            // create default effects for the new stem\n            EffectModel.util.defaultEffects[language]().forEach(effect => {\n                GlobalActions(dispatch).stemAddEffect(stemId, effect.type, effect.language, effect.on, effect.properties);\n            });\n        },\n        trackDeleteEffect: (trackId, effectId) => {\n            dispatch(Actions.trackDeleteEffect({trackId, effectId}));\n        },\n        trackAddEffect: (trackId) => {\n            let effectId = Id.new();\n            let value = EffectModel.getNew(EffectModel.Types.SLIDER, \"TidalCycles\", true,\n                {\n                    code: 'gain',\n                    value: 1,\n                    operator: \"|*\",\n                    min: 0,\n                    max: 2,\n                    step: 0.01,\n                    scale: 'linear'\n                });\n            dispatch(Actions.trackAddEffect({trackId, effectId, value}));\n        },\n        trackAdd: (opt_language) => {\n            let value = TrackModel.getNew(opt_language);\n            let trackId = Id.new();\n            dispatch(Actions.trackAdd({trackId, value}));\n            let globalActions = GlobalActions(dispatch);\n            [0, 0, 0, 0, 0].forEach(() => {\n                globalActions.trackAddStem(trackId)\n            });\n            globalActions.trackAddEffect(trackId,);\n        },\n        trackDelete: (trackId) => {\n            let state = store.getState();\n            let track = state.tracks[trackId];\n            let globalActions = GlobalActions(dispatch)\n            track.stems.forEach(s => {\n                globalActions.trackDeleteStem(trackId, s);\n            });\n            dispatch(Actions.trackDelete({trackId}));\n        },\n        effectUpdate: (effectId, value) => {\n            dispatch(Actions.effectUpdate({effectId, value}));\n        },\n        settingsUpdateStyle: (value) => {\n            let styleElement = document.body.querySelector('#style style');\n            if (styleElement === null) {\n                styleElement = document.createElement('style');\n                styleElement.setAttribute('id', 'style');\n                document.body.append(styleElement)\n            }\n            styleElement.innerHTML = `:root{${\n                Object.keys(value).map(key => {\n                    return `${key}: ${value[key]}`\n                }).join(\";\\n  \")\n            }}`;\n\n            dispatch(Actions.settingsUpdateStyle({value}))\n        }\n    }\n}\n\nexport default GlobalActions\n\n// const GlobalActions = dispatch=> {\n//     return {\n//         connect: (url,port)=>{\n//             let onOpen = ()=>{\n//                 dispatch(Actions.CONNECT(url,port,true));\n//             };\n//             let onClose = ()=>{dispatch(Actions.CONNECT(url,port,false))};\n//             let onError = onClose;\n//             Connection.init(url,port, onOpen, onClose, onError);\n//         },\n//         updateMaster:(language, value) =>{\n//             dispatch(Actions.UPDATE_MASTER(language, value));\n//         },\n//         updateMasterEffect:(effect) =>{\n//             dispatch(Actions.UPDATE_MASTER_EFFECT(effect));\n//         },\n//         copyStems:(x)=>{\n//             dispatch(Actions.COPY_STEMS(x))\n//         },\n//         pasteStems:(trackId, stemId)=>{\n//             dispatch(Actions.PASTE_STEMS(trackId, stemId));\n//             let state = store.getState();\n//             state.tracks.forEach(track=>{\n//                 track.stems.filter(x=>x.selected).forEach(stem=>{\n//                     dispatch(Actions.UPDATE_STEM(stem.trackId,stem.id,{selected:false}));\n//                 })\n//             })\n//         },\n//         addTrack: ()=>{\n//             dispatch(Actions.ADD_TRACK())\n//         },\n//         removeTrack: (trackId)=>{\n//             dispatch(Actions.REMOVE_TRACK(trackId))\n//         },\n//         addStem: (trackId)=>{\n//             dispatch(Actions.ADD_STEM(trackId))\n//             // renderState(store.getState());\n//         },\n//         removeStem: (trackId, stemId)=>{\n//             dispatch(Actions.REMOVE_STEM(trackId,stemId))\n//             // renderState(store.getState());\n//         },\n//         updateStem: (trackId, stemId, value)=>{\n//             dispatch(Actions.UPDATE_STEM(stemId, value));\n//         },\n//         openInFlyout: (trackId, stemId)=> {\n//             dispatch(Actions.OPEN_IN_FLYOUT(trackId,stemId))\n//         },\n//         updateTrack: (value)=>{\n//             dispatch(Actions.UPDATE_TRACK(value))\n//             // renderState(store.getState());\n//         },\n//         addStemEffect:(trackId, stemId,type)=>{\n//             dispatch(Actions.ADD_STEM_EFFECT(trackId, stemId,type))\n//         },\n//         // toggleLive: (value)=>{\n//         //     dispatch(Actions.TOGGLE_LIVE(value))\n//         // },\n//         save:()=>{\n//             window.localStorage.setItem('state', JSON.stringify(store.getState()));\n//             console.log('saved')\n//         },\n//         load: ()=>{\n//             let newState = window.localStorage.getItem('state');\n//             if(newState){\n//                 newState = JSON.parse(newState);\n//                 Id.init(newState);\n//                 newState.tracks.forEach(track=>{\n//                     track.stems.forEach(stem=>{\n//                         stem.trackId = track.id\n//                     });\n//                 });\n//                 dispatch(Actions.LOAD(Model.defaultState));\n//                 dispatch(Actions.LOAD(newState));\n//                 // renderTempoChange(store.getState());\n//                 // renderBootScript(store.getState());\n//             } else {\n//                 console.warn('Tried to load state but empty')\n//             }\n//         },\n//         download: ()=>{\n//             let dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(store.getState()));\n//             let anchor = document.createElement('a')\n//             anchor.setAttribute(\"href\", dataStr);\n//             anchor.setAttribute(\"download\", \"dead_state.json\");\n//             anchor.click();\n//             dispatch(Actions.DOWNLOAD());\n//         },\n//         openFile: (file)=>{\n//             if(!file){\n//                 let input = document.createElement('input');\n//                 input.type = 'file';\n//                 input.onchange = (e)=>{\n//                     input.files[0].text().then(x=>{\n//                         dispatch(Actions.LOAD(JSON.parse(x)));\n//                     });\n//                 };\n//                 input.click();\n//             } else {\n//                 file.text().then(x=>{\n//                     dispatch(Actions.LOAD(JSON.parse(x)));\n//                 });\n//             }\n//         }\n//     }\n// };\n//\n// export default GlobalActions;\n","\nconst Id = {index:0};\n\n// function getMaxId(obj){\n//     let ids = [];\n//     for (let i in obj){\n//         if(i==='id'){\n//             ids.push(obj[i])\n//         } else if(typeof obj[i] === 'object'){\n//             ids.push(getMaxId(obj[i]))\n//         }\n//     }\n//     return Math.max(...ids)\n// }\n\nId.init =  function (state){\n    const effects = Math.max(...Object.keys(state.effects).map(parseFloat));\n    const tracks = Math.max(...Object.keys(state.tracks).map(parseFloat));\n    const stems = Math.max(...Object.keys(state.stems).map(parseFloat));\n    Id.index = Math.max(effects,tracks,stems)+1;\n    console.log('loaded id index: '+Id.index);\n}\n\n\nId.new = function() {\n    return (Id.index++)+'';\n};\n\nexport default Id","\n\nconst TrackReducer = function (tracks, action) {\n\n    const payload = action.payload;\n\n    if (action.type === 'TRACK_UPDATE') {\n        tracks[payload.trackId] = Object.assign({}, tracks[payload.trackId], payload.value);\n        return {...tracks};\n    } else if (action.type === 'TRACK_DELETE_STEM') {\n        tracks[payload.trackId].stems = tracks[payload.trackId].stems.filter(x=>{return x !== payload.stemId});\n        tracks[payload.trackId] = Object.assign({}, tracks[payload.trackId]);\n        return {...tracks};\n    } else if (action.type === 'TRACK_ADD_STEM') {\n        let newTrack = Object.assign({}, tracks[payload.trackId]);\n        newTrack.stems = newTrack.stems.concat([payload.stemId]);\n        let obj = {};\n        obj[payload.trackId] = newTrack;\n        return Object.assign({},tracks, obj)\n    } else if (action.type === 'TRACK_DELETE_EFFECT') {\n        tracks[payload.trackId] = {...tracks[payload.trackId]};\n        tracks[payload.trackId].effects = tracks[payload.track].filter(x=>{return x !== payload.effectId});\n        return {...tracks};\n    } else if (action.type === 'TRACK_ADD_EFFECT') {\n        tracks[payload.trackId] = {...tracks[payload.trackId]};\n        tracks[payload.trackId].effects.push(payload.effectId);\n        return {...tracks};\n    } else if (action.type === 'TRACK_ADD'){\n        tracks[payload.trackId] = payload.value;\n        return {...tracks};\n    }\n    return tracks\n}\n\n\nexport default TrackReducer","\nconst ConnectionReducer = function (connection, action){\n    switch (action.type){\n        case 'CONNECT':\n            return {url: action.payload.url, port:action.payload.port, isConnected:action.payload.isConnected};\n        default:\n            return connection\n    }\n}\n\nexport default ConnectionReducer","\nconst MasterReducer = function (master, action) {\n    let newLang;\n    switch (action.type) {\n        case \"MASTER_UPDATE\":\n            newLang = Object.assign({},master[action.payload.language],action.payload.value);\n            master[action.payload.language] = newLang;\n            return {...master};\n        case \"MASTER_ADD_EFFECT\":\n            newLang = Object.assign({},master[action.payload.language]);\n            newLang.effects = newLang.effects.concat([action.payload.effectId]);\n            master[action.payload.language] = newLang;\n            return {...master}\n\n        // case ActionTypes.UPDATE_MASTER:\n        //     newVal = Object.assign({}, master[action.language], action.value);\n        //     obj = {};\n        //     obj[action.language] = newVal;\n        //     return Object.assign({}, master, obj);\n        // case ActionTypes.UPDATE_MASTER_EFFECT:\n        //     let previousMaster = master[action.effect.language];\n        //     newVal = Object.assign({}, previousMaster, {\n        //         effects: previousMaster.effects.map(x => {\n        //             if (x.id === action.effect.id) {\n        //                 return Object.assign({}, x, action.effect);\n        //             }\n        //             return x\n        //         })\n        //     });\n        //     obj = {};\n        //     obj[action.effect.language] = newVal;\n        //     return Object.assign({},master,obj);\n        default:\n            return master\n    }\n}\n\nexport default MasterReducer;","\nconst StemReducer = (stems, action) => {\n    const payload = action.payload\n\n    if (action.type === 'STEM_UPDATE') {\n        stems[payload.stemId] = Object.assign({}, stems[payload.stemId], payload.value);\n        return {...stems};\n    } else if (action.type === 'STEM_DELETE_EFFECT') {\n        stems[payload.stemId] = Object.assign({}, stems[payload.stemId]);\n        stems[payload.stemId].effects = stems[payload.stemId].effects.filter(x => {\n            return x !== payload.effectId\n        });\n        return {...stems}\n    } else if (action.type === 'STEM_ADD_EFFECT') {\n        stems[payload.stemId] = Object.assign({}, stems[payload.stemId]);\n        stems[payload.stemId].effects.push(payload.effectId);\n        return {...stems}\n    } else if (action.type === 'STEM_COPY') {\n        // nothing\n        return stems\n    } else if (action.type === 'STEM_PASTE') {\n        console.log('paste not yet implemented');\n        return stems\n    } else if (action.type === 'TRACK_ADD_STEM') {\n        stems[payload.stemId] = payload.value;\n        return {...stems}\n    } else if (action.type === 'TRACK_DELETE_STEM') {\n        delete stems[payload.stemId];\n        return {...stems}\n    }\n\n    return stems\n}\n\nexport default StemReducer","\n\nconst EffectReducer = (effects, action) => {\n    if (action.type === 'EFFECT_UPDATE') {\n        effects[action.payload.effectId] = Object.assign({}, effects[action.payload.effectId], action.payload.value);\n        return {...effects};\n    } else if (action.type === \"STEM_ADD_EFFECT\") {\n        effects[action.payload.effectId] = action.payload.value;\n        return {...effects};\n    } else if (action.type === \"STEM_DELETE_EFFECT\") {\n        delete effects[action.payload.effectId];\n        return {...effects}\n    } else if (action.type === 'TRACK_ADD_EFFECT') {\n        effects[action.payload.effectId] = action.payload.value;\n        return {...effects};\n    } else if (action.type === \"TRACK_DELETE_EFFECT\") {\n        delete effects[action.payload.effectId];\n        return {...effects}\n    } else if (action.type === \"MASTER_ADD_EFFECT\") {\n        effects[action.payload.effectId] = action.payload.value;\n        return {...effects};\n    }\n    return effects;\n}\nexport default EffectReducer","\nconst MidiReducer = function (midi, action){\n    switch (action.type){\n        case 'MIDI_UPDATE':\n            return Object.assign({}, midi, action.payload);\n        default:\n            return midi\n    }\n}\n\nexport default MidiReducer","\nconst SettingsReducer = function (settings, action){\n    switch (action.type){\n        case 'SETTINGS_UPDATE_STYLE':\n            let style = Object.assign({}, settings.style, action.payload);\n\n            return Object.assign({}, settings,{style});\n        default:\n            return settings\n    }\n}\n\nexport default SettingsReducer","import Model from '../model'\nimport TrackReducer from \"./Track\";\nimport ConnectionReducer from \"./Connection\";\nimport MasterReducer from \"./Master\";\nimport StemReducer from './Stem.js'\nimport EffectReducer from \"./Effect\";\nimport {ActionSpec} from \"../actions\";\nimport MidiReducer from \"./MIDI\";\nimport SettingsReducer from \"./Settings\";\n\nconst CopyReducer = (copy, action)=>{\n    if (action.type==='STEM_COPY'){\n        return {type:'stems', items:action.payload.items};\n    }\n    return copy\n}\n\nconsole.log(Model.defaultState)\n\nexport default (state = Model.defaultState, action) =>{\n    if(action.type === 'LOAD'){\n        return action.payload\n    } else if (action.type === ActionSpec.RECEIVE_STATE.name){\n        return {...action.payload, connection: state.connection};\n    }\n\n    return {\n        copy: CopyReducer(state.copy,action),\n        master:MasterReducer(state.master, action),\n        connection: ConnectionReducer(state.connection, action),\n        tracks: TrackReducer(state.tracks, action),\n        stems: StemReducer(state.stems, action),\n        effects: EffectReducer(state.effects, action),\n        midi: MidiReducer(state.midi, action),\n        settings: SettingsReducer(state.settings, action)\n    }\n}\n\n\n\n// function pasteStemAtPosition(state, stem, pos) {\n//     if (pos.trackIndex >= state.tracks.length) return state;\n//     if (pos.stemIndex >= state.tracks[pos.trackIndex].stems.length) return state;\n//     let track = state.tracks[pos.trackIndex];\n//     let newStem = StemModel.clone(stem);\n//     newStem.trackId = track.id;\n//     newStem.open = false;\n//     track.stems = state.tracks[pos.trackIndex].stems.concat([]);//insertAt(state.tracks[pos.trackIndex].stems,pos.stemIndex,newStem).concat([]);\n//     track.stems[pos.stemIndex] = newStem;//insertAt(state.tracks[pos.trackIndex].stems,pos.stemIndex,newStem).concat([]);\n//     return Object.assign({}, state, {\n//         tracks: state.tracks.map(x => {\n//             if (x.id === track.id) {\n//                 return track\n//             }\n//             return x\n//         })\n//     })\n// }\n//\n// function getStemPosition(stem, state) {\n//     let trackIndex = state.tracks.findIndex(x => x.id === stem.trackId);\n//     let stemIndex = state.tracks[trackIndex].stems.findIndex(x => x.id === stem.id);\n//     return {trackIndex, stemIndex}\n// }\n\n\n/*\nActions:\n______________\nadd track\nadd stem row\nupdate value\nopen in flyout\nclose in flyout\nsave\nload\n\nStore:\n____________\n */\n","import {applyMiddleware, createStore} from \"redux\";\nimport DeadReducer from './reducers'\nimport {serverControl} from \"./middleware/index\";\nimport dynamicMiddlewares from 'redux-dynamic-middlewares'\n\n\n// TODO: dynamic middleware added so midi could re-use same store architecture and just add a middleware for\n//      midi related things - this should probably be changed so each client just instantiates its own proper store\n//      from the beginning...\nconst store = createStore(DeadReducer, applyMiddleware(serverControl, dynamicMiddlewares));\n// const store = createStore(DeadReducer, applyMiddleware(serverControl, dynamicMiddlewares));\nexport default store","import Connection from \"../Connection\";\nimport {ActionSpec, ActionTypes} from \"../actions\";\n\n\n// propogate action to server if it didn't originate from there\n//\n\n\n\nexport const serverControl = store => next => action => {\n    const meta = action.meta;\n    if (!meta.fromServer && meta.propogateToServer){\n        var newAction = {...action}\n        // if pushing state, change the action to a receive for other clients\n        if(newAction.type === ActionSpec.PUSH_STATE.name){\n            newAction.type = ActionSpec.RECEIVE_STATE.name\n        }\n\n        // dispatch to server\n        Connection.sendAction(newAction);\n    }\n    return next(action);\n}\n","\nfunction getNew(language,properties){\n    return {\n        macros:'',\n        effects:[],\n        properties\n    }\n}\n\nconst MasterModel = {getNew};\n\n\n\nexport default MasterModel;\n","const settings = {\n    style: {\n        '--bg-image': 'radial-gradient(rgb(170,170,170), rgb(170,170,170))',\n        '--launchspace-bg-color': 'transparent',\n        '--border-radius': ' 0px',\n        // '--stem-on': ' rgb(0,255,240)',\n        '--stem-on': '#00FFFE',\n        '--stem-off': 'rgba(230,230,230)',\n        '--stem-editor-color': 'rgba(200, 200, 200, 0.5)',\n        '--font-family': \"'Helventica', sans-serif\",\n        '--font-color-dark': 'black',\n        '--font-color-light': 'rgb(30, 30, 30)',\n        '--scrollbar-width': '0px',\n        '--track-border-color': 'lightgrey',\n        '--select-color': 'rgb(250,10,10)',\n        '--settings-background-color': 'rgb(50,50,50)',\n        '--settings-font-color': 'rgb(150,150,150)',\n        '--midi-background-color': 'rgba(100,100,100,0.600)'\n    }\n};\n\n\nexport default settings;\n","const midi = {top:0, left:0, rows: 0, columns: 0}\n\nexport default midi;","import TrackModel from \"./TrackModel\";\nimport MasterModel from \"./MasterModel\";\nimport Id from \"./Id\";\nimport EffectModel from \"./EffectModel\";\nimport StemModel from \"./StemModel\";\nimport settings from \"./Settings\";\nimport midi from './Midi'\n\n\nconst Model = {};\n\nModel.Languages = {\n    TidalCycles: \"TidalCycles\",\n    Hydra: \"Hydra\"\n};\n\nconst tracks = {};\nconst stems = {};\nconst effects = {};\n\nconst TidalCycles = MasterModel.getNew('TidalCycles',{tempo:120});\nfor(let i in EffectModel.util.defaultEffects['TidalCycles']()){\n  let effectId = Id.new();\n  effects[effectId] = EffectModel.util.defaultEffects['TidalCycles']()[i];\n  TidalCycles.effects.push(effectId);\n}\n\n\nconst Hydra = MasterModel.getNew('Hydra', {mixMethod:'blend'});\nfor(let i in EffectModel.util.defaultEffects['Hydra']()){\n  let effectId = Id.new();\n  effects[effectId] = EffectModel.util.defaultEffects['Hydra']()[i];\n  Hydra.effects.push(effectId);\n}\n\nconst master = {TidalCycles, Hydra}\n\nfor (let i = 0; i < 8; i++) {\n    let trackId = Id.new();\n    tracks[trackId] = TrackModel.getNew();\n    for (let j = 0; j < 8; j++) {\n        let stemId = Id.new();\n        stems[stemId] = StemModel.getNew();\n        EffectModel.util.defaultEffects['TidalCycles']().forEach(effect => {\n            let effectId = Id.new();\n            effects[effectId] = effect;\n            stems[stemId].effects.push(effectId);\n        });\n        tracks[trackId].stems.push(stemId);\n    }\n    let mainEffectId = Id.new();\n    effects[mainEffectId] = EffectModel.getNew(EffectModel.Types.SLIDER, \"TidalCycles\", true, {\n        code: 'gain',\n        value: 1,\n        operator: \"|*\",\n        min: 0,\n        max: 2,\n        step: 0.01,\n        scale: 'linear'\n    });\n    tracks[trackId].effects.push(mainEffectId);\n}\n\n\n\n\nModel.defaultState = {\n    connection: {\n        isConnected: false,\n        url:'',\n        port: 8001\n    },\n    master,\n    copy: null,\n    tracks,\n    stems,\n    effects,\n    midi,\n    settings\n}\n\nexport default Model\n\n\n/*\n// model structure:\nvar a = {\n    'connection': {},\n    'copy': null,\n    'master': {\n        'TidalCycles': {},\n        'Index': {}\n    },\n    'tracks': {\n        'track_1': {\n            'name': \"new track\",\n            'stems': ['stem_1', 'stem_2'],\n            'effects': ['effect_1']\n        }\n    },\n    'stems': {\n        'stem_1': {\n            name: '',\n            on: false,\n            selected: false,\n            open: false,\n            live: false,\n            language: 'TidalCycles',\n            code: '',\n            effects: ['effect_1', 'effect_2']\n        }\n    },\n    'effects': {\n        'effect_1': {\n            name: '',\n            on: false,\n            type: EffectModel.Types.SLIDER,\n            language: 'TidalCycles',\n            properties: {}\n        }\n    }\n}\n*/","import React , {Component} from \"react\";\nimport './index.css'\n\nexport default class Toggle extends Component {\n\n    onClick(){\n        if(this.props.onChange){\n            this.props.onChange(!this.props.on);\n        } else{\n            console.warn('no onChange for toggle')\n        }\n    }\n\n    render() {\n        return (\n            <div onContextMenu={this.onClick.bind(this)} onClick={this.onClick.bind(this)} className={\"Toggle\"+(this.props.on?\" on\":\"\")}>\n                <div></div>\n            </div>\n        )\n    }\n\n}","import EffectModel from \"./EffectModel\";\n\n\nfunction clone (stem){\n    return {\n        ...stem,\n        effects:[...stem.effects].map(EffectModel.clone),\n    }\n}\n\nfunction getNew(language = \"TidalCycles\"){\n    return {\n        name:'',\n        on: false,\n        selected:false,\n        open:false,\n        live:false,\n        language,\n        code:\"\",\n        effects: []\n    }\n};\n\nconst StemModel = {\n    getNew,\n    clone\n}\n\nexport default StemModel\n","import Effect from '../components/Effect'\nimport {connect} from 'react-redux';\nimport GlobalActions from \"../actions/GlobalActions\";\n\nconst mapStateToProps = (state,ownProps) => {\n  return {\n    ...state.effects[ownProps.id],\n    ...ownProps\n  }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        globalActions: GlobalActions(dispatch)\n    }\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Effect);\n","import React, {Component} from 'react'\nimport './index.css'\nimport debounce from \"lodash/debounce\";\nimport Toggle from \"../util/Toggle\";\n\nexport default class CodeEditor extends Component {\n\n    // onChange, onChangeLive, code, live\n    constructor(props) {\n        super(props);\n\n        this.state = {code: this.props.code};\n        this.updateCode = debounce(this.props.onChange, 1000);\n        this.flashTimeout = null;\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(prevProps.code !== this.props.code && (this.props.code !== this.state.code)){\n            this.setState({code:this.props.code});\n        }\n    }\n\n    render() {\n        return (\n            <div className={'CodeEditor'}>\n                <div className={'Liveness'}>\n                    <div><div className={'verticalCenter'}>Live</div></div>\n                    <Toggle onChange={(e)=>{this.props.onChangeLive(e)}} on={this.props.live}/>\n                    <button disabled={this.props.live} onClick={(e) => {\n                        this.props.onChange(this.state.code)\n                    }}>eval\n                    </button>\n                </div>\n                <textarea\n                    className={this.state.flash ? 'flash' : ''}\n                    onKeyPress={this.onKeyPress.bind(this)}\n                    onChange={(e) => {\n                        this.setState({code: e.target.value});\n                        if (this.props.live) {\n                            this.updateCode.bind(this)(e.target.value)\n                        }\n                    }\n                    }\n                    value={this.state.code}\n                />\n            </div>\n        )\n    }\n\n    onKeyPress(e) {\n        if (e.shiftKey) {\n            if (e.key === 'Enter') {\n                e.preventDefault();\n                this.props.onChange(this.state.code);\n                clearTimeout(this.flashTimeout);\n                this.setState({flash: true});\n                this.flashTimeout = setTimeout(() => {\n                    this.setState({flash: false})\n                }, 1);\n            }\n        }\n    }\n}","import React, {Component} from 'react';\n\nclass CodeWriter extends Component {\n    constructor(props) {\n        super(props);\n        this.ref = React.createRef();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.text !== prevProps.text) {\n            this.ref.current.innerText = '';\n            this.interval && clearInterval(this.interval);\n            let i = 0;\n            this.interval = setInterval(() => {\n                    if (i < this.props.text.length) {\n                        this.ref.current.innerText = this.props.text.substring(0, i);\n                    } else if (i === this.props.text.length) {\n                        this.ref.current.innerText = this.props.text.substring(0, i);\n                        this.props.triggerResize();\n                    } else {\n                        clearInterval(this.interval)\n                    }\n                    i = i + 1;\n                },\n                this.props.rate);\n        }\n    }\n\n    componentWillUnmount() {\n        this.interval && clearInterval(this.interval)\n        this.ref.current.innerText = '';\n        this.props.triggerResize();\n    }\n\n    componentDidMount() {\n        this.componentDidUpdate({text:null})\n    }\n\n    render() {\n        return (\n            <span ref={this.ref} {...this.props} >\n            </span>\n        );\n    }\n}\n\nexport default CodeWriter;","\n// TODO this is probably bad practice.... (?)\n// import {store} from \"./index\";\n\nimport store from './store'\n\nconst Connection = {};\n\nConnection.init = function(host=window.location.hostname,port=8000, onOpen=()=>{}, onClose=()=>{}, onErr=()=>{}){\n    if (Connection.ws){\n        Connection.ws.close();\n    }\n    var WebSocket;\n    if(typeof window!=='undefined'){\n        WebSocket = window.WebSocket || window.MozWebSocket;\n    } else{\n        WebSocket = require('ws');\n    }\n\n    try{\n        Connection.ws = new WebSocket('ws://' + host + \":\" + port);\n        Connection.ws.isOpen = false;\n        Connection.ws.onopen = function open() {\n            Connection.ws.isOpen = true;\n            console.log('ws connection established');\n            onOpen();\n        }\n        Connection.ws.onmessage = Connection.onMessage;\n\n        Connection.ws.onerror = (e)=>{\n            console.warn(e);\n            onErr(e);\n        }\n        Connection.ws.onclose =  function incoming(data) {\n            Connection.ws.isOpen = false;\n            onClose(data);\n        };\n    } catch (e) {\n        onErr();\n    }\n};\n\nConnection.onMessage = function(event){\n    let message = JSON.parse(event.data);\n    if(message.type==='action'){\n        let action = message.action;\n        action.meta = action.meta || {};\n        action.meta.fromServer = true;\n        store.dispatch(action)\n    } else{\n        console.warn('Unrecognized message type from WS server: '+message.type, message);\n    }\n};\n\nConnection.sendAction = function(action){\n    if(!Connection.ws || !Connection.ws.isOpen){\n        console.warn('Connection is closed');\n        return;\n    }\n    const data = {type:'action',action}\n    Connection.ws.send(JSON.stringify(data));\n}\n\nConnection.sendCode = function(code){\n    if(!Connection.ws || !Connection.ws.isOpen){\n        console.warn('Connection is closed');\n        return;\n    }\n    Connection.ws.send(JSON.stringify({type:'eval',code}));\n};\n\nexport default Connection","import React from \"react\";\n// import \"./index.css\";\nimport EffectModel from \"../../model/EffectModel\";\nimport Model from \"../../model\";\nexport const Index = {\n    language:'Index',\n    getCode,\n    getMacros\n    // getAudienceDom,\n};\n\n\nfunction getMacros(state) {\n    return state.master['Hydra'].macros\n}\n\n\n\nfunction getCode(state){\n    let mixMethod = state.master.Hydra.properties.mixMethod;\n\n    let tracks = Object.keys(state.tracks).map(x=>{return trackToCode(state, state.tracks[x],mixMethod)}).filter(x=>x);\n\n    let code;\n    if(tracks.length>0){\n        code = tracks[0];\n    }\n    for(let i = 1; i<tracks.length; i++){\n        code += `.${state.master.Hydra.properties.mixMethod}(${tracks[i]},${1/tracks.length})`;\n    }\n\n    let effects = state.master.Hydra.effects.map(x=>{return state.effects[x]}).filter(e=>e.on).map(effectToCode);\n\n    if(!code){\n        code = 'solid(0,0,0,0)';\n    }\n    return code + effects.join(\"\")+\".out()\";\n}\n\nexport function trackToCode(state, track){\n    let code;\n    let stems = track.stems.map(x=>{return state.stems[x]}).filter(x=>{return x.on && x.code!=='' && x.language===Model.Languages.Hydra}).map(x=>stemToCode(state,x));\n    stems.join(state.master.Hydra.properties.mixMethod+\"(\"+1/stems.length+\"\")\n\n    if(stems.length>0){\n        code = stems[0];\n    } else {\n        return null;\n    }\n\n    for(let i = 1; i<stems.length; i++){\n        code += `.${state.master.Hydra.properties.mixMethod}(${stems[i]},${1/stems.length})`;\n    }\n\n    let effects = track.effects.map(x=>{return state.effects[x]}).filter(e=>e.on).map(effectToCode);\n\n    return code + effects.join(\"\");\n}\n\nexport function stemToCode(state, stem){\n    let effects = stem.effects.map(x=>{return state.effects[x]}).filter(e=>e.on).map(effectToCode);\n    return stem.code + effects.join(\"\");\n}\n\n\n\nexport function effectToCode(effect){\n    switch (effect.type) {\n        case EffectModel.Types.CODE_TOGGLE:\n            return effect.properties.code;\n        case EffectModel.Types.SLIDER:\n            // TODO make this cleaner\n            if(effect.properties.code==='gain'){\n                return `.blend(solid(0,0,0,0),${1-effect.properties.value/2})`;\n            }\n            return  `.${effect.properties.code}(${effect.properties.value})`;\n        default:\n            debugger\n            console.warn(\"Index renderer not implemented for type \" + effect.type);\n    }\n}\n\nconst effectToCodeFuncs  = {}\neffectToCodeFuncs[EffectModel.Types.SLIDER] = function(effect){\n    return `.${effect.name}(${effect.properties.value})`\n}","import {Index} from \"./Hydra\"\nimport {TidalCycles} from \"./TidalCycles/index\";\n\nexport const Renderers = {\n    Hydra: Index,\n    TidalCycles\n}","import EffectModel from \"./EffectModel\";\nimport StemModel from \"./StemModel\";\n\n\nfunction getNew() {\n    return {\n        name: 'New Track',\n        stems:[],\n        effects:[]\n    }\n}\n\n\nfunction clone(track) {\n    return {\n        ...track,\n        stems: track.stems.map(x => {\n            return StemModel.clone(x)\n        }),\n        effects: track.effects.map(EffectModel.clone)\n    }\n}\n\nconst TrackModel = {\n    getNew,\n    clone\n}\n\nexport default TrackModel\n","import React, {Component} from 'react';\nimport EffectModel from \"../../../model/EffectModel\";\nimport './index.css'\n\nfunction getInput(id, type) {\n    return {\n        'array': (<input placeholder={'array'} id={id} className={'specInput'} type='text'/>),\n        'string': (<input placeholder={'string'} id={id} className={'specInput'} type='text'/>),\n        'float': (<input placeholder={'float'} id={id} className={'specInput'} type='number'/>),\n        'integer': (<input placeholder={'integer'} id={id} className={'specInput'} type='number'/>),\n        'boolean': (<input placeholder={'boolean'} id={id} className={'specInput'} type='checkbox'/>)\n    }[type]\n}\n\nfunction parseValue(value, type){\n    switch(type){\n        case 'array':\n            return JSON.parse(value);\n        case 'string':\n            return value;\n        case 'float':\n            return parseFloat(value);\n        case 'integer':\n            return parseInt(value);\n        case 'boolean':\n            return value==='true';\n        default:\n            console.warn('Type not defined: '+type);\n            return value\n    }\n}\n\nclass EffectCreator extends Component {\n\n    constructor(props) {\n        super(props);\n        this.ref = React.createRef();\n        this.state = {\n            creating: false,\n            progress: 'plus',\n            type: null\n        }\n    }\n\n    transitionToSpec() {\n        let input = this.ref.current.querySelector('#effect_creator_type_input');\n        if (!input) {\n            console.warn('this shouldnt happen');\n            return\n        }\n        let type = input.value;\n        this.setState({type, progress: 'spec'});\n    }\n\n    render() {\n        let inside = [];\n\n        if (this.state.progress === 'plus') {\n            inside.push(\n                <button key={'plus'} onClick={() => {\n                    this.setState({progress: 'type'})\n                }}> + </button>\n            )\n        } else if (this.state.progress === 'type') {\n            let options = [];\n            Object.keys(EffectModel.Types).forEach(x=>{\n                x = EffectModel.Types[x];\n                options.push(<option key={x} value={x}>{x.toLowerCase()}</option>)\n            });\n            let select = (\n                <select key={\"effect_creator_type_input\"} id={\"effect_creator_type_input\"}>\n                    {options}\n                </select>\n            );\n            let next = (<button key={\"effect_creator_next\"} onClick={this.transitionToSpec.bind(this)}> next </button>)\n            let cancel = (<button key={\"effect_creator_cancel\"} onClick={()=>{this.setState({progress:'plus'})}}> cancel </button>)\n            inside.push([select, next, cancel]);\n        } else if (this.state.progress === 'spec') {\n            let widgets = [];\n            Object.keys(EffectModel.PropertySpec[this.state.type]).forEach(prop => {\n                let type = EffectModel.PropertySpec[this.state.type][prop];\n                let widget = getInput(prop, type);\n                widgets.push(\n                    <div key={prop}>\n                        <div>{prop}</div>\n                        {widget}\n                    </div>\n                )\n            });\n            inside.push(widgets)\n\n                inside.push(<button key={'create'} onClick={this.onClick.bind(this)}>create</button>)\n                inside.push(<button key={\"effect_creator_cancel\"} onClick={()=>{this.setState({progress:'plus'})}}> cancel </button>)\n\n            } else {\n            console.warn('something bad has happened');\n            inside.push(\n                <button onClick={() => {\n                    this.setState({progress: 'type'})\n                }}> + </button>\n            )\n        }\n\n        return (\n            <div ref={this.ref} className={'EffectCreator'}>\n                <div><div>New Effect</div></div>\n                {inside}\n            </div>\n        );\n    }\n\n    onClick() {\n        let obj = {}\n        Object.keys(EffectModel.PropertySpec[this.state.type]).forEach(prop=>{\n            let val = this.ref.current.querySelector('#' + prop).value;\n            let type = EffectModel.PropertySpec[this.state.type][prop];\n            let parsed = parseValue(val,type);\n            obj[prop] = parsed\n        })\n        if(this.props.onCreate){\n            this.props.onCreate(this.state.type, obj);\n        } else{\n            console.warn('onCreate not defineed for effect creator')\n        }\n        this.setState({progress:'plus'});\n    }\n}\n\nexport default EffectCreator;","import React, {Component} from \"react\";\nimport Model from \"../../model\";\nimport EffectModel from \"../../model/EffectModel\";\n\nfunction getTempoCode(state) {\n    return 'setcps ' + state.master.TidalCycles.properties.tempo / 60 / 2;\n}\n\nexport const EffectsToCode = {};\nEffectsToCode[EffectModel.Types.SLIDER] = (x) => {\n    return `(${x.properties.operator} ${x.properties.code} ${x.properties.value})`\n}\nEffectsToCode[EffectModel.Types.CODE_TOGGLE] = (x) => {\n    return `(${x.properties.code})`\n}\n\n\n\nfunction effectToCode(x) {\n    return EffectsToCode[x.type](x)\n}\n\nfunction stemToCode(state, stem) {\n    if (stem.code === '') {\n        return null\n    }\n    let effectsOn = [];\n    stem.effects.forEach(e => {\n        let effect = state.effects[e];\n        if (effect.on) {\n            effectsOn.push(effectToCode(effect));\n        }\n    });\n    let code = effectsOn.join(\" $ \");\n    code += effectsOn.length ? ' $ ' : '';\n    code += stem.code;\n    return code\n}\n\nfunction trackToCode(state, track) {\n    let stemsCode = [];\n    track.stems.forEach(x => {\n        let stem = state.stems[x];\n        if (stem.on && stem.code !== '' && stem.language === 'TidalCycles') {\n            stemsCode.push(stemToCode(state, stem))\n        }\n    });\n    if (stemsCode.length < 1) {\n        return ''\n    }\n    ;\n\n    stemsCode = stemsCode.join(\", \");\n\n    let effectsOn = [];\n    track.effects.forEach(e => {\n        let effect = state.effects[e];\n        if (effect.on) {\n            effectsOn.push(effectToCode(effect));\n        }\n    });\n    let effectsCode = effectsOn.join(\" $ \");\n    return `${effectsCode} $ stack [${stemsCode}]`;\n}\n\nfunction getCode(state) {\n    let stems = 'stack [';\n\n    let tracks = Object.keys(state.tracks).map(x => {\n        return trackToCode(state, state.tracks[x])\n    });\n\n    stems += tracks.filter(x => x !== '').join(\", \") + ']';\n\n    let masterEffects = [];\n    state.master[Model.Languages.TidalCycles].effects.forEach(x => {\n        let effect = state.effects[x];\n        if (effect.on) {\n            masterEffects.push(effectToCode(effect));\n        }\n    })\n    let masterEffectsCode = masterEffects.join(\" $ \");\n\n    let code = `d1 $ ${masterEffectsCode}${masterEffects.length ? ' $ ' : ''}${stems}`;\n    return code;\n}\n\n\nexport const TidalCycles = {\n    language: 'TidalCycles',\n    getCode,\n    trackToCode,\n    getTempoCode,\n}","import React, {Component} from 'react';\nimport './index.css'\nimport {Grid, Slider, Input} from '@material-ui/core';\nimport Toggle from \"../../util/Toggle\";\n\nexport default class SliderEffect extends Component {\n    constructor (props){\n        super(props);\n        let sliderValue = this.toSliderScale(this.props.properties.value);\n        this.state = {value:this.props.properties.value, sliderValue};\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(this.props.properties.value !== prevProps.properties.value){\n            const sliderValue = this.toSliderScale(this.props.properties.value);\n            this.setState({value:this.props.properties.value, sliderValue});\n        }\n    }\n\n    toSliderScale(x){\n        if (this.props.properties.scale==='log'){\n            let range = this.props.properties.max-this.props.properties.min;\n            return Math.pow(x/range,0.5)*range;\n        }\n        return x\n    }\n\n    fromSliderScale(x){\n        if(this.props.properties.scale==='log'){\n            let range = this.props.properties.max-this.props.properties.min;\n            return Math.round(Math.pow(x/range,2)*range*this.props.properties.step)/this.props.properties.step;\n        }\n        return x\n    }\n\n    render(){\n        return (this.props.isVertical?this.renderVertical():this.renderHorizontal())\n    }\n\n    handleSliderChange(e, newValue){\n        if(newValue){\n            const properties = this.props.properties;\n            properties.value = newValue;\n            this.props.globalActions.effectUpdate(this.props.id,{properties});\n        }\n    }\n\n    handleInputChange(e){\n        let value = parseFloat(e.target.value);\n        const properties = this.props.properties;\n        properties.value = value;\n        this.props.globalActions.effectUpdate(this.props.id, {properties});\n    }\n\n    toggle(on){\n        this.props.globalActions.effectUpdate(this.props.id, {on})\n    }\n\n    renderHorizontal(){\n        return (\n            <div className={'Slider horizontal'}>\n                {this.props.noToggle ? null : <Toggle onChange={this.toggle.bind(this)} on={this.props.on}/>}\n                <div className={'text'}><div>{this.props.properties.code}</div></div>\n                <Grid container spacing={2} alignItems=\"center\">\n                    <Grid item xs>\n                        <Slider\n                            onChange={(e,newValue)=>{\n                                if(newValue){\n                                    this.setState({sliderValue:newValue,value:this.fromSliderScale(newValue)});\n                                    this.handleSliderChange(e,newValue);\n                                }\n                            }}\n                            min={this.props.properties.min}\n                            max={this.props.properties.max}\n                            step={this.props.properties.step}\n                            value={parseFloat(this.state.sliderValue)}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <input\n                            margin=\"dense\"\n                            onInput={(e)=>{\n                                let value = parseFloat(e.target.value);\n                                e.persist()\n                                this.setState({value:value, sliderValue:this.toSliderScale(value)});\n                                this.handleInputChange.bind(this)(e);\n                            }}\n                            value={this.state.value}\n                            step={this.props.properties.step}\n                            min={this.props.properties.min}\n                            max={this.props.properties.max}\n                            type={'number'}\n                        />\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n\n\n    renderVertical(){\n        return (\n            <div className={'Slider vertical'}>\n\n                <Slider\n                    orientation='vertical'\n                    onChange={(e,newValue)=>{\n                        if(newValue){\n                            this.setState({sliderValue:newValue,value:this.fromSliderScale(newValue)});\n                            this.handleSliderChange(e,newValue);\n                        }\n                    }}\n                    min={this.props.properties.min}\n                    max={this.props.properties.max}\n                    step={this.props.properties.step}\n                    value={parseFloat(this.state.sliderValue)}\n                />\n                        <Input\n                            margin=\"dense\"\n                            onChange={(e)=>{\n                                let value = parseFloat(e.target.value);\n                                e.persist()\n                                this.setState({value:value, sliderValue:this.toSliderScale(value)});\n                                this.handleInputChange.bind(this)(e);\n                            }}\n                            value={this.state.value}\n                            inputProps={{\n                                step: this.props.properties.step,\n                                min: this.props.properties.min,\n                                max: this.props.properties.max,\n                                type: 'number',\n                                'aria-labelledby': 'input-slider',\n                            }}\n                        />\n                        <div style={{textAlign:'center'}}>\n                            {this.props.properties.code}\n                            {this.props.noToggle ? null :\n                                <Toggle onChange={this.toggle.bind(this)} on={this.props.on}/>\n                            }\n                        </div>\n            </div>\n        )\n    }\n}\n","import React, {Component} from 'react';\nimport './index.css'\nimport Toggle from \"../../util/Toggle\";\nimport {debounce} from 'lodash';\n\nclass CodeToggle extends Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            code:this.props.properties.code\n        }\n        this.effectUpdate = debounce((code)=>{this.props.globalActions.effectUpdate(this.props.id,{properties:{code}})},500);\n    }\n\n    onChange(e){\n        const code = e.target.value;\n        this.setState({code});\n        this.effectUpdate(code);\n    }\n\n    onToggle(on){\n        this.props.globalActions.effectUpdate(this.props.id, {on});\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        // if props are different from state the let props override (eg. from server)\n        // but only if theres an actual difference in prev props and current props\n        if(prevProps.properties.code!== this.props.properties.code && this.props.properties.code!==this.state.code){\n            this.setState({...this.state, code:this.props.properties.code});\n        }\n    }\n\n    render() {\n        return (\n            <div className={'CodeToggle'}>\n                <div>\n                    <Toggle on={this.props.on} onChange={this.onToggle.bind(this)}/>\n                    <div className={'text'}><div>Code Toggle</div></div>\n                </div>\n                <div>\n                    <input type={'text'} onChange={this.onChange.bind(this)} value={this.state.code}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default CodeToggle;","import React, {Component} from 'react';\nimport './index.css'\nimport debounce from 'lodash/debounce'\n\nclass AutosizeInput extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            width: 0\n        }\n        this.spanRef = React.createRef()\n    }\n\n    onChange(e) {\n        this.spanRef.current.innerText = e.target.value;\n        let width = this.spanRef.current.scrollWidth;\n        this.setState({width});\n        this.props.onChange(e);\n    }\n\n    render() {\n        let style = this.props.style || {};\n        style.width = this.state.width + 'px';\n        return (\n            <div>\n                <input {...this.props} style={style} onChange={this.onChange.bind(this)}/>\n                <span ref={this.spanRef} style={{color:'transparent',backgroundColor:'transparent',pointerEvents:'none',position:'absolute'}}>{this.props.value}</span>\n            </div>\n        );\n    }\n}\n\n\n\nclass TemplateInput extends Component {\n\n    constructor(props) {\n        super(props);\n        // this.props.value;\n        this.state = {\n            text: this.props.text,\n            indices: this.props.indices,\n        }\n        this.onChange = debounce(this._onChange, 500);\n    }\n\n    _onChange() {\n\n    }\n\n    textChange(e) {\n    // debugger;\n    }\n\n    render() {\n        let key = 0;\n        let text = [<AutosizeInput onChange={this.textChange.bind(this)} key={key + 'text'} className={'text'}/>];\n        key++;\n        let str = this.state.text;\n        this.state.indices.forEach(i => {\n            let left = str.slice(0, i);\n            let right = str.slice(i);\n            str = right;\n            text.push(<AutosizeInput onChange={this.textChange.bind(this)} key={key + 'text'} className={'text'}\n                                     value={left}/>);\n            text.push(<AutosizeInput key={key + 'placeholder'} className={'placeholder'} value={this.props.value}/>);\n            key++\n        });\n        text.push(<AutosizeInput onChange={this.textChange.bind(this)} key={key + 'text'} className={'text'}\n                                 value={str}/>);\n\n\n        return (\n            <div className={'TemplateInput'}>\n                <div className={'text'}>\n                    {text}\n                </div>\n                <button>insert</button>\n            </div>\n        );\n    }\n}\n\nexport default TemplateInput;","import React, {Component} from 'react';\nimport Toggle from \"../../util/Toggle\";\nimport TemplateInput from \"../../util/TemplateInput\";\n\n/*\n    CODE_SLIDER:{\n        code: 'string',\n        injectIndices: 'array',\n        value: 'float',\n        min: 'float',\n        max: 'float',\n        step: 'float',\n        scale: 'string'\n    }\n */\n\nclass CodeSlider extends Component {\n\n    onToggle(on){\n        this.props.globalActions.effectUpdate(this.props.id, {on});\n    }\n\n    onChange(...args){\n        console.log(...args)\n    }\n\n    render() {\n        return (\n            <div className={'CodeSlider'}>\n                <div>\n                    <Toggle on={this.props.on} onChange={this.onToggle.bind(this)}/>\n                    <div className={'text'}><div>Code Slider</div></div>\n                </div>\n                <TemplateInput onChange={this.onChange.bind(this)} text={this.props.properties.code} indices={this.props.properties.indices} value={this.props.properties.value} />\n\n            </div>\n        );\n    }\n}\n\nexport default CodeSlider;","import React, {Component} from 'react';\nimport './index.css'\nimport EffectModel from \"../../model/EffectModel\";\nimport Slider from \"./Slider\";\nimport CodeToggle from \"./CodeToggle\";\nimport CodeSlider from \"./CodeSlider\";\n\nexport default class Effect extends Component {\n    render() {\n        let component;\n\n        if (this.props.type === EffectModel.Types.SLIDER) {\n            component = <Slider {...this.props}/>;\n        } else if (this.props.type === EffectModel.Types.CODE_TOGGLE) {\n            component = <CodeToggle {...this.props}/>;\n        // } else if (this.props.type === EffectModel.Types.CODE_SLIDER) {\n        //     debugger\n        //     component = <CodeSlider {...this.props}/>;\n        } else {\n            debugger;\n        }\n\n        return (\n            <div className={'Effect'} id={this.props.id}>{component}</div>\n        )\n    }\n}\n","import React, {Component} from 'react'\nimport './index.css'\nimport {Button} from \"@material-ui/core\";\nimport Effect from \"../../containers/Effect\";\nimport debounce from 'lodash/debounce'\nimport CodeEditor from \"../CodeEditor\";\nimport Model from \"../../model\";\nimport EffectCreator from \"../Effect/EffectCreator\";\n\n\nexport default class StemEditor extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {code: this.props.code};\n        this.updateCode = debounce(this._updateCode, 1000);\n        this.textAreaRef = React.createRef();\n    }\n\n    effectIdToComponent(id) {\n        return <Effect key={id} id={id}/>\n    }\n\n    render() {\n        let effects = this.props.effects.map(this.effectIdToComponent.bind(this))\n\n        return (\n            <div className={'StemEditor'} style={this.props.style}>\n                Name:\n                <input\n                    style={{backgroundColor: 'var(--stem-off)'}}\n                    onChange={this.updateName.bind(this)}\n                    type='text'\n                    value={this.props.name}\n                />\n\n                <select\n                    value={this.props.language}\n                    onChange={this.handleLanguageChange.bind(this)}\n                    name='language'\n                >\n                    {Object.keys(Model.Languages).map(x => <option key={x} value={x}>{x}</option>)}\n                </select>\n\n                <CodeEditor\n                    onChange={(code) => this.props.globalActions.stemUpdate(this.props.id, {code})}\n                    onChangeLive={(live) => this.props.globalActions.stemUpdate(this.props.id, {live})}\n                    code={this.props.code}\n                    live={this.props.live}\n                />\n                <div>\n                    {effects}\n\n                    <EffectCreator onCreate={this.createEffect.bind(this)}/>\n                    {/*<PlusButton style={{maxWidth: '60px', maxHeight: '30px', marginLeft: '10px'}}*/}\n                    {/*            onClick={this.newEffect.bind(this)}/>*/}\n                </div>\n                <Button style={{marginTop: '5px'}} onClick={this.delete.bind(this)} color='primary'\n                        variant='outlined'>delete</Button>\n            </div>\n        )\n    }\n\n    createEffect(type, properties) {\n        this.props.globalActions.stemAddEffect(this.props.id,type,this.props.language,false,properties);\n    }\n\n    handleLanguageChange(e) {\n        this.props.globalActions.stemUpdateLanguage(this.props.id, e.target.value);\n    }\n\n    maybeEval(e) {\n        if (e.shiftKey) {\n            if (e.key === 'Enter') {\n                e.preventDefault();\n                this.props.globalActions.stemUpdate(this.props.id, {code: this.state.code});\n                this.textAreaRef.current.classList.add('flash');\n                setTimeout(() => {\n                    this.textAreaRef.current.classList.remove('flash')\n                }, 250);\n            }\n        }\n    }\n\n    delete() {\n        this.props.globalActions.trackDeleteStem(this.props.trackId, this.props.id)\n    }\n\n\n    updateEffect(newEffect) {\n        let newEffects = this.props.effects.map(x => {\n            if (x.id === newEffect.id) {\n                return Object.assign(x, newEffect, {});\n            }\n            return x\n        });\n        this.props.globalActions.stemUpdate(this.props.id, {effects: newEffects})\n    }\n\n    updateName(e) {\n        this.props.globalActions.stemUpdate(this.props.id, {name: e.target.value})\n    }\n\n    _updateCode(e) {\n        this.props.globalActions.stemUpdate(this.props.id, {code: e.target.value})\n    }\n\n}\n","import React, {Component} from 'react';\nimport {Renderers} from \"../../renderers\";\nimport Hydra from \"hydra-synth\";\nimport './index.css'\nimport TidalComponent from '../../renderers/TidalCycles/dom'\nimport HydraComponent from \"../../renderers/Hydra/dom\";\n\nclass Render extends Component {\n\n    constructor(props) {\n        super(props);\n        this.hydraRef = React.createRef();\n        this.hydraCode = Renderers.Hydra.getCode(this.props);\n        this.hydraMacros = Renderers.Hydra.getMacros(this.props);\n        // this.tidalCode = Renderers.TidalCycles.getCode();\n    }\n\n    componentDidMount() {\n        this.props.globalActions.connect(window.location.hostname, this.props.connection.port);\n\n        try {\n            window.hydra = new Hydra({canvas: this.hydraRef.current});\n        } catch (e) {\n            console.warn('Unable to start hydra');\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        let hydraCode = Renderers.Hydra.getCode(this.props);\n        let hydraMacros = Renderers.Hydra.getMacros(this.props);\n\n\n        if (hydraMacros!== this.hydraMacros){\n            try {\n                eval(hydraMacros);\n\n            } catch (e) {\n                console.warn('Index Error', e);\n            }\n            this.hydraMacros =hydraMacros\n        }\n\n        if (hydraCode !== this.hydraCode) {\n            try {\n                eval(hydraCode);\n            } catch (e) {\n                console.warn('Index Error', e);\n            }\n            this.hydraCode = hydraCode;\n        }\n\n    }\n\n    render() {\n        return (\n            <div style={{backgroundColor:'black',width:'100%',height:'100%'}}>\n                <div className={'Render'}>\n                    <TidalComponent {...this.props}/>\n                    <HydraComponent {...this.props}/>\n                </div>\n                <canvas id={'HydraCanvas'} ref={this.hydraRef}/>\n            </div>\n        )\n    }\n}\n\nexport default Render;","import React, {Component} from \"react\";\nimport {EffectsToCode} from './index'\nimport StemEditor from \"../../components/StemEditor\";\nimport {throttle} from 'lodash'\nimport CodeWriter from \"../../components/util/CodeWriter\";\nimport CodeEditor from \"../../components/CodeEditor\";\n\nexport default class TidalComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.ref = React.createRef();\n        this.state = {\n            fontSize: 36,\n            isCorrectSize: true\n        }\n        this.justMinimized = false;\n        // this.componentDidUpdate = throttle(this.componentDidUpdate.bind(this),100,{leading:false, trailing:true})\n        this.triggerResize = throttle(this.triggerResize.bind(this), 2, {leading: false, trailing: true})\n    }\n\n    // componentDidUpdate(prevProps, prevState, snapshot) {\n        // const diff = this.ref.current.scrollHeight - this.ref.current.clientHeight;\n        // const percent = diff / this.ref.current.clientHeight\n        //\n        // if (percent > 0) {\n        //     this.justMinimized = true;\n        //     this.setState({fontSize: this.state.fontSize - 1})\n        // } else {\n        //     let childHeights = 0;\n        //     this.ref.current.childNodes.forEach(x => {\n        //         childHeights += x.clientHeight\n        //     });\n        //     console.log(childHeights / this.ref.current.clientHeight)\n        //     if (childHeights / this.ref.current.clientHeight < 0.9 && childHeights !== 0 && !this.justMinimized) {\n        //         this.justMinimized = false;\n        //         this.setState({fontSize: this.state.fontSize + 1})\n        //     }\n        //     this.justMinimized = false;\n        // }\n        // this.triggerResize()\n    // }\n\n    triggerResize() {\n        const diff = this.ref.current.scrollHeight - this.ref.current.clientHeight;\n        const percent = diff / this.ref.current.clientHeight\n\n        if (percent > 0) {\n            this.justMinimized = true;\n            this.setState({fontSize: this.state.fontSize - 1})\n            this.triggerResize()\n        } else {\n            let childHeights = 0;\n            this.ref.current.childNodes.forEach(x => {\n                childHeights += x.clientHeight\n            });\n            console.log(childHeights / this.ref.current.clientHeight)\n            if (childHeights / this.ref.current.clientHeight < 0.95 && childHeights !== 0 && !this.justMinimized) {\n                this.justMinimized = false;\n                this.setState({fontSize: this.state.fontSize + 1})\n                this.triggerResize()\n            }\n            this.justMinimized = false;\n        }\n    }\n\n    render() {\n        let lines = Object.keys(this.props.tracks).map(x => {\n            // return trackToDom(this.props, this.props.tracks[x], x)\n            return trackToDom(this.props, this.props.tracks[x], x, this.triggerResize.bind(this))\n        });\n\n        return (\n            <div style={{fontSize: this.state.fontSize}} ref={this.ref} className={'code'}>\n                {lines}\n            </div>\n        )\n    }\n}\n\nfunction trackToDom(state, track, id, triggerResize) {\n    let stemsDom = [];\n    track.stems.forEach(stemId => {\n        let stem = state.stems[stemId];\n        if (stem.on && stem.code !== '' && stem.language === 'TidalCycles') {\n            stemsDom.push(<StemToDom key={`stem_${stemId}`} state={state} stem={stem} id={stemId}\n                                     triggerResize={triggerResize}/>)\n        }\n    });\n    if (stemsDom.length < 1) {\n        return null\n    }\n    ;\n\n    let effectsOn = [];\n    track.effects.forEach(e => {\n        let effect = state.effects[e];\n        if (effect.on) {\n            effectsOn.push(effectToDom(state, effect, e, triggerResize));\n        }\n    });\n    if (track.stems.filter(x => {\n        return state.stems[x].on\n    }).length > 0) {\n    }\n    return (\n        <div key={`track_${id}`} id={`track_${id}`} className={'track'}>\n            {\n                effectsOn\n            }\n            $\n            {\n                stemsDom\n            }\n        </div>\n    )\n\n    // let effects = effectsOn.join(\" $ \");\n    // return `${effectsCode} $ stack [${stemsCode}]`;\n}\n\n\nclass StemToDom extends Component {\n\n    constructor(props) {\n        super(props);\n        this.ref = React.createRef();\n    }\n\n    render() {\n        let {state, stem, id} = this.props;\n        if (stem.code === '') {\n            return null\n        }\n        let effectsOn = [];\n        stem.effects.forEach(e => {\n            let effect = state.effects[e];\n            if (effect.on) {\n                effectsOn.push(effectToDom(state, effect, e, this.props.triggerResize));\n            }\n        });\n        return (\n            <span ref={this.ref} id={`stem_${id}`} key={`stem_${id}`} className={'stem justAdded'}>\n                {effectsOn}\n                $\n                <CodeWriter text={this.props.stem.code} rate={20} triggerResize={this.props.triggerResize}/>\n            </span>\n        )\n    }\n}\n\nfunction effectToDom(state, effect, id, triggerResize) {\n    const effectCode = EffectsToCode[effect.type](effect) + \" \";\n    return (\n        <CodeWriter\n            className={'effect'}\n            rate={20}\n            triggerResize={triggerResize}\n            text={effectCode === '(|* gain 1) ' ? '' : effectCode}\n        />\n    )\n    // return <span id={`effect_${id}`} key={`effect_${id}`}\n    //              className={'effect'}>{effectCode === '(|* gain 1) ' ? '' : effectCode}</span>\n}","import React, {Component, useDebugValue} from 'react';\nimport \"./index.css\";\nimport {effectToCode, stemToCode} from './index'\nimport {throttle} from \"lodash\";\nimport CodeWriter from \"../../components/util/CodeWriter\";\n\nclass HydraComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.ref = React.createRef();\n        this.state = {\n            fontSize: 36,\n            isCorrectSize: true\n        }\n        this.justMinimized = false;\n        // this.componentDidUpdate = throttle(this.componentDidUpdate.bind(this),100,{leading:false, trailing:true})\n        this.triggerResize = throttle(this.triggerResize.bind(this), 2, {leading: false, trailing: true})\n    }\n\n\n    triggerResize() {\n        const diff = this.ref.current.scrollHeight - this.ref.current.clientHeight;\n        const percent = diff / this.ref.current.clientHeight\n\n        if (percent > 0) {\n            this.justMinimized = true;\n            this.setState({fontSize: this.state.fontSize - 1})\n            this.triggerResize()\n        } else {\n            let childHeights = 0;\n            this.ref.current.childNodes.forEach(x => {\n                childHeights += x.clientHeight\n            });\n            console.log(childHeights / this.ref.current.clientHeight)\n            if (childHeights / this.ref.current.clientHeight < 0.95 && childHeights !== 0 && !this.justMinimized) {\n                this.justMinimized = false;\n                this.setState({fontSize: this.state.fontSize + 1})\n                this.triggerResize()\n            }\n            this.justMinimized = false;\n        }\n    }\n\n    render() {\n        let lines = Object.keys(this.props.tracks).map(x => {\n            return (\n                <TrackToDom\n                    key={`track_${x}`}\n                    state={this.props}\n                    track={this.props.tracks[x]}\n                    id={x}\n                    triggerResize={this.triggerResize.bind(this)}\n                />\n            )\n        });\n\n        return (\n            <div style={{fontSize: this.state.fontSize}} ref={this.ref} className={'code'}>\n                {lines}\n            </div>\n        )\n    }\n}\n\nexport default HydraComponent;\n\n\nclass TrackToDom extends Component {\n    render() {\n        // const text = trackToCode(this.props.state, this.props.track)\n        const stems = this.props.track.stems.map(stemId => {\n            let stem = this.props.state.stems[stemId]\n            if (stem.on && stem.language === 'Hydra' && stem.code.trim() !== '') {\n                return <StemToDom state={this.props.state} triggerResize={this.props.triggerResize} stem={stem}\n                                  id={stemId} key={`stem_${stemId}`}/>\n            }\n            return null\n        }).filter(x=>x);\n        if (stems.length<1){\n            return null\n        }\n        const effects = this.props.track.effects.map(effectId => {\n            let effect = this.props.state.effects[effectId]\n            if (effect.on && effectToCode(effect).trim() !== '') {\n                return <EffectToDom state={this.props.state} triggerResize={this.props.triggerResize} effect={effect}\n                                    id={effectId} key={`effect_${effectId}`}/>\n            }\n        });\n        return (\n            <div className={'track'} id={`track_${this.props.id}`} key={`track_${this.props.id}`}>\n                {stems}\n                {/*{effects}*/}\n            </div>\n        );\n    }\n}\n\nclass StemToDom extends Component {\n    render() {\n\n        return (\n            <CodeWriter\n                text={this.props.stem.code}\n                rate={20}\n                triggerResize={this.props.triggerResize}\n            />\n        )\n    }\n}\n\nclass EffectToDom extends Component {\n    render() {\n        return (\n            <CodeWriter\n                text={effectToCode(this.props.effect)}\n                rate={20}\n                triggerResize={this.props.triggerResize}\n            />\n        )\n    }\n}","import React, {Component} from 'react'\nimport './index.css'\n\nexport default class Stem extends Component {\n    constructor(props) {\n        super(props);\n        this.holdTime = new Date();\n        this.dragToggle = false;\n        this.ref = React.createRef();\n        this.timeout = null;\n        this.touchMoveCount = 0;\n    }\n\n    flash(){\n        this.ref.current.classList.add('flash');\n        // setTimeout(()=>{this.ref.current.classList},500)\n        setTimeout(()=>{this.ref.current.classList.remove('flash')},500)\n    }\n\n    onMouseDown() {\n        this.timeout = setTimeout(()=>{\n            this.openInFlyout();\n        },500);\n        this.holdTime = new Date();\n        this.dragToggle = false;\n    }\n\n    onMouseUp(e) {\n        e.preventDefault();\n        this.touchMoveCount = 0;\n        let now = new Date();\n        if(!this.dragToggle){\n            if (now - this.holdTime < 500) {\n                clearTimeout(this.timeout);\n                if (e.shiftKey) {\n                    this.props.globalActions.stemUpdate(this.props.id, {selected: !this.props.selected});\n                } else {\n                    if (e.button) {\n                        e.preventDefault();\n                    } else {\n                        this.toggle()\n                    }\n                }\n            }\n        }\n\n        this.holdTime = now;\n        this.dragToggle = false;\n    }\n\n    onTouchMove(e){\n        this.touchMoveCount++;\n        e.preventDefault();\n        if(this.touchMoveCount>5){\n            clearTimeout(this.timeout);\n            this.dragToggle = true;\n        }\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.timeout);\n    }\n\n    render() {\n        return (\n            <div\n                ref={this.ref}\n                className={'Stem noselect' +' '+(this.props.highlight?'highlight':'')}\n                tabIndex={0}\n                onKeyUp={this.onKeyUp.bind(this)}\n                onTouchStart={this.onMouseDown.bind(this)}\n                onTouchEnd={this.onMouseUp.bind(this)}\n                onTouchMove={this.onTouchMove.bind(this)}\n                onMouseDown={this.onMouseDown.bind(this)}\n                onMouseUp={this.onMouseUp.bind(this)}\n\n                onContextMenu={(x) => {\n                    x.preventDefault();\n                    this.openInFlyout()\n                }}\n            >\n                <div className={'stemButton' + (this.props.selected ? ' selected' : '') + (this.props.on ? ' on ' : ' off ')}>\n                    <div className=\"verticalCenter\" style={{width: '100%'}}>\n                        {this.props.name}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    onKeyUp(e) {\n        if (e.ctrlKey && e.key === 'v') {\n            this.props.globalActions.stemPaste(this.props.id);\n        }\n    }\n\n    onTouchStart() {\n        this.toggle();\n    }\n\n    mouseUp(e) {\n        if (e.shiftKey) {\n            this.props.globalActions.stemUpdate(this.props.id, {selected: !this.props.selected});\n        } else {\n            if (e.button) {\n                e.preventDefault();\n            } else {\n                this.toggle()\n            }\n        }\n    }\n\n    openInFlyout() {\n        this.props.globalActions.stemUpdate(this.props.id, {open: true});\n    }\n\n    toggle() {\n        this.props.globalActions.stemUpdate(this.props.id, {on: !this.props.on});\n    }\n}\n","import Stem from '../components/Stem'\nimport {connect} from 'react-redux';\nimport GlobalActions from \"../actions/GlobalActions\";\n\nconst mapStateToProps = (state,ownProps) => {\n\n  // important for ownProps.id to refer to id of this stem\n  return {...state.stems[ownProps.id],...ownProps};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        globalActions: GlobalActions(dispatch)\n    }\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Stem);\n","import React , {Component} from \"react\";\nimport './index.css'\n\nexport default class PlusButton extends Component {\n\n    render() {\n        return (\n            <div {...this.props} className={\"plusButton\"}>\n                <div>+</div>\n            </div>\n        )\n    }\n\n}","import React, {Component} from 'react'\nimport './index.css'\nimport Stem from '../../containers/Stem';\nimport PlusButton from \"../util/PlusButton/PlusButton\";\nimport Effect from \"../../containers/Effect\";\n\n\nexport default class Track extends Component {\n    stemToComponent(id, row) {\n\n        let highlight = row < (this.props.midi.top+this.props.midi.rows) && row >= this.props.midi.top && this.props.index< (this.props.midi.left+this.props.midi.columns) && this.props.index >= this.props.midi.left;\n        return <Stem key={id}\n                     id={id}\n                     highlight={highlight}\n        />\n    }\n\n    render() {\n        let stems = this.props.stems.map(this.stemToComponent.bind(this));\n        return (\n            <div className='Track'>\n                <input onChange={this.titleChange.bind(this)} value={this.props.name}/>\n                <div style={{position:'relative',height:'100%'}}>\n                    <div className={'stems'}>\n                        {stems}\n                        <div style={{padding:'5px'}}>\n                            <PlusButton onClick={this.addStem.bind(this)}/>\n                        </div>\n                    </div>\n                    <div className={'effects'}>\n                        <div className={'launchButton'}>\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"var(--font-color-dark)\" width=\"24\" height=\"24\"\n                                 viewBox=\"0 0 24 24\">\n                                <path d=\"M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z\"/>\n                                <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n                            </svg>\n                        </div>\n                        <Effect isVertical noToggle updateEffect={this.updateEffect.bind(this)}\n                                id={this.props.effects[0]}/>\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n\n\n    updateEffect(gainEffect) {\n        this.props.globalActions.trackUpdate(this.props.id, {effects: [gainEffect]});\n    }\n\n    addStem() {\n        this.props.globalActions.trackAddStem(this.props.id);\n    }\n\n    titleChange(e) {\n        this.props.globalActions.trackUpdate(this.props.id, {name: e.target.value});\n    }\n\n}\n","import Track from '../components/Track'\nimport {connect} from 'react-redux';\nimport GlobalActions from \"../actions/GlobalActions\";\n\nconst mapStateToProps = (state,ownProps) => {\n  // important for ownProps.id to refer to id of this track\n    let index = Object.keys(state.tracks).findIndex(x=> x===ownProps.id);\n    let track = state.tracks[ownProps.id];\n  return {...track,...ownProps,midi:state.midi, index}\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        globalActions: GlobalActions(dispatch)\n    }\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Track);\n","import React, { Component } from 'react';\nimport Track from '../../containers/Track';\nimport './index.css';\nimport PlusButton from \"../util/PlusButton/PlusButton\";\n\nexport default class LaunchSpace extends Component {\n\n    trackToDom(x){\n        x.globalActions = this.props.globalActions;\n        return (<Track key={x.id} {...x} />)\n    }\n\n    trackIdToComponent(id){\n      return <Track key={id} id={id}/>\n        // let track = this.populateTrack(this.props, this.props.tracks[id]);\n        // let stems = {};\n        // track.stems.forEach(x=>{stems[x] = this.props.stems[x]});\n        // let effects = {};track.effects.map(x=>{return this.props.effects[x]}).concat(stems.map(x=>{return this.props.effects[x]})).flat();\n        // let props = {\n        //     stems,\n        //     effects,\n        //     key:id\n        // }\n    }\n\n    render(){\n\n        let tracks = Object.keys(this.props.tracks).map(this.trackIdToComponent.bind(this));\n\n        return (\n            <div className=\"LaunchSpace\" style={this.props.style} tabIndex=\"1\" onKeyUp={this.onKeyUp.bind(this)}>\n                {tracks}\n                <PlusButton onClick={this.newTrack.bind(this)} style={{display:'inline-block',top:'0px',width:'50px',minWidth:'50px',height:'30px',margin:'5px'}}/>\n            </div>\n        )\n    }\n\n    onKeyUp(e){\n        if(e.key.toLowerCase()==='delete'){\n            let ids = Object.keys(this.props.tracks).map(x=>{return this.props.tracks[x].stems.map(y=>{return {trackId:x,stemId:y,selected:this.props.stems[y].selected}})}).flat();\n            let selectedIds = ids.filter(x=>x.selected);\n            selectedIds.forEach(x=>{this.props.globalActions.trackDeleteStem(x.trackId,x.stemId)});\n        }else if (e.ctrlKey && e.key.toLowerCase()==='c'){\n            this.props.globalActions.stemCopy();\n        } else if (e.key.toLowerCase()==='escape'){\n            let selectedStems = Object.keys(this.props.stems).filter(x=>{return this.props.stems[x].selected});\n            selectedStems.forEach(x=>this.props.globalActions.stemUpdate(x,{selected:false}));\n        }\n    }\n\n    newTrack(){\n        this.props.globalActions.trackAdd();\n    }\n\n}\n","import LaunchSpace from '../components/LaunchSpace'\nimport GlobalActions from \"../actions/GlobalActions\";\nimport {connect} from 'react-redux';\n\nexport const mapStateToProps = (state,props) => {\n  return state;\n    // let newState = {\n    //     connection:state.connection,\n    //     master:state.master,\n    //     tracks:[]\n    // };\n    //\n    // newState.tracks = Object.keys(Object.assign({},state.tracks)).map((x)=>{return populateTrack(state, x)});\n    // return newState;\n    // // Object.keys(state.tracks).forEach(trackId=>{\n    // //     let stems = state.tracks[trackId].stems.map(x=>{return state.stems[x]});\n    // // });\n};\n\n// function populateTrack(state, trackId){\n//     let track = state.tracks[trackId];\n//     track.id = trackId\n//     // let track = state.tracks[trackId];\n//     track.stems = track.stems.map(x=>{return populateStem(state, x)});\n//     //TODO temp hack\n//     // track.gainEffect = track.effects.map(x=>{return state.effects[x]});\n//     track.gainEffect = state.effects[track.effects[0]];\n//     return track\n// }\n//\n// function populateStem(state, stemId){\n//     let stem = state.stems[stemId];\n//     debugger;\n//     stem.id = stemId\n//     stem.effects = stem.effects.map(id=>{return populateEffect(state, id)});\n//     return stem\n// }\n//\n// function populateEffect(state, effectId){\n//     let effect = state.effects[effectId];\n//     effect.id = effectId;\n//     return effect;\n// }\n\n// function populateTrack(state, trackId){\n//     let track = Object.assign({},state.tracks[trackId]);\n//     // let track = state.tracks[trackId];\n//     track.stems = track.stems.map(x=>{return populateStem(state, x)});\n//     //TODO temp hack\n//     // track.gainEffect = track.effects.map(x=>{return state.effects[x]});\n//     track.gainEffect = state.effects[track.effects[0]];\n//     return track\n// }\n//\n// function populateStem(state, stemId){\n//     let stem = Object.assign({},state.stems[stemId]);\n//     // let stem = state.stems[stemId];\n//     stem.id = stemId;\n//     stem.effects = stem.effects.map(id=>{return populateEffect(state, id)});\n//     return stem\n// }\n//\n// function populateEffect(state, effectId){\n//     let effect = Object.assign({},state.effects[effectId]);\n//     // let effect = state.effects[effectId];\n//     effect.id = effectId;\n//     return effect;\n// }\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      globalActions: GlobalActions(dispatch)\n  }\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(LaunchSpace);\n","import React, {Component} from 'react';\nimport CodeEditor from \"../../CodeEditor\";\nimport Effect from \"../../../containers/Effect\";\nimport EffectComponent from \"../../Effect\";\nimport Model from \"../../../model\";\nimport EffectCreator from \"../../Effect/EffectCreator\";\n\nclass LanguageControls extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {};\n    }\n\n    changeTempo(id, effect) {\n        let val = this.props\n        val.properties.tempo = effect.properties.value;\n        this.props.globalActions.masterUpdate(Model.Languages.TidalCycles, val);\n    }\n\n\n    getLanguageSpecific() {\n        switch (this.props.language) {\n            case Model.Languages.TidalCycles:\n                let e = {\n                    language: \"TidalCycles\", on: true,\n                    properties: {\n                        code: 'Tempo',\n                        max: 300,\n                        min: 0,\n                        operator: \"\",\n                        scale: \"linear\",\n                        step: 0.01,\n                        value: this.props.properties.tempo\n                    },\n                    globalActions:{effectUpdate:this.changeTempo.bind(this)},\n                    noToggle: true,\n                    key: 'tempo',\n                    type:\"SLIDER\",\n                    updateEffect: this.changeTempo.bind(this),\n                }\n\n                return [\n                    <CodeEditor\n                        key={'tidalEditorMain'}\n                        onChange={(macros) => {\n                            this.props.globalActions.masterUpdate(this.props.language, {macros});\n                        }}\n                        onChangeLive={(bootScriptLive) => {\n                            this.setState({bootScriptLive})\n                        }}\n                        code={this.props.macros}\n                        live={false}\n                    />,\n                    <EffectComponent {...e}/>\n                ]\n            case Model.Languages.Hydra:\n                return [\n                    <CodeEditor\n                        key={'HydraEditorMain'}\n                        onChange={(macros) => {\n                            this.props.globalActions.masterUpdate(this.props.language, {macros});\n                        }}\n                        onChangeLive={(bootScriptLive) => {\n                            this.setState({bootScriptLive})\n                        }}\n                        code={this.props.macros}\n                        live={false}\n                    />\n                ]\n            default:\n                console.warn('unrecognized language: ' + this.props.language)\n                return null;\n        }\n    }\n\n    newEffect(type, properties){\n        this.props.globalActions.masterAddEffect(type, this.props.language,false,properties);\n    }\n\n    updateEffect(e) {\n        this.props.globalActions.updateMasterEffect(e);\n    }\n\n    effectIdToComponent(id) {\n        return <Effect key={id} id={id} updateEffect={this.updateEffect.bind(this)}/>\n    }\n\n    render() {\n        const effects = this.props.effects.map(this.effectIdToComponent.bind(this));\n        const languageSpecific = this.getLanguageSpecific();\n        return (\n            <div className=\"LanguageControls\">\n                {languageSpecific}\n                {effects}\n                <EffectCreator onCreate={this.newEffect.bind(this)}/>\n            </div>\n        );\n    }\n}\n\nexport default LanguageControls;\n","import React, {Component} from 'react'\nimport './index.css'\nimport LanguageControls from \"./LanguageControls\";\n\nexport default class MasterEditor extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            language:Object.keys(this.props.master)[0]\n        };\n    }\n\n    languageChange(e){\n        this.setState(Object.assign({},this.state,{language:e.target.value}))\n    }\n\n    render(){\n\n        const languageOpts = Object.keys(this.props.master).map(lang=>{return <option key={lang} value={lang}>{lang}</option>});\n        return (\n            <div className={'MasterEditor'} style={this.props.style}>\n\n                <select onChange={this.languageChange.bind(this)} value={this.state.language}>\n                    {languageOpts}\n                </select>\n\n                <LanguageControls\n                    {...this.props.master[this.state.language]}\n                    language={this.state.language}\n                    globalActions={this.props.globalActions}\n                />\n            </div>\n        )\n    }\n\n    toggle(e){\n        this.props.globalActions.toggleLive(e.target.checked)\n    }\n}\n","import React, {Component} from 'react';\nimport './index.css'\nimport MasterEditor from '../MasterEditor'\nimport StemEditor from \"../StemEditor\";\n\nclass Tab extends Component {\n    render() {\n        return (\n            <div onClick={this.props.switchToTab} className={'Tab' + (this.props.selected ? '' : ' unselected')}>\n                <label>{this.props.label}</label>\n                {this.props.closeAble ?\n                    <svg onClick={this.props.closeTab} xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\"\n                         viewBox=\"0 0 18 18\">\n                        <path\n                            d=\"M14.53 4.53l-1.06-1.06L9 7.94 4.53 3.47 3.47 4.53 7.94 9l-4.47 4.47 1.06 1.06L9 10.06l4.47 4.47 1.06-1.06L10.06 9z\"/>\n                    </svg> : null}\n                {this.props.selected ? <div className='indicator'/> : null}\n            </div>\n        )\n    }\n}\n\nexport default class Flyout extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tab: 'master',\n            history: []\n        }\n    }\n\n    switchTab(tab) {\n        let opened = this.props.stems.map(x => x.id);\n        if (tab === 'master' || opened.includes(tab)) {\n            let history = this.state.history.concat([tab]);\n            this.setState({tab, history});\n        } else {\n            console.log('err tab not found')\n        }\n    }\n\n    closeTab(stemId) {\n\n        let tab, history;\n        if (this.state.history.length - 1) {\n            history = this.state.history.slice(0, -1);\n            history = history.filter(x => x !== stemId);\n            tab = history[history.length - 1] || 'master';\n        } else {\n            tab = 'master';\n            history = this.state.history;\n        }\n        this.setState({tab, history});\n        setTimeout(() => {\n            this.props.globalActions.stemUpdate(stemId, {open: false});\n            this.setState({tab, history});\n        }, 1);\n    }\n\n    render() {\n        let tabs = this.props.stems.map(x => {\n            let tab = (\n                <Tab\n                    switchToTab={() => {this.switchTab.bind(this)(x.id)}}\n                    label={x.name === '' ? '<untitled>' : x.name}\n                    key={x.id+\"_tab\"}\n                    id={x.id}\n                    selected={this.state.tab === x.id}\n                    closeAble={true}\n                    closeTab={() => {this.closeTab.bind(this)(x.id)}}\n                />);\n            let content = (<StemEditor\n                    style={{display: (this.state.tab === x.id ? 'block' : 'none')}}\n                    key={x.id+\"_editor\"}\n                    {...x}\n                    globalActions={this.props.globalActions}\n                />\n            );\n            return {tab, content}\n        });\n\n\n        return (\n            <div className='Flyout' style={this.props.style}>\n                <div className={'scrollbarHidden'}>\n                    <div className={'TabContainer'}>\n                        <Tab\n                            switchToTab={() => {\n                                this.switchTab.bind(this)('master')\n                            }}\n                            value={'master'}\n                            label='master'\n                            selected={this.state.tab === 'master'}\n                        />\n                        {tabs.map(x => x.tab)}\n                    </div>\n                </div>\n                <div className={'content'}>\n                    <MasterEditor\n                        {...this.props}\n                        value={'master'}\n                        style={{display: this.state.tab === 'master' ? 'block' : 'none'}}\n                    />\n                    {tabs.map(x => x.content)}\n                </div>\n\n            </div>\n        )\n    }\n}\n","import Flyout from '../components/Flyout'\nimport {connect} from 'react-redux';\nimport GlobalActions from \"../actions/GlobalActions\";\n// import {mapStateToProps} from \"./LaunchSpace\";\n\nconst mapStateToProps = state => {\n\n  let stems = Object.keys(state.stems).map(id=>{\n    return Object.assign({},state.stems[id], {id})\n  }).filter(x=>{return x.open});\n\n  return {\n    master:state.master,\n    connection:state.connection,\n    stems\n  }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        globalActions: GlobalActions(dispatch)\n    }\n};\n\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Flyout);\n","import React, {Component} from 'react';\nimport './index.css'\nimport CloseIcon from '@material-ui/icons/Close';\n\nclass Modal extends Component {\n    constructor(props) {\n        super(props);\n        this.ref = React.createRef();\n    }\n\n    componentDidMount() {\n        this.ref.current && this.ref.current.focus();\n    }\n\n    render() {\n        return (\n            <div ref={this.ref} className={'Modal'} onKeyUp={this.onKeyPress.bind(this)} tabIndex={2}>\n                <div className={'modalBody'}>\n                    <div className={'modalClose'} >\n                        <CloseIcon onClick={this.props.onClose}/>\n                    </div>\n                    <div className={'modalContent'}>\n                    {this.props.children}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    onKeyPress(e){\n        if (e.key.toLowerCase()==='escape'){\n            this.props.onClose();\n        }\n    }\n}\n\nexport default Modal;","import React, {Component} from 'react';\nimport {TextField} from \"@material-ui/core\";\nimport debounce from \"lodash/debounce\";\n\nclass ConnectionSettings extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            connection:{...this.props},\n        };\n        this.connect = debounce(()=>{\n            this.props.globalActions.connect(this.state.connection.url, this.state.connection.port)\n        },2000);\n    }\n\n\n    render() {\n        return (\n            <div className={'ConnectionSettings'}>\n                <div>\n                    <TextField\n                        style={{width:'50%',marginLeft:'5px'}}\n                        label=\"URL\"\n                        value={this.state.connection.url}\n                        onChange={(e)=>{\n                            let connection = this.state.connection;\n                            connection.url = e.target.value;\n                            this.setState({connection});\n                            this.connect();\n                        }}\n                        margin=\"normal\"\n                    />\n                    <TextField\n                        style={{width:'50%',marginLeft:'5px',maxWidth:'100px'}}\n                        label=\"Port\"\n                        type='number'\n                        value={this.state.connection.port}\n                        onChange={(e)=>{\n                            let connection = this.state.connection;\n                            connection.port = parseInt(e.target.value);\n                            this.setState({connection});\n                            this.connect();\n                        }}\n                        margin=\"normal\"\n                    />\n                    <button style={{width:'100%'}} onClick={this.connect}>reconnect</button>\n                    <button style={{width:'100%'}} onClick={this.props.globalActions.pushState}>push state to other clients</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ConnectionSettings;","import {connect} from 'react-redux';\nimport GlobalActions from \"../actions/GlobalActions\";\nimport ConnectionSettings from \"../components/ConnectionSettings\";\n\nconst mapStateToProps = (state,ownProps) => {\n  // important for ownProps.id to refer to id of this stem\n  return {...state.connection,...ownProps}\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        globalActions: GlobalActions(dispatch)\n    }\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(ConnectionSettings);\n","import React, {Component} from \"react\";\nimport './index.css'\n\nclass TextColorPicker extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            value:this.props.value\n        }\n    }\n\n    onChange(e){\n        this.setState({value:e.target.value})\n    }\n\n    render() {\n        return (\n            <div className={'TextColorPicker'}>\n                <input type={'text'} value={this.state.value} onChange={this.onChange.bind(this)}/>\n                <div style={{backgroundColor: this.state.value}}>&nbsp;</div>\n            </div>\n        )\n    }\n}\n\nexport default TextColorPicker;","import React, {Component} from 'react';\nimport debounce from \"lodash/debounce\";\nimport './index.css'\nimport TextColorPicker from \"../util/TextColorPicker\";\n\nconst SettingsWidgetMap = {\n    '--bg-image': (props) => <input onChange={props.onChange} value={props.value} type='text'/>,\n    '--border-radius': (props) => <input onChange={props.onChange} value={props.value} type=\"text\"/>,\n    '--stem-on': (props) => <input onChange={props.onChange} value={props.value} type=\"text\"/>,\n    '--stem-off': (props) => <input onChange={props.onChange} value={props.value} type=\"text\"/>,\n    '--font-family': (props) => <input onChange={props.onChange} value={props.value} type=\"text\"/>,\n    '--scrollbar-width': (props) => <input onChange={props.onChange} value={props.value} type=\"text\"/>,\n    '--launchspace-bg-color': (props) => <TextColorPicker onChange={props.onChange} value={props.value}/>,\n    '--stem-editor-color': (props) => <TextColorPicker onChange={props.onChange} value={props.value}/>,\n    '--font-color-dark': (props) => <TextColorPicker onChange={props.onChange} value={props.value}/>,\n    '--font-color-light': (props) => <TextColorPicker onChange={props.onChange} value={props.value}/>,\n    '--track-border-color': (props) => <TextColorPicker onChange={props.onChange} value={props.value}/>,\n    '--select-color': (props) => <TextColorPicker onChange={props.onChange} value={props.value}/>,\n    '--settings-background-color': (props) => <TextColorPicker onChange={props.onChange} value={props.value}/>,\n    '--settings-font-color': (props) => <TextColorPicker onChange={props.onChange} value={props.value}/>,\n    '--midi-background-color': (props) => <TextColorPicker onChange={props.onChange} value={props.value}/>\n};\n\n\nclass Settings extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            connection: {...this.props},\n            styleForm:{}\n        };\n        this.connect = debounce(() => {\n            this.props.globalActions.connect(this.state.connection.url, this.state.connection.port)\n        }, 2000);\n    }\n\n    updateStyleForm(e){\n        this.setState({\n            styleForm: Object.assign({}, this.state.styleForm, {[e.target.name]:e.target.value})\n        })\n    }\n\n    updateStyle(){\n        this.props.globalActions.settingsUpdateStyle(this.state.styleForm)\n    }\n\n    render() {\n        let widgets = Object.keys(SettingsWidgetMap).map(x => {\n            let Widget = SettingsWidgetMap[x]\n            return (\n                <div key={x}>\n                    <div>{x}</div>\n                    <Widget onChange={this.updateStyleForm.bind(this)} value={this.props.style[x]}/>\n                </div>\n            )\n        });\n\n        return (\n            <div id={'Settings'}>\n                <div className={'Setting'}>\n                    <div className=\"style\">\n                        <h1>Style</h1>\n                        {widgets}\n                        <button onClick={this.updateStyle.bind(this)}>Apply</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Settings;","import {connect} from 'react-redux';\nimport GlobalActions from \"../actions/GlobalActions\";\nimport Settings from \"../components/Settings\";\n\nconst mapStateToProps = (state,ownProps) => {\n  return {...state.settings,...ownProps}\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        globalActions: GlobalActions(dispatch)\n    }\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Settings);\n","import React, {Component} from 'react';\nimport './index.css'\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport SaveIcon from '@material-ui/icons/Save';\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\nimport OpenInBrowserIcon from '@material-ui/icons/OpenInBrowser';\nimport SignalCellularAltIcon from '@material-ui/icons/SignalCellularAlt';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport Modal from \"../Modal\";\nimport HelpIcon from '@material-ui/icons/Help';\nimport ConnectionSettings from \"../../containers/ConnectionSettings\";\nimport Settings from '../../containers/Settings'\n\nconst modalContent = {\n    'settings': <Settings/>,\n    'connections':(<ConnectionSettings/>),\n    'help':(<a href=\"https://github.com/JamieBeverley/DeadCode/blob/master/README.md\" target=\"_blank\">See docs here</a>)\n};\n\n\nclass Header extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {modal:null};\n    }\n\n    render() {\n        let modal = this.getModal(this.state.modal);\n\n        return (\n            <div className={'Header'}>\n                <SettingsIcon onClick={this.openSettings.bind(this)}/>\n                <SaveIcon onClick={this.props.globalActions.save}/>\n                <OpenInBrowserIcon onClick={this.props.globalActions.load}/>\n                <SaveAltIcon onClick={this.props.globalActions.download}/>\n                <FolderIcon onClick={()=>{this.props.globalActions.open()}}/>\n                <SignalCellularAltIcon onClick={this.openConnections.bind(this)} style={{fill:this.props.connection.isConnected?'green':'red'}}/>\n                <HelpIcon onClick={this.openHelp.bind(this)}/>\n                {modal}\n            </div>\n        );\n    }\n\n    closeModal(){\n        this.setState({modal:false});\n    }\n\n    getModal(type){\n        const content = modalContent[type]\n        if(!content){\n            return null\n        }\n        return <Modal onClose={this.closeModal.bind(this)}>\n            {content}\n        </Modal>\n    }\n\n    openSettings(){\n        this.setState({modal:'settings'});\n    }\n\n    openConnections(){\n        this.setState({modal:'connections'});\n    }\n\n    openHelp(){\n        this.setState({modal:'help'});\n    }\n\n}\n\nexport default Header;","import {connect} from 'react-redux';\nimport GlobalActions from \"../actions/GlobalActions\";\nimport Header from \"../components/Header\";\n\nconst mapStateToProps = (state,ownProps) => {\n  // important for ownProps.id to refer to id of this stem\n  return {connection:state.connection,...ownProps}\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        globalActions: GlobalActions(dispatch)\n    }\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Header);\n","import React, {Component} from 'react'\nimport LaunchSpace from '../../containers/LaunchSpace.jsx';\nimport Flyout from '../../containers/Flyout.jsx';\nimport './index.css';\nimport Header from '../../containers/Header'\n\n// import ResizeDivider from \"../ResizeDivider\";\n\nexport default class App extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            divider: 70, //%\n            horizontalDivider: 75\n        }\n        this.appRef = React.createRef()\n    }\n\n    componentDidMount() {\n        this.props.globalActions.connect(window.location.hostname, this.props.connection.port);\n    }\n\n    render() {\n        return (\n            <div\n                onDragOver={(e) => {\n                    e.preventDefault()\n                }}\n                ref={this.appRef} className='App' tabIndex=\"0\" onKeyDown={this.macros.bind(this)}>\n                <Header/>\n                <div style={{height:'100%'}}>\n                    <LaunchSpace style={{width: this.state.divider + \"%\"}}/>\n                    <div id={\"rightPanel\"} style={{width: 100 - this.state.divider + \"%\"}}>\n                        <Flyout style={{height: this.state.horizontalDivider + \"%\"}}/>\n                        <iframe style={{height:(100-this.state.horizontalDivider) + \"%\",border:'1pt solid var(--stem-on)',borderBottom:'none',borderRight:'none'}} src={\"/render\"}/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    dividerResize(px) {\n        this.setState({divider: px * 100 / document.body.clientWidth})\n    }\n\n    dividerResizeRightPanel(px) {\n        this.setState({horizontalDivider: px * 100 / document.body.clientHeight})\n    }\n\n\n    macros(e) {\n        if (e.ctrlKey) {\n            if (e.key === 's') {\n                e.preventDefault();\n                this.props.globalActions.save();\n            } else if (e.key.toLowerCase() === \"l\") {\n                e.preventDefault();\n                if(e.shiftKey){\n                    this.props.globalActions.loadFromServer();\n                } else{\n                    this.props.globalActions.load();\n                }\n            } else if (e.key === \"d\") {\n                e.preventDefault();\n                this.props.globalActions.download();\n            } else if (e.key === 'o') {\n                e.preventDefault();\n                this.props.globalActions.open();\n            } else if (e.key === 'p'){\n                e.preventDefault();\n                this.props.globalActions.pushState();\n            }\n        }\n    }\n}","import App from '../components/App'\nimport {connect} from 'react-redux';\nimport GlobalActions from \"../actions/GlobalActions\";\n\nconst mapStateToProps = state => state;\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        globalActions: GlobalActions(dispatch)\n    }\n};\n\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(App);","import {connect} from 'react-redux';\nimport View from '../components/Render'\nimport GlobalActions from \"../actions/GlobalActions\";\n\nconst mapStateToProps = state => state\n\nconst mapDispatchToProps = dispatch => {\n    return {globalActions:GlobalActions(dispatch)}\n};\n\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(View);\n","import {render} from 'react-dom'\nimport {Provider} from 'react-redux'\nimport App from './containers/App';\nimport React from 'react';\nimport logger from 'redux-logger'\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport View from \"./containers/Render\";\nimport store from \"./store\";\nimport {addMiddleware} from 'redux-dynamic-middlewares'\n\naddMiddleware(logger);\n\n// export const store = createStore(DeadReducer, applyMiddleware(serverControl,logger));\n\n// const store = store\n\nrender(\n    (\n        <Router basename={process.env.PUBLIC_URL}>\n            <Provider store={store}>\n                <Route path=\"/\" exact component={App}/>\n                <Route path=\"/render\" exact component={View}/>\n            </Provider>\n        </Router>),\ndocument.getElementById('root')\n)"],"sourceRoot":""}