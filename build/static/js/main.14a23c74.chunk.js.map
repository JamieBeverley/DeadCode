{"version":3,"sources":["model/EffectModel.js","components/Stem/index.jsx","actions/index.js","Connection.js","actions/GlobalActions.js","containers/Stem.jsx","components/util/PlusButton/PlusButton.jsx","components/Effect/Slider/index.jsx","components/Effect/index.jsx","containers/Effect.jsx","components/Track/index.jsx","containers/Track.jsx","components/LaunchSpace/index.jsx","containers/LaunchSpace.jsx","components/CodeEditor/index.jsx","components/MasterEditor/LanguageControls/index.jsx","components/MasterEditor/index.jsx","components/StemEditor/index.jsx","components/Flyout/index.jsx","containers/Flyout.jsx","components/Render/index.jsx","containers/Render.jsx","components/App/index.jsx","containers/App.jsx","reducers/Track.js","reducers/Connection.js","reducers/Master.js","reducers/Stem.js","reducers/Effect.js","reducers/index.js","containers/AudienceRender.jsx","index.js","model/Id.js","model/MasterModel.js","model/index.js","model/StemModel.js","Renderers/Hydra/Hydra.js","Renderers/TidalCycles/index.jsx","Renderers/index.js","model/TrackModel.js","components/AudienceRender/index.jsx"],"names":["EffectModel","getNew","code","type","language","on","properties","clone","effect","propertes","Types","SLIDER","util","defaultEffects","value","operator","min","max","step","scale","Stem","props","state","id","name","holdTime","Date","className","this","selected","tabIndex","onKeyUp","bind","onMouseUp","mouseDown","onContextMenu","x","preventDefault","openInFlyout","style","width","e","ctrlKey","key","globalActions","stemPaste","toggle","shiftKey","stemUpdate","button","open","Component","ActionTypes","obj","forEach","capitalSnake","s","split","map","slice","length","toLowerCase","join","camel","createAction","Actions","Connection","host","window","location","hostname","port","onOpen","onClose","onErr","ws","close","WebSocket","MozWebSocket","isOpen","onopen","console","log","onerror","warn","onclose","data","send","JSON","stringify","getPosition","stemId","track","Object","keys","tracks","findIndex","stems","includes","stem","GlobalActions","dispatch","connect","url","isConnected","onError","init","stemCopy","store","getState","items","filter","copy","pastePos","anchorPos","diffPos","sId","cpPos","newPos","targetTrackId","trackAddStem","targetStemId","save","localStorage","setItem","load","newState","getItem","parse","Id","LOAD","download","dataStr","encodeURIComponent","anchor","document","createElement","setAttribute","click","DOWNLOAD","masterUpdate","stemDeleteEffect","effectId","stemAddEffect","new","trackUpdate","trackId","trackDeleteStem","StemModel","trackDeleteEffect","trackAddEffect","trackAdd","opt_language","TrackModel","trackDelete","effectUpdate","ownProps","PlusButton","SliderEffect","sliderValue","toSliderScale","range","Math","pow","round","isVertical","renderVertical","renderHorizontal","newValue","parseFloat","target","checked","noToggle","Switch","color","onChange","Grid","container","spacing","alignItems","item","xs","setState","fromSliderScale","handleSliderChange","Input","margin","persist","handleInputChange","inputProps","orientation","textAlign","Effect","effects","Track","stemToComponent","titleChange","onClick","addStem","xmlns","fill","height","viewBox","d","updateEffect","gainEffect","LaunchSpace","trackIdToComponent","newTrack","display","top","minWidth","y","flat","CodeEditor","updateCode","debounce","flashTimeout","onChangeLive","live","Button","disabled","variant","flash","onKeyPress","clearTimeout","setTimeout","LanguageControls","val","tempo","Model","Languages","TidalCycles","changeTempo","macros","updateMaster","bootScriptLive","Hydra","updateMasterEffect","effectIdToComponent","languageSpecific","getLanguageSpecific","MasterEditor","connection","master","newEffect","assign","languageOpts","lang","languageChange","border","TextField","marginLeft","label","maxWidth","parseInt","trailing","toggleLive","StemEditor","_updateCode","textAreaRef","React","createRef","backgroundColor","updateName","handleLanguageChange","maxHeight","marginTop","delete","current","classList","add","remove","removeStem","newEffects","Tab","switchToTab","closeAble","closeTab","Flyout","tab","history","opened","concat","tabs","switchTab","content","Render","iframeRef","tidalCycles","hydra","poppedOut","nextProps","nextState","nextContext","tidal","Renderers","getCode","sendCode","getTempoCode","tidalCode","contentWindow","msg","postMessage","iframe","push","App","divider","horizontalDivider","appRef","onDragOver","ref","onKeyDown","px","body","clientWidth","clientHeight","openFile","TrackReducer","action","payload","ConnectionReducer","MasterReducer","newLang","StemReducer","EffectReducer","CopyReducer","createStore","defaultState","applyMiddleware","logger","render","path","exact","component","getElementById","index","getMaxId","ids","i","MasterModel","j","mainEffectId","fullState","mixMethod","tracksCode","trackToCode","trackCode","blendAmt","getAudienceDom","effectToCodeFuncs","effectToCode","stemsCode","stemToCode","masterEffects","masterEffectsCode","trackDom","trackToDom","effectToDom","trackGain","EffectsToCode","effectsOn","effectsCode","AudienceRender","hydraRef","hydraCode","canvas","hydraDom","tidalDom","eval"],"mappings":"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","file":"static/js/main.14a23c74.chunk.js","sourcesContent":["function getNew(code, type, language, on=false, properties){\r\n    return {\r\n        code,\r\n        on,\r\n        type,\r\n        language,\r\n        properties\r\n    }\r\n};\r\n\r\nfunction clone(effect){\r\n    return {\r\n        ...effect,\r\n        propertes:{...effect.properties}\r\n    }\r\n}\r\n\r\nlet Types = {\r\n    SLIDER:\"SLIDER\"\r\n}\r\n\r\nconst defaultEffects = {\r\n    'TidalCycles': ()=>{\r\n        return [\r\n            EffectModel.getNew(\"gain\",EffectModel.Types.SLIDER,\"TidalCycles\",true,\r\n                {\r\n                    value: 1,\r\n                    operator: \"|*\",\r\n                    min: 0,\r\n                    max: 2,\r\n                    step: 0.01,\r\n                    scale: 'linear'\r\n                }),\r\n            EffectModel.getNew(\"lpf\",EffectModel.Types.SLIDER,\"TidalCycles\",false,\r\n                {\r\n                    value: 22000,\r\n                    operator: \"#\",\r\n                    min: 0,\r\n                    max: 22000,\r\n                    step: 10,\r\n                    scale: 'log'\r\n                }),\r\n            EffectModel.getNew(\"hpf\",EffectModel.Types.SLIDER,\"TidalCycles\",false,\r\n                {\r\n                    value: 0,\r\n                    operator: \"#\",\r\n                    min: 0,\r\n                    max: 22000,\r\n                    step: 10,\r\n                    scale: 'log'\r\n                }),\r\n            EffectModel.getNew(\"coarse\",EffectModel.Types.SLIDER,\"TidalCycles\",false,\r\n                {\r\n                    value: 0,\r\n                    operator: \"#\",\r\n                    min: 0,\r\n                    max: 24,\r\n                    step: 1,\r\n                    scale: 'linear'\r\n                }),\r\n            EffectModel.getNew(\"room\",EffectModel.Types.SLIDER,\"TidalCycles\",false,\r\n                {\r\n                    value: 0,\r\n                    operator: \"#\",\r\n                    min: 0,\r\n                    max: 1,\r\n                    step: 0.01,\r\n                    scale: 'linear'\r\n                }),\r\n            EffectModel.getNew(\"size\",EffectModel.Types.SLIDER,\"TidalCycles\",false,\r\n                {\r\n                    value: 0,\r\n                    operator: \"#\",\r\n                    min: 0,\r\n                    max: 1,\r\n                    step: 0.01,\r\n                    scale: 'linear'\r\n                })\r\n        ]\r\n    },\r\n    'Hydra':()=>{\r\n        return [\r\n            EffectModel.getNew(\"kaleid\",EffectModel.Types.SLIDER,\"Hydra\",false,\r\n                {\r\n                    value: 1,\r\n                    // operator: \"#\",\r\n                    min: 0,\r\n                    max: 50,\r\n                    step: 1,\r\n                    scale: 'linear'\r\n                }),\r\n            EffectModel.getNew('pixelate',EffectModel.Types.SLIDER,'Hydra',false,{\r\n                value:1,\r\n                min:0,\r\n                max:200,\r\n                step:1,\r\n                scale:'linear'\r\n            })\r\n        ]\r\n    }\r\n}\r\n\r\nconst util = {defaultEffects};\r\n\r\nconst EffectModel = {\r\n    getNew,\r\n    clone,\r\n    Types,\r\n    util\r\n}\r\n\r\nexport default EffectModel\r\n","import React, {Component} from 'react'\r\nimport './index.css'\r\n\r\nexport default class Stem extends Component{\r\n    constructor (props){\r\n        super(props);\r\n        this.state = {\r\n            id:props.id,\r\n            name:props.name,\r\n            on: props.on,\r\n            // code: props.code,\r\n            // language: props.language,\r\n            // effects: props.effects,\r\n            holdTime: new Date()\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div\r\n                className={'Stem noselect'+(this.props.on?' on ':' off ')+ (this.props.selected?'selected':'')}\r\n                // onMouseUp={this.mouseUp.bind(this)}\r\n                tabIndex={0}\r\n                onKeyUp={this.onKeyUp.bind(this)}\r\n                onMouseUp={this.mouseDown.bind(this)}\r\n                onContextMenu={(x)=>{x.preventDefault();this.openInFlyout()}}\r\n                // onTouchMove={this.onTouchStart.bind(this)}\r\n                // onTouchStart={this.toggle.bind(this)}\r\n                // onTouchEnd={this.mouseUp.bind(this)}\r\n            >\r\n                <div className=\"verticalCenter\" style={{width:'100%'}}>\r\n                    {this.props.name}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    onKeyUp(e){\r\n        if(e.ctrlKey && e.key==='v'){\r\n            this.props.globalActions.stemPaste(this.props.id);\r\n        }\r\n    }\r\n\r\n    mouseUp(){\r\n        if((new Date())-this.state.holdTime > 1000){\r\n            this.openInFlyout();\r\n        } else{\r\n            this.toggle();\r\n        }\r\n    }\r\n\r\n    onTouchStart(){\r\n        this.toggle();\r\n    }\r\n\r\n    mouseDown(e){\r\n        if(e.shiftKey){\r\n            this.props.globalActions.stemUpdate(this.props.id,{selected:!this.props.selected});\r\n        } else {\r\n            if(e.button){\r\n                e.preventDefault();\r\n            } else{\r\n                this.toggle()\r\n            }\r\n        }\r\n    }\r\n\r\n    openInFlyout(){\r\n        this.props.globalActions.stemUpdate(this.state.id, {open:true});\r\n    }\r\n\r\n    toggle(){\r\n        this.props.globalActions.stemUpdate(this.props.id, {on:!this.props.on});\r\n    }\r\n}\r\n","import {store} from '../index.js';\r\nimport {createAction} from 'redux-actions'\r\n\r\nexport const ActionTypes = [\r\n    'CONNECT',\r\n    'SAVE',\r\n    'LOAD',\r\n    'DOWNLOAD',\r\n\r\n    'MASTER_UPDATE',\r\n\r\n    'STEM_UPDATE',\r\n    'STEM_DELETE_EFFECT',\r\n    'STEM_ADD_EFFECT',\r\n    'STEM_COPY',\r\n    'STEM_PASTE',\r\n\r\n    'TRACK_UPDATE',\r\n    'TRACK_DELETE_STEM',\r\n    'TRACK_ADD_STEM',\r\n    'TRACK_DELETE_EFFECT',\r\n    'TRACK_ADD_EFFECT',\r\n    'TRACK_ADD',\r\n    'TRACK_DELETE',\r\n\r\n    'EFFECT_UPDATE'\r\n]\r\n\r\nfunction camel(capitalSnake) {\r\n    let s = capitalSnake.split(\"_\");\r\n    s = s.map(x => {\r\n        return x[0] + x.slice(1, x.length).toLowerCase();\r\n    })\r\n    s[0] = s[0].toLowerCase();\r\n    return s.join(\"\");\r\n}\r\n\r\nconst obj = {};\r\nActionTypes.forEach(x => {\r\n    obj[camel(x)] = createAction(x)\r\n});\r\nexport const Actions = obj\r\n\r\n// // MASTER ACTIONS\r\n// Actions.CONNECT = function(url, port, isConnected){\r\n//     return {type:'CONNECT', url, port, isConnected}\r\n// };\r\n//\r\n// // copy's given stems. if no argument copy's selected stems\r\n// Actions.COPY_STEMS = function(opt_stems){\r\n//     let stems = opt_stems;\r\n//     if(!stems){\r\n//         let state = store.getState();\r\n//         stems = state.tracks.map(x=>x.stems).flat().filter(x=>x.selected);\r\n//     }\r\n//     return {type:\"COPY_STEMS\", stems};\r\n// };\r\n//\r\n// Actions.PASTE_STEMS = function(trackId, stemId){\r\n//     return {type:\"PASTE_STEMS\",trackId,stemId}\r\n// };\r\n//\r\n// Actions.ADD_TRACK = function(){\r\n//     return {type:'ADD_TRACK'}\r\n// };\r\n//\r\n// Actions.REMOVE_TRACK = function(trackId){\r\n//     return {type:'ADD_TRACK', trackId};\r\n// };\r\n//\r\n// Actions.ADD_STEM = function(trackId){\r\n//     return {type:'ADD_STEM',trackId};\r\n// };\r\n//\r\n// Actions.REMOVE_STEM = function(trackId, stemId){\r\n//     return {type:'REMOVE_STEM', trackId, stemId};\r\n// };\r\n//\r\n// Actions.UPDATE_STEM = function(id, value){\r\n//     return {type:'UPDATE_STEM', id, value}\r\n// };\r\n//\r\n// Actions.ADD_STEM_EFFECT = function(trackId, stemId, effectType){\r\n//     return {type:'ADD_STEM_EFFECT', trackId, stemId, effectType}\r\n// }\r\n//\r\n// Actions.UPDATE_TRACK = function(value){\r\n//     return {type:'UPDATE_TRACK', value}\r\n// };\r\n//\r\n// Actions.UPDATE_MASTER = function(language,value){\r\n//     return {type:'UPDATE_MASTER', language, value}\r\n// }\r\n//\r\n// Actions.UPDATE_MASTER_EFFECT = function(effect){\r\n//     return {type:'UPDATE_MASTER_EFFECT', effect}\r\n// }\r\n//\r\n// Actions.UPDATE_EFFECT = function (effectId, effect){\r\n//     return {type: \"UPDATE_EFFECT\", id:effectId, value:effect}\r\n// }\r\n//\r\n// // Saving / Loading\r\n// Actions.SAVE = function(){\r\n//     return {type:'SAVE'}\r\n// };\r\n//\r\n// Actions.LOAD = function(newState){\r\n//     return {type:'LOAD',newState}\r\n// };\r\n//\r\n// Actions.DOWNLOAD = function(){\r\n//     return {type:'DOWNLOAD'}\r\n// };\r\n//\r\n// ActionTypes = {};\r\n// Object.keys(Actions).forEach(x=>{\r\n//     ActionTypes[x] = x;\r\n// });\r\n//\r\n// export default Actions\r\n","\r\nconst Connection = {};\r\n\r\nConnection.init = function(host=window.location.hostname,port=8000, onOpen=()=>{}, onClose=()=>{}, onErr=()=>{}){\r\n    if (Connection.ws){\r\n        Connection.ws.close();\r\n    }\r\n    window.WebSocket = window.WebSocket || window.MozWebSocket;\r\n\r\n    try{\r\n        Connection.ws = new WebSocket('ws://' + host + \":\" + port);\r\n        Connection.ws.isOpen = false;\r\n        Connection.ws.onopen = function open() {\r\n            Connection.ws.isOpen = true;\r\n            console.log('ws connection established');\r\n            onOpen();\r\n        }\r\n        Connection.ws.onerror = (e)=>{\r\n            console.warn(e);\r\n            onErr(e);\r\n        }\r\n        Connection.ws.onclose =  function incoming(data) {\r\n            console.warn('ws closed')\r\n            Connection.ws.isOpen = false;\r\n            onClose(data);\r\n        };\r\n    } catch (e) {\r\n        onErr();\r\n    }\r\n};\r\n\r\nConnection.sendCode = function(code){\r\n    if(!Connection.ws || !Connection.ws.isOpen){\r\n        console.warn('Connection is closed');\r\n        return;\r\n    }\r\n    Connection.ws.send(JSON.stringify({type:'eval',code}));\r\n};\r\n\r\nexport default Connection","import {Actions} from './index.js';\r\nimport {store} from '../index.js';\r\nimport Connection from \"../Connection\";\r\nimport Id from \"../model/Id\";\r\nimport EffectModel from \"../model/EffectModel\";\r\nimport StemModel from \"../model/StemModel\";\r\nimport TrackModel from \"../model/TrackModel\";\r\n\r\nfunction getPosition(state, stemId) {\r\n    let track = Object.keys(state.tracks).findIndex(x => {\r\n        return state.tracks[x].stems.includes(stemId)\r\n    });\r\n    let stem = state.tracks[Object.keys(state.tracks)[track]].stems.findIndex(x => {\r\n        return x === stemId\r\n    });\r\n    return {track, stem}\r\n}\r\n\r\nconst GlobalActions = dispatch => {\r\n    return {\r\n        connect: (url, port) => {\r\n            let onOpen = () => {\r\n                dispatch(Actions.connect({url, port, isConnected: true}))\r\n            };\r\n            let onClose = () => {\r\n                dispatch(Actions.connect({url, port, isConnected: false}))\r\n            };\r\n            let onError = onClose;\r\n            Connection.init(url, port, onOpen, onClose, onError);\r\n        },\r\n        stemCopy: () => {\r\n            let state = store.getState();\r\n            let items = Object.keys(state.stems).filter(x => {\r\n                return state.stems[x].selected\r\n            });\r\n            dispatch(Actions.stemCopy({items}))\r\n        },\r\n        stemPaste: (stemId) => {\r\n            let state = store.getState();\r\n            if (!state.copy || state.copy.items.length < 1) {\r\n                console.log('nothing copied');\r\n                return\r\n            }\r\n            let pastePos = getPosition(state, stemId);\r\n            let globalActions = GlobalActions(dispatch)\r\n            let anchorPos = getPosition(state, state.copy.items[0]);\r\n            let diffPos = {track: pastePos.track - anchorPos.track, stem: pastePos.stem - anchorPos.stem};\r\n            state.copy.items.forEach(sId => {\r\n                let cpPos = getPosition(state, sId);\r\n\r\n                let newPos = {track: cpPos.track + diffPos.track, stem: cpPos.stem + diffPos.stem};\r\n\r\n                if (newPos.track >= Object.keys(state.tracks).length) {\r\n                    console.log('too long');\r\n                    return\r\n                }\r\n\r\n                let targetTrackId = Object.keys(state.tracks)[newPos.track];\r\n\r\n                while (newPos.stem >= state.tracks[targetTrackId].stems.length) {\r\n                    globalActions.trackAddStem(targetTrackId);\r\n                    state = store.getState();\r\n                }\r\n                let targetStemId = state.tracks[targetTrackId].stems[newPos.stem];\r\n                globalActions.stemUpdate(targetStemId, state.stems[sId]);\r\n            })\r\n        },\r\n        save: () => {\r\n            window.localStorage.setItem('state', JSON.stringify(store.getState()));\r\n            console.log('saved')\r\n        },\r\n        load: () => {\r\n            let newState = window.localStorage.getItem('state');\r\n            if (newState) {\r\n                newState = JSON.parse(newState);\r\n                Id.init(newState);\r\n                dispatch(Actions.LOAD(newState));\r\n                // renderTempoChange(store.getState());\r\n                // renderBootScript(store.getState());\r\n            } else {\r\n                console.warn('Tried to load state but empty');\r\n            }\r\n        },\r\n        download: () => {\r\n            let dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(store.getState()));\r\n            let anchor = document.createElement('a');\r\n            anchor.setAttribute(\"href\", dataStr);\r\n            anchor.setAttribute(\"download\", \"dead_state.json\");\r\n            anchor.click();\r\n            dispatch(Actions.DOWNLOAD());\r\n        },\r\n        masterUpdate: (language, value) => {\r\n            dispatch(Actions.masterUpdate({language, value}));\r\n        },\r\n        stemUpdate: (stemId, value) => {\r\n            dispatch(Actions.stemUpdate({stemId, value}));\r\n        },\r\n        stemDeleteEffect: (stemId, effectId) => {\r\n            dispatch(Actions.stemDeleteEffect({stemId, effectId}));\r\n        },\r\n        stemAddEffect: (stemId, code, type, language, on, properties) => {\r\n            let effectId = Id.new();\r\n            let value = EffectModel.getNew(code, type, language, on, properties);\r\n            dispatch(Actions.stemAddEffect({stemId, effectId, value}));\r\n        },\r\n        trackUpdate: (trackId, value) => {\r\n            dispatch(Actions.trackUpdate({trackId, value}));\r\n        },\r\n        trackDeleteStem: (trackId, stemId) => {\r\n            dispatch(Actions.trackDeleteStem({trackId, stemId}));\r\n        },\r\n        // TODO: stuff like this would probably be better as sagas\r\n        trackAddStem: (trackId, language = 'TidalCycles') => {\r\n\r\n            // create stem and assign to track\r\n            let stemId = Id.new();\r\n            let stem = StemModel.getNew(language);\r\n            dispatch(Actions.trackAddStem({trackId, stemId, value: stem}));\r\n\r\n            // create default effects for the new stem\r\n            EffectModel.util.defaultEffects[language]().forEach(effect => {\r\n                GlobalActions(dispatch).stemAddEffect(stemId, effect.code, effect.type, effect.language, effect.on, effect.properties)\r\n            });\r\n        },\r\n        trackDeleteEffect: (trackId, effectId) => {\r\n            dispatch(Actions.trackDeleteEffect({trackId, effectId}));\r\n        },\r\n        trackAddEffect: (trackId) => {\r\n            let effectId = Id.new();\r\n            let value = EffectModel.getNew(\"gain\", EffectModel.Types.SLIDER, \"TidalCycles\", true,\r\n                {\r\n                    value: 1,\r\n                    operator: \"|*\",\r\n                    min: 0,\r\n                    max: 2,\r\n                    step: 0.01,\r\n                    scale: 'linear'\r\n                });\r\n            dispatch(Actions.trackAddEffect({trackId, effectId, value}));\r\n        },\r\n        trackAdd: (opt_language) => {\r\n            let value = TrackModel.getNew(opt_language);\r\n            let trackId = Id.new();\r\n            dispatch(Actions.trackAdd({trackId, value}));\r\n            let globalActions = GlobalActions(dispatch);\r\n            [0, 0, 0, 0, 0].forEach(() => {\r\n                globalActions.trackAddStem(trackId)\r\n            });\r\n            globalActions.trackAddEffect(trackId,);\r\n        },\r\n        trackDelete: (trackId) => {\r\n            let state = store.getState();\r\n            let track = state.tracks[trackId];\r\n            let globalActions = GlobalActions(dispatch)\r\n            track.stems.forEach(s => {\r\n                globalActions.trackDeleteStem(trackId, s);\r\n            });\r\n            dispatch(Actions.trackDelete({trackId}));\r\n        },\r\n        effectUpdate: (effectId, value) => {\r\n            dispatch(Actions.effectUpdate({effectId, value}));\r\n        }\r\n    }\r\n}\r\n\r\nexport default GlobalActions\r\n\r\n// const GlobalActions = dispatch=> {\r\n//     return {\r\n//         connect: (url,port)=>{\r\n//             let onOpen = ()=>{\r\n//                 dispatch(Actions.CONNECT(url,port,true));\r\n//             };\r\n//             let onClose = ()=>{dispatch(Actions.CONNECT(url,port,false))};\r\n//             let onError = onClose;\r\n//             Connection.init(url,port, onOpen, onClose, onError);\r\n//         },\r\n//         updateMaster:(language, value) =>{\r\n//             dispatch(Actions.UPDATE_MASTER(language, value));\r\n//         },\r\n//         updateMasterEffect:(effect) =>{\r\n//             dispatch(Actions.UPDATE_MASTER_EFFECT(effect));\r\n//         },\r\n//         copyStems:(x)=>{\r\n//             dispatch(Actions.COPY_STEMS(x))\r\n//         },\r\n//         pasteStems:(trackId, stemId)=>{\r\n//             dispatch(Actions.PASTE_STEMS(trackId, stemId));\r\n//             let state = store.getState();\r\n//             state.tracks.forEach(track=>{\r\n//                 track.stems.filter(x=>x.selected).forEach(stem=>{\r\n//                     dispatch(Actions.UPDATE_STEM(stem.trackId,stem.id,{selected:false}));\r\n//                 })\r\n//             })\r\n//         },\r\n//         addTrack: ()=>{\r\n//             dispatch(Actions.ADD_TRACK())\r\n//         },\r\n//         removeTrack: (trackId)=>{\r\n//             dispatch(Actions.REMOVE_TRACK(trackId))\r\n//         },\r\n//         addStem: (trackId)=>{\r\n//             dispatch(Actions.ADD_STEM(trackId))\r\n//             // renderState(store.getState());\r\n//         },\r\n//         removeStem: (trackId, stemId)=>{\r\n//             dispatch(Actions.REMOVE_STEM(trackId,stemId))\r\n//             // renderState(store.getState());\r\n//         },\r\n//         updateStem: (trackId, stemId, value)=>{\r\n//             dispatch(Actions.UPDATE_STEM(stemId, value));\r\n//         },\r\n//         openInFlyout: (trackId, stemId)=> {\r\n//             dispatch(Actions.OPEN_IN_FLYOUT(trackId,stemId))\r\n//         },\r\n//         updateTrack: (value)=>{\r\n//             dispatch(Actions.UPDATE_TRACK(value))\r\n//             // renderState(store.getState());\r\n//         },\r\n//         addStemEffect:(trackId, stemId,type)=>{\r\n//             dispatch(Actions.ADD_STEM_EFFECT(trackId, stemId,type))\r\n//         },\r\n//         // toggleLive: (value)=>{\r\n//         //     dispatch(Actions.TOGGLE_LIVE(value))\r\n//         // },\r\n//         save:()=>{\r\n//             window.localStorage.setItem('state', JSON.stringify(store.getState()));\r\n//             console.log('saved')\r\n//         },\r\n//         load: ()=>{\r\n//             let newState = window.localStorage.getItem('state');\r\n//             if(newState){\r\n//                 newState = JSON.parse(newState);\r\n//                 Id.init(newState);\r\n//                 newState.tracks.forEach(track=>{\r\n//                     track.stems.forEach(stem=>{\r\n//                         stem.trackId = track.id\r\n//                     });\r\n//                 });\r\n//                 dispatch(Actions.LOAD(Model.defaultState));\r\n//                 dispatch(Actions.LOAD(newState));\r\n//                 // renderTempoChange(store.getState());\r\n//                 // renderBootScript(store.getState());\r\n//             } else {\r\n//                 console.warn('Tried to load state but empty')\r\n//             }\r\n//         },\r\n//         download: ()=>{\r\n//             let dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(store.getState()));\r\n//             let anchor = document.createElement('a')\r\n//             anchor.setAttribute(\"href\", dataStr);\r\n//             anchor.setAttribute(\"download\", \"dead_state.json\");\r\n//             anchor.click();\r\n//             dispatch(Actions.DOWNLOAD());\r\n//         },\r\n//         openFile: (file)=>{\r\n//             if(!file){\r\n//                 let input = document.createElement('input');\r\n//                 input.type = 'file';\r\n//                 input.onchange = (e)=>{\r\n//                     input.files[0].text().then(x=>{\r\n//                         dispatch(Actions.LOAD(JSON.parse(x)));\r\n//                     });\r\n//                 };\r\n//                 input.click();\r\n//             } else {\r\n//                 file.text().then(x=>{\r\n//                     dispatch(Actions.LOAD(JSON.parse(x)));\r\n//                 });\r\n//             }\r\n//         }\r\n//     }\r\n// };\r\n//\r\n// export default GlobalActions;\r\n","import Stem from '../components/Stem'\r\nimport {connect} from 'react-redux';\r\nimport GlobalActions from \"../actions/GlobalActions\";\r\n\r\nconst mapStateToProps = (state,ownProps) => {\r\n  // important for ownProps.id to refer to id of this stem\r\n  return {...state.stems[ownProps.id],...ownProps}\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        globalActions: GlobalActions(dispatch)\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(Stem);\r\n","import React , {Component} from \"react\";\r\nimport './index.css'\r\n\r\nexport default class PlusButton extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div {...this.props} className={\"plusButton\"}>\r\n                <div>+</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React, {Component} from 'react';\r\nimport './index.css'\r\nimport {Grid, Slider, Switch,Input} from '@material-ui/core';\r\n\r\nexport default class SliderEffect extends Component {\r\n    constructor (props){\r\n        super(props);\r\n        let sliderValue = this.toSliderScale(this.props.properties.value);\r\n        this.state = {value:this.props.properties.value, sliderValue};\r\n\r\n    }\r\n\r\n    toSliderScale(x){\r\n        if (this.props.properties.scale==='log'){\r\n            let range = this.props.properties.max-this.props.properties.min;\r\n            return Math.pow(x/range,0.5)*range;\r\n        }\r\n        return x\r\n    }\r\n\r\n    fromSliderScale(x){\r\n        if(this.props.properties.scale==='log'){\r\n            let range = this.props.properties.max-this.props.properties.min;\r\n            return Math.round(Math.pow(x/range,2)*range*this.props.properties.step)/this.props.properties.step;\r\n        }\r\n        return x\r\n    }\r\n\r\n    render(){\r\n        return (this.props.isVertical?this.renderVertical():this.renderHorizontal())\r\n    }\r\n\r\n    handleSliderChange(e, newValue){\r\n        if(newValue){\r\n            const properties = this.props.properties;\r\n            properties.value = newValue;\r\n            this.props.globalActions.effectUpdate(this.props.id,{properties});\r\n        }\r\n    }\r\n\r\n    handleInputChange(e){\r\n        let value = parseFloat(e.target.value);\r\n        const properties = this.props.properties;\r\n        properties.value = value;\r\n        this.props.globalActions.effectUpdate(this.props.id, {properties});\r\n    }\r\n\r\n    toggle(e){\r\n        let on = e.target.checked;\r\n        this.props.globalActions.effectUpdate(this.props.id, {on})\r\n    }\r\n\r\n    renderHorizontal(){\r\n        return (\r\n            <div className={'Slider horizontal'}>\r\n                {this.props.code}\r\n                {this.props.noToggle ? null :\r\n                    <Switch\r\n                        color='primary'\r\n                        onChange={this.toggle.bind(this)}\r\n                        checked={this.props.on}\r\n                    />\r\n                }\r\n                <Grid container spacing={2} alignItems=\"center\">\r\n                    <Grid item xs>\r\n                        <Slider\r\n                            onChange={(e,newValue)=>{\r\n                                if(newValue){\r\n                                    this.setState({sliderValue:newValue,value:this.fromSliderScale(newValue)});\r\n                                    this.handleSliderChange(e,newValue);\r\n                                }\r\n                            }}\r\n                            min={this.props.properties.min}\r\n                            max={this.props.properties.max}\r\n                            step={this.props.properties.step}\r\n                            value={parseFloat(this.state.sliderValue)}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Input\r\n                            margin=\"dense\"\r\n                            onChange={(e)=>{\r\n                                let value = parseFloat(e.target.value);\r\n                                e.persist()\r\n                                this.setState({value:value, sliderValue:this.toSliderScale(value)});\r\n                                this.handleInputChange.bind(this)(e);\r\n                            }}\r\n                            value={this.state.value}\r\n                            inputProps={{\r\n                                step: this.props.properties.step,\r\n                                min: this.props.properties.min,\r\n                                max: this.props.properties.max,\r\n                                type: 'number',\r\n                                'aria-labelledby': 'input-slider',\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    renderVertical(){\r\n        return (\r\n            <div className={'Slider vertical'}>\r\n\r\n                <Slider\r\n                    orientation='vertical'\r\n                    onChange={(e,newValue)=>{\r\n                        if(newValue){\r\n                            this.setState({sliderValue:newValue,value:this.fromSliderScale(newValue)});\r\n                            this.handleSliderChange(e,newValue);\r\n                        }\r\n                    }}\r\n                    min={this.props.properties.min}\r\n                    max={this.props.properties.max}\r\n                    step={this.props.properties.step}\r\n                    value={parseFloat(this.state.sliderValue)}\r\n                />\r\n                        <Input\r\n                            margin=\"dense\"\r\n                            onChange={(e)=>{\r\n                                let value = parseFloat(e.target.value);\r\n                                e.persist()\r\n                                this.setState({value:value, sliderValue:this.toSliderScale(value)});\r\n                                this.handleInputChange.bind(this)(e);\r\n                            }}\r\n                            value={this.state.value}\r\n                            inputProps={{\r\n                                step: this.props.properties.step,\r\n                                min: this.props.properties.min,\r\n                                max: this.props.properties.max,\r\n                                type: 'number',\r\n                                'aria-labelledby': 'input-slider',\r\n                            }}\r\n                        />\r\n                        <div style={{textAlign:'center'}}>\r\n                            {this.props.code}\r\n                            {this.props.noToggle ? null :\r\n                                <Switch\r\n                                    color='primary'\r\n                                    onChange={this.toggle.bind(this)}\r\n                                    checked={this.props.on}\r\n                                />\r\n                            }\r\n                        </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport './index.css'\r\nimport throttle from 'lodash/throttle'\r\nimport EffectModel from \"../../model/EffectModel\";\r\nimport Id from \"../../model/Id\";\r\nimport Slider from \"./Slider\";\r\n\r\nexport default class Effect extends Component {\r\n    render(){\r\n        switch (this.props.type) {\r\n            case EffectModel.Types.SLIDER:\r\n                return (<Slider {...this.props}/>)\r\n            default:\r\n                console.warn('unrecognized effect type: '+this.props.type);\r\n                return null;\r\n        }\r\n    }\r\n}\r\n","import Effect from '../components/Effect'\r\nimport {connect} from 'react-redux';\r\nimport GlobalActions from \"../actions/GlobalActions\";\r\n\r\nconst mapStateToProps = (state,ownProps) => {\r\n  return {\r\n    ...state.effects[ownProps.id],\r\n    ...ownProps\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        globalActions: GlobalActions(dispatch)\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(Effect);\r\n","import React, {Component} from 'react'\r\nimport './index.css'\r\nimport Stem from '../../containers/Stem';\r\nimport PlusButton from \"../util/PlusButton/PlusButton\";\r\nimport Effect from \"../../containers/Effect\";\r\n\r\n\r\nexport default class Track extends Component {\r\n    stemToComponent(id){\r\n        return <Stem key={id}\r\n                    id={id}\r\n        />\r\n    }\r\n\r\n    render() {\r\n        let stems = this.props.stems.map(this.stemToComponent.bind(this));\r\n        return (\r\n            <div className='Track'>\r\n                <input onChange={this.titleChange.bind(this)} value={this.props.name}/>\r\n\r\n                <div className={'stems'}>\r\n                    {stems}\r\n                    <PlusButton onClick={this.addStem.bind(this)}/>\r\n                </div>\r\n                <div className={'effects'}>\r\n                    <div className={'launchButton'}>\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"var(--font-color-dark)\" width=\"24\" height=\"24\"\r\n                             viewBox=\"0 0 24 24\">\r\n                            <path d=\"M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z\"/>\r\n                            <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                        </svg>\r\n                    </div>\r\n                    <Effect isVertical noToggle updateEffect={this.updateEffect.bind(this)} id={this.props.effects[0]}/>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    updateEffect(gainEffect) {\r\n        this.props.globalActions.trackUpdate(this.props.id, {effects:[gainEffect]});\r\n    }\r\n\r\n    addStem() {\r\n        this.props.globalActions.trackAddStem(this.props.id);\r\n    }\r\n\r\n    titleChange(e) {\r\n        this.props.globalActions.trackUpdate(this.props.id, {name: e.target.value});\r\n    }\r\n\r\n}\r\n","import Track from '../components/Track'\r\nimport {connect} from 'react-redux';\r\nimport GlobalActions from \"../actions/GlobalActions\";\r\n\r\nconst mapStateToProps = (state,ownProps) => {\r\n  // important for ownProps.id to refer to id of this track\r\n  let track = state.tracks[ownProps.id];\r\n  return {...track,...ownProps}\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        globalActions: GlobalActions(dispatch)\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(Track);\r\n","import React, { Component } from 'react';\r\nimport Track from '../../containers/Track';\r\nimport './index.css';\r\nimport PlusButton from \"../util/PlusButton/PlusButton\";\r\n\r\nexport default class LaunchSpace extends Component {\r\n\r\n    trackToDom(x){\r\n        x.globalActions = this.props.globalActions;\r\n        return (<Track key={x.id} {...x} />)\r\n    }\r\n\r\n    trackIdToComponent(id){\r\n      return <Track key={id} id={id}/>\r\n        // let track = this.populateTrack(this.props, this.props.tracks[id]);\r\n        // let stems = {};\r\n        // track.stems.forEach(x=>{stems[x] = this.props.stems[x]});\r\n        // let effects = {};track.effects.map(x=>{return this.props.effects[x]}).concat(stems.map(x=>{return this.props.effects[x]})).flat();\r\n        // let props = {\r\n        //     stems,\r\n        //     effects,\r\n        //     key:id\r\n        // }\r\n    }\r\n\r\n    render(){\r\n\r\n        let tracks = Object.keys(this.props.tracks).map(this.trackIdToComponent.bind(this));\r\n\r\n        return (\r\n            <div className=\"LaunchSpace\" style={this.props.style} tabIndex=\"1\" onKeyUp={this.onKeyUp.bind(this)}>\r\n                {tracks}\r\n                <PlusButton onClick={this.newTrack.bind(this)} style={{display:'inline-block',top:'0px',width:'50px',minWidth:'50px',height:'30px',margin:'5px'}}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    onKeyUp(e){\r\n        if(e.key.toLowerCase()==='delete'){\r\n            let ids = Object.keys(this.props.tracks).map(x=>{return this.props.tracks[x].stems.map(y=>{return {trackId:x,stemId:y,selected:this.props.stems[y].selected}})}).flat();\r\n            let selectedIds = ids.filter(x=>x.selected);\r\n            selectedIds.forEach(x=>{this.props.globalActions.trackDeleteStem(x.trackId,x.stemId)});\r\n        }else if (e.ctrlKey && e.key.toLowerCase()==='c'){\r\n            this.props.globalActions.stemCopy();\r\n        } else if (e.key.toLowerCase()==='escape'){\r\n            let selectedStems = Object.keys(this.props.stems).filter(x=>{return this.props.stems[x].selected});\r\n            selectedStems.forEach(x=>this.props.globalActions.stemUpdate(x,{selected:false}));\r\n        }\r\n    }\r\n\r\n    newTrack(){\r\n        this.props.globalActions.trackAdd();\r\n    }\r\n\r\n}\r\n","import LaunchSpace from '../components/LaunchSpace'\r\nimport GlobalActions from \"../actions/GlobalActions\";\r\nimport {connect} from 'react-redux';\r\n\r\nexport const mapStateToProps = (state,props) => {\r\n  return state;\r\n    // let newState = {\r\n    //     connection:state.connection,\r\n    //     master:state.master,\r\n    //     tracks:[]\r\n    // };\r\n    //\r\n    // newState.tracks = Object.keys(Object.assign({},state.tracks)).map((x)=>{return populateTrack(state, x)});\r\n    // return newState;\r\n    // // Object.keys(state.tracks).forEach(trackId=>{\r\n    // //     let stems = state.tracks[trackId].stems.map(x=>{return state.stems[x]});\r\n    // // });\r\n};\r\n\r\n// function populateTrack(state, trackId){\r\n//     let track = state.tracks[trackId];\r\n//     track.id = trackId\r\n//     // let track = state.tracks[trackId];\r\n//     track.stems = track.stems.map(x=>{return populateStem(state, x)});\r\n//     //TODO temp hack\r\n//     // track.gainEffect = track.effects.map(x=>{return state.effects[x]});\r\n//     track.gainEffect = state.effects[track.effects[0]];\r\n//     return track\r\n// }\r\n//\r\n// function populateStem(state, stemId){\r\n//     let stem = state.stems[stemId];\r\n//     debugger;\r\n//     stem.id = stemId\r\n//     stem.effects = stem.effects.map(id=>{return populateEffect(state, id)});\r\n//     return stem\r\n// }\r\n//\r\n// function populateEffect(state, effectId){\r\n//     let effect = state.effects[effectId];\r\n//     effect.id = effectId;\r\n//     return effect;\r\n// }\r\n\r\n// function populateTrack(state, trackId){\r\n//     let track = Object.assign({},state.tracks[trackId]);\r\n//     // let track = state.tracks[trackId];\r\n//     track.stems = track.stems.map(x=>{return populateStem(state, x)});\r\n//     //TODO temp hack\r\n//     // track.gainEffect = track.effects.map(x=>{return state.effects[x]});\r\n//     track.gainEffect = state.effects[track.effects[0]];\r\n//     return track\r\n// }\r\n//\r\n// function populateStem(state, stemId){\r\n//     let stem = Object.assign({},state.stems[stemId]);\r\n//     // let stem = state.stems[stemId];\r\n//     stem.id = stemId;\r\n//     stem.effects = stem.effects.map(id=>{return populateEffect(state, id)});\r\n//     return stem\r\n// }\r\n//\r\n// function populateEffect(state, effectId){\r\n//     let effect = Object.assign({},state.effects[effectId]);\r\n//     // let effect = state.effects[effectId];\r\n//     effect.id = effectId;\r\n//     return effect;\r\n// }\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n      globalActions: GlobalActions(dispatch)\r\n  }\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(LaunchSpace);\r\n","import React, {Component} from 'react'\r\nimport './index.css'\r\nimport debounce from \"lodash/debounce\";\r\nimport {Button, Switch} from \"@material-ui/core\";\r\n\r\nexport default class CodeEditor extends Component {\r\n\r\n    // onChange, onChangeLive, code, live\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {code:this.props.code};\r\n        this.updateCode = debounce(this.props.onChange, 1000);\r\n        this.flashTimeout = null;\r\n    }\r\n\r\n    render(){\r\n\r\n        return (\r\n\r\n            <div className={'CodeEditor'}>\r\n                Live\r\n                <Switch\r\n                    color='primary'\r\n                    onChange={(e)=>{this.props.onChangeLive(e.target.checked)}}\r\n                    checked={this.props.live}\r\n                />\r\n                <Button color='primary' disabled={this.props.live} onClick={(e)=>{this.updateCode.bind(this)(e.target.value)}} variant='outlined'>eval</Button>\r\n\r\n                <textarea\r\n                    className={this.state.flash?'flash':''}\r\n                    onKeyPress={this.onKeyPress.bind(this)}\r\n                    onChange={(e)=>{\r\n                        this.setState({code:e.target.value});\r\n                        if(this.props.live){\r\n                            this.updateCode.bind(this)(e.target.value)\r\n                        }\r\n                    }\r\n                    }\r\n                    value={this.state.code}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    onKeyPress(e) {\r\n        if(e.shiftKey){\r\n            if(e.key==='Enter'){\r\n                e.preventDefault();\r\n                this.props.onChange(this.state.code);\r\n                clearTimeout(this.flashTimeout);\r\n                this.setState({flash:true});\r\n                this.flashTimeout =  setTimeout(()=>{this.setState({flash:false})},1);\r\n            }\r\n        }\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport CodeEditor from \"../../CodeEditor\";\r\nimport Effect from \"../../../containers/Effect\";\r\nimport EffectComponent from \"../../Effect\";\r\nimport Model from \"../../../model\";\r\nimport EffectModel from \"../../../model/EffectModel\";\r\n\r\nclass LanguageControls extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {};\r\n    }\r\n\r\n    changeTempo(id, effect) {\r\n        let val = this.props\r\n        val.properties.tempo = effect.properties.value;\r\n        this.props.globalActions.masterUpdate(Model.Languages.TidalCycles, val);\r\n    }\r\n\r\n    getLanguageSpecific() {\r\n        switch (this.props.language) {\r\n            case Model.Languages.TidalCycles:\r\n                let e = {\r\n                    code: \"Tempo\",\r\n                    language: \"TidalCycles\", on: true,\r\n                    properties: {\r\n                        max: 300,\r\n                        min: 0,\r\n                        operator: \"\",\r\n                        scale: \"linear\",\r\n                        step: 0.01,\r\n                        value: this.props.properties.tempo\r\n                    },\r\n                    globalActions:{effectUpdate:this.changeTempo.bind(this)},\r\n                    noToggle: true,\r\n                    key: 'tempo',\r\n                    type:\"SLIDER\",\r\n                    updateEffect: this.changeTempo.bind(this),\r\n                }\r\n\r\n                return [\r\n                    <CodeEditor\r\n                        key={'tidalEditorMain'}\r\n                        onChange={(macros) => {\r\n                            this.props.globalActions.updateMaster(this.props.language, {macros});\r\n                        }}\r\n                        onChangeLive={(bootScriptLive) => {\r\n                            this.setState({bootScriptLive})\r\n                        }}\r\n                        code={this.props.macros}\r\n                        live={false}\r\n                    />,\r\n                    <EffectComponent {...e}/>\r\n                ]\r\n            case Model.Languages.Hydra:\r\n                return null\r\n            default:\r\n                console.warn('unrecognized language: ' + this.props.language)\r\n                return null;\r\n        }\r\n    }\r\n\r\n    updateEffect(e) {\r\n        this.props.globalActions.updateMasterEffect(e);\r\n    }\r\n\r\n    effectIdToComponent(id) {\r\n        return <Effect key={id} id={id} updateEffect={this.updateEffect.bind(this)}/>\r\n    }\r\n\r\n    render() {\r\n        const effects = this.props.effects.map(this.effectIdToComponent.bind(this));\r\n        const languageSpecific = this.getLanguageSpecific();\r\n        return (\r\n            <div className=\"LanguageControls\">\r\n                {languageSpecific}\r\n                {effects}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LanguageControls;\r\n","import React, {Component} from 'react'\r\nimport './index.css'\r\nimport {TextField} from '@material-ui/core';\r\nimport debounce from 'lodash/debounce'\r\nimport LanguageControls from \"./LanguageControls\";\r\n\r\nexport default class MasterEditor extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            connection:this.props.connection,\r\n            language:Object.keys(this.props.master)[0]\r\n        };\r\n\r\n        this.connect = debounce(()=>{\r\n            this.props.globalActions.connect(this.state.connection.url, this.state.connection.port)\r\n        },2000);\r\n    }\r\n\r\n    updateEffect(newEffect){\r\n        this.props.globalActions.updateMasterEffect(newEffect);\r\n    }\r\n\r\n    languageChange(e){\r\n        this.setState(Object.assign({},this.state,{language:e.target.value}))\r\n    }\r\n\r\n    render(){\r\n\r\n        const languageOpts = Object.keys(this.props.master).map(lang=>{return <option key={lang} value={lang}>{lang}</option>});\r\n        return (\r\n            <div className={'MasterEditor'} style={this.props.style}>\r\n\r\n                <select onChange={this.languageChange.bind(this)} value={this.state.language}>\r\n                    {languageOpts}\r\n                </select>\r\n\r\n                <LanguageControls\r\n                    {...this.props.master[this.state.language]}\r\n                    language={this.state.language}\r\n                    globalActions={this.props.globalActions}\r\n                />\r\n\r\n                <div className='separator' style={{border:this.props.connection.isConnected?'1pt solid var(--stem-off)':'1pt solid red'}}>\r\n                    <h3>Connection</h3>\r\n                    <div>\r\n                        <TextField\r\n                            style={{width:'50%',marginLeft:'5px'}}\r\n                            label=\"URL\"\r\n                            value={this.state.connection.url}\r\n                            onChange={(e)=>{\r\n                                let connection = this.state.connection;\r\n                                connection.url = e.target.value;\r\n                                this.setState({connection});\r\n                                this.connect();\r\n                            }}\r\n                            margin=\"normal\"\r\n                        />\r\n                        <TextField\r\n                            style={{width:'50%',marginLeft:'5px',maxWidth:'100px'}}\r\n                            label=\"Port\"\r\n                            type='number'\r\n                            value={this.state.connection.port}\r\n                            onChange={(e)=>{\r\n                                let connection = this.state.connection;\r\n                                connection.port = parseInt(e.target.value);\r\n                                this.setState({connection});\r\n                                this.connect();\r\n                            }}\r\n                            margin=\"normal\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    connect(url=this.props.connection.url, port=this.props.connection.port){\r\n        let connection = {url:url,port:port,isConnected:this.state.isConnected};\r\n        this.setState({connection});\r\n        debounce(()=> {\r\n            this.props.globalActions.connect(url, port)\r\n        },3000, {trailing:true})();\r\n    }\r\n\r\n    updateConnect(url,port){\r\n        this.props.globalActions.connect(url,port)\r\n    }\r\n\r\n\r\n    toggle(e){\r\n        this.props.globalActions.toggleLive(e.target.checked)\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\nimport './index.css'\r\nimport {Button} from \"@material-ui/core\";\r\nimport Effect from \"../../containers/Effect\";\r\nimport debounce from 'lodash/debounce'\r\nimport CodeEditor from \"../CodeEditor\";\r\nimport Model from \"../../model\";\r\nimport PlusButton from \"../util/PlusButton/PlusButton\";\r\n\r\n\r\nexport default class StemEditor extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {code: this.props.code};\r\n        this.updateCode = debounce(this._updateCode, 1000);\r\n        this.textAreaRef = React.createRef();\r\n    }\r\n\r\n    effectIdToComponent(id){\r\n        return <Effect key={id} id={id}/>\r\n    }\r\n\r\n    render(){\r\n        let effects = this.props.effects.map(this.effectIdToComponent.bind(this))\r\n\r\n        return (\r\n            <div className={'StemEditor'} style={this.props.style}>\r\n                Name:\r\n                <input\r\n                    style={{backgroundColor:'var(--stem-off)'}}\r\n                    onChange={this.updateName.bind(this)}\r\n                    type='text'\r\n                    value={this.props.name}\r\n                />\r\n\r\n                <select\r\n                    value={this.props.language}\r\n                    onChange={this.handleLanguageChange.bind(this)}\r\n                    name='language'\r\n                >\r\n                    {Object.keys(Model.Languages).map(x=><option key={x} value={x}>{x}</option>)}\r\n                </select>\r\n\r\n                <CodeEditor\r\n                    onChange={(code)=>this.props.globalActions.stemUpdate(this.props.id, {code})}\r\n                    onChangeLive={(live)=>this.props.globalActions.stemUpdate(this.props.id,{live})}\r\n                    code={this.props.code}\r\n                    live={this.props.live}\r\n                />\r\n                <div>\r\n                {effects}\r\n                <PlusButton style={{maxWidth:'60px',maxHeight:'30px',marginLeft:'10px'}} onClick={this.newEffect.bind(this)}/>\r\n                </div>\r\n                <Button style={{marginTop:'5px'}} onClick={this.delete.bind(this)} color='primary' variant='outlined'>delete</Button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    newEffect(){\r\n        console.log('new effect (not implemented - StemEditor')\r\n    }\r\n\r\n    handleLanguageChange(e){\r\n        this.props.globalActions.stemUpdate(this.props.id, {language:e.target.value});\r\n    }\r\n\r\n    maybeEval(e) {\r\n        if(e.shiftKey){\r\n            if(e.key==='Enter'){\r\n                e.preventDefault();\r\n                this.props.globalActions.stemUpdate(this.props.id, {code:this.state.code});\r\n                this.textAreaRef.current.classList.add('flash');\r\n                setTimeout(()=>{this.textAreaRef.current.classList.remove('flash')},250);\r\n            }\r\n        }\r\n    }\r\n\r\n    delete(){\r\n        this.props.globalActions.removeStem(this.props.trackId, this.props.id);\r\n    }\r\n\r\n\r\n    updateEffect(newEffect){\r\n        let newEffects = this.props.effects.map(x=>{\r\n            if(x.id===newEffect.id){\r\n                return Object.assign(x,newEffect,{});\r\n            }\r\n            return x\r\n        });\r\n        this.props.globalActions.stemUpdate(this.props.id,{effects:newEffects})\r\n    }\r\n\r\n    updateName(e){\r\n        this.props.globalActions.stemUpdate(this.props.id, {name:e.target.value})\r\n    }\r\n\r\n    _updateCode(e){\r\n        this.props.globalActions.stemUpdate(this.props.id, {code:e.target.value})\r\n    }\r\n\r\n}\r\n","import React, {Component} from 'react';\r\nimport './index.css'\r\nimport MasterEditor from '../MasterEditor'\r\nimport StemEditor from \"../StemEditor\";\r\n\r\nclass Tab extends Component {\r\n    render() {\r\n        return (\r\n            <div onClick={this.props.switchToTab} className={'Tab' + (this.props.selected ? '' : ' unselected')}>\r\n                <label>{this.props.label}</label>\r\n                {this.props.closeAble ?\r\n                    <svg onClick={this.props.closeTab} xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\"\r\n                         viewBox=\"0 0 18 18\">\r\n                        <path\r\n                            d=\"M14.53 4.53l-1.06-1.06L9 7.94 4.53 3.47 3.47 4.53 7.94 9l-4.47 4.47 1.06 1.06L9 10.06l4.47 4.47 1.06-1.06L10.06 9z\"/>\r\n                    </svg> : null}\r\n                {this.props.selected ? <div className='indicator'/> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default class Flyout extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tab: 'master',\r\n            history: []\r\n        }\r\n    }\r\n\r\n    switchTab(tab) {\r\n        let opened = this.props.stems.map(x => x.id);\r\n        if (tab === 'master' || opened.includes(tab)) {\r\n            let history = this.state.history.concat([tab]);\r\n            this.setState({tab, history});\r\n        } else {\r\n            console.log('err tab not found')\r\n        }\r\n    }\r\n\r\n    closeTab(stemId) {\r\n\r\n        let tab, history;\r\n        if (this.state.history.length - 1) {\r\n            history = this.state.history.slice(0, -1);\r\n            history = history.filter(x => x !== stemId);\r\n            tab = history[history.length - 1] || 'master';\r\n        } else {\r\n            tab = 'master';\r\n            history = this.state.history;\r\n        }\r\n        this.setState({tab, history});\r\n        setTimeout(() => {\r\n            this.props.globalActions.stemUpdate(stemId, {open: false});\r\n            this.setState({tab, history});\r\n        }, 1);\r\n    }\r\n\r\n    render() {\r\n        let tabs = this.props.stems.map(x => {\r\n            let tab = (\r\n                <Tab\r\n                    switchToTab={() => {this.switchTab.bind(this)(x.id)}}\r\n                    label={x.name === '' ? '<untitled>' : x.name}\r\n                    key={x.id+\"_tab\"}\r\n                    id={x.id}\r\n                    selected={this.state.tab === x.id}\r\n                    closeAble={true}\r\n                    closeTab={() => {this.closeTab.bind(this)(x.id)}}\r\n                />);\r\n            let content = (<StemEditor\r\n                    style={{display: (this.state.tab === x.id ? 'block' : 'none')}}\r\n                    key={x.id+\"_editor\"}\r\n                    {...x}\r\n                    globalActions={this.props.globalActions}\r\n                />\r\n            );\r\n            return {tab, content}\r\n        });\r\n\r\n\r\n        return (\r\n            <div className='Flyout' style={this.props.style}>\r\n                <div className={'scrollbarHidden'}>\r\n                    <div className={'TabContainer'}>\r\n                        <Tab\r\n                            switchToTab={() => {\r\n                                this.switchTab.bind(this)('master')\r\n                            }}\r\n                            value={'master'}\r\n                            label='master'\r\n                            selected={this.state.tab === 'master'}\r\n                        />\r\n                        {tabs.map(x => x.tab)}\r\n                    </div>\r\n                </div>\r\n                <div className={'content'}>\r\n                    <MasterEditor\r\n                        {...this.props}\r\n                        value={'master'}\r\n                        style={{display: this.state.tab === 'master' ? 'block' : 'none'}}\r\n                    />\r\n                    {tabs.map(x => x.content)}\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import Flyout from '../components/Flyout'\r\nimport {connect} from 'react-redux';\r\nimport GlobalActions from \"../actions/GlobalActions\";\r\n// import {mapStateToProps} from \"./LaunchSpace\";\r\n\r\nconst mapStateToProps = state => {\r\n\r\n  let stems = Object.keys(state.stems).map(id=>{\r\n    return Object.assign({},state.stems[id], {id})\r\n  }).filter(x=>{return x.open});\r\n\r\n  return {\r\n    master:state.master,\r\n    connection:state.connection,\r\n    stems\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        globalActions: GlobalActions(dispatch)\r\n    }\r\n};\r\n\r\n\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(Flyout);\r\n","import React, {Component} from 'react'\r\nimport './index.css'\r\nimport Connection from \"../../Connection\";\r\nimport {Renderers} from \"../../Renderers\";\r\n\r\nexport default class Render extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.iframeRef = React.createRef();\r\n        this.tidalCycles = {\r\n            code:'',\r\n            tempo:null,\r\n            macros:''\r\n        };\r\n        this.hydra = {\r\n            code:'',\r\n            macros:''\r\n        };\r\n        this.poppedOut = [];\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n        return true;\r\n    }\r\n\r\n\r\n    render() {\r\n        var tidal = Renderers.TidalCycles.getCode(this.props);\r\n        // var hydra = Renderers.Hydra.getCode(this.props, \"add\");\r\n        // let send = false;\r\n\r\n        // Render Tidal\r\n        console.log('render?')\r\n        if(this.props.connection.isConnected){\r\n            console.log(this.tidalCycles.tempo, this.props.master.TidalCycles.properties.tempo);\r\n            if(this.tidalCycles.tempo !== this.props.master.TidalCycles.properties.tempo){\r\n                Connection.sendCode(Renderers.TidalCycles.getTempoCode(this.props));\r\n                this.tidalCycles.tempo = this.props.master.TidalCycles.properties.tempo;\r\n                console.log('TidalCycles tempo: '+this.tidalCycles.tempo);\r\n            }\r\n            if(this.tidalCycles.macros !== this.props.master.TidalCycles.macros){\r\n                Connection.sendCode(this.props.master.TidalCycles.macros);\r\n                this.tidalCycles.macros = this.props.master.TidalCycles.macros;\r\n            }\r\n            const tidalCode = Renderers.TidalCycles.getCode(this.props);\r\n            if(this.tidalCycles.code!==tidalCode){\r\n                console.log('tidal:', tidal);\r\n                Connection.sendCode(tidal);\r\n                this.tidalCycles.code = tidalCode;\r\n            }\r\n        }\r\n\r\n        if(this.iframeRef.current && this.iframeRef.current.contentWindow){\r\n            // debugger;\r\n            const msg = JSON.parse(JSON.stringify(this.props));\r\n            this.iframeRef.current.contentWindow.postMessage({state:msg});\r\n            if(this.poppedOut.length){\r\n                this.poppedOut.forEach(iframe=>{iframe.postMessage({state:msg})});\r\n            }\r\n        }\r\n\r\n\r\n        return (\r\n            <div className=\"Render\" style={this.props.style}>\r\n                {/*<svg onClick={this.popoutRender.bind(this)} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">*/}\r\n                {/*    <path d=\"M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z\"/>*/}\r\n                {/*</svg>*/}\r\n                {/*<iframe title={\"Audience Render\"} ref={this.iframeRef} src={\"/render\"}/>*/}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    popoutRender(){\r\n        this.poppedOut.push(window.open(\"/render\"));\r\n    }\r\n}","import Render from '../components/Render'\r\nimport {connect} from 'react-redux';\r\nimport GlobalActions from \"../actions/GlobalActions\";\r\n\r\nconst mapStateToProps = state => state;\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        globalActions: GlobalActions(dispatch)\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(Render);\r\n\r\n","import React, {Component} from 'react'\r\nimport LaunchSpace from '../../containers/LaunchSpace.jsx';\r\nimport Flyout from '../../containers/Flyout.jsx';\r\nimport Render from '../../containers/Render'\r\nimport './index.css';\r\n// import ResizeDivider from \"../ResizeDivider\";\r\n\r\nexport default class App extends Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            divider:70, //%\r\n            horizontalDivider:75\r\n        }\r\n        this.appRef = React.createRef()\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.globalActions.connect(this.props.connection.url, this.props.connection.port);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div\r\n                onDragOver={(e)=>{e.preventDefault()}}\r\n                ref={this.appRef} className='App' tabIndex=\"0\" onKeyDown={this.macros.bind(this)}>\r\n                <LaunchSpace style={{width:this.state.divider+\"%\"}} />\r\n                {/*<ResizeDivider onResize={this.dividerResize.bind(this)}vertical/>*/}\r\n                <div id={\"rightPanel\"} style={{width:100-this.state.divider+\"%\"}}>\r\n                    <Flyout style={{height:this.state.horizontalDivider+\"%\"}}/>\r\n                    {/*<ResizeDivider horizontal onResize={this.dividerResizeRightPanel.bind(this)}/>*/}\r\n                    <Render style={{height:(100-this.state.horizontalDivider)+\"%\"}}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    dividerResize(px){\r\n        this.setState({divider:px*100/document.body.clientWidth})\r\n    }\r\n\r\n    dividerResizeRightPanel(px){\r\n        this.setState({horizontalDivider:px*100/document.body.clientHeight})\r\n    }\r\n\r\n\r\n    macros(e){\r\n        if(e.ctrlKey){\r\n            if(e.key==='s'){\r\n                e.preventDefault();\r\n                this.props.globalActions.save();\r\n            } else if (e.key ===\"l\"){\r\n                e.preventDefault();\r\n                this.props.globalActions.load();\r\n            } else if (e.key ===\"d\"){\r\n                e.preventDefault();\r\n                this.props.globalActions.download();\r\n            } else if (e.key ==='o'){\r\n                e.preventDefault();\r\n                this.props.globalActions.openFile();\r\n            }\r\n        }\r\n    }\r\n}","import App from '../components/App'\r\nimport {connect} from 'react-redux';\r\nimport GlobalActions from \"../actions/GlobalActions\";\r\n\r\nconst mapStateToProps = state => state;\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        globalActions: GlobalActions(dispatch)\r\n    }\r\n};\r\n\r\n\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(App);","import {ActionTypes} from \"../actions\";\r\nimport Model from \"../model\";\r\nimport TrackModel from \"../model/TrackModel\";\r\nimport EffectModel from \"../model/EffectModel\";\r\nimport StemModel from \"../model/StemModel\";\r\n\r\n\r\nconst TrackReducer = function (tracks, action) {\r\n\r\n    const payload = action.payload;\r\n\r\n    if (action.type === 'TRACK_UPDATE') {\r\n        tracks[payload.trackId] = Object.assign({}, tracks[payload.trackId], payload.value);\r\n        return {...tracks};\r\n    } else if (action.type === 'TRACK_DELETE_STEM') {\r\n        tracks[payload.trackId].stems = tracks[payload.trackId].stems.filter(x=>{return x !== payload.stemId});\r\n        tracks[payload.trackId] = Object.assign({}, tracks[payload.trackId]);\r\n        return {...tracks};\r\n    } else if (action.type === 'TRACK_ADD_STEM') {\r\n        let newTrack = Object.assign({}, tracks[payload.trackId]);\r\n        newTrack.stems = newTrack.stems.concat([payload.stemId]);\r\n        let obj = {};\r\n        obj[payload.trackId] = newTrack;\r\n        return Object.assign({},tracks, obj)\r\n    } else if (action.type === 'TRACK_DELETE_EFFECT') {\r\n        tracks[payload.trackId] = {...tracks[payload.trackId]};\r\n        tracks[payload.trackId].effects = tracks[payload.track].filter(x=>{return x !== payload.effectId});\r\n        return {...tracks};\r\n    } else if (action.type === 'TRACK_ADD_EFFECT') {\r\n        tracks[payload.trackId] = {...tracks[payload.trackId]};\r\n        tracks[payload.trackId].effects.push(payload.effectId);\r\n        return {...tracks};\r\n    } else if (action.type === 'TRACK_ADD'){\r\n        tracks[payload.trackId] = payload.value;\r\n        return {...tracks};\r\n    }\r\n    return tracks\r\n}\r\n\r\n\r\nexport default TrackReducer\r\n\r\n\r\nconst OldTrackReducer = function (tracks, action) {\r\n    let oldTrack, newTrack, newTracks, newState;\r\n\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_TRACK:\r\n            return [...tracks, TrackModel.getNew()]\r\n        case ActionTypes.REMOVE_TRACK:\r\n            return tracks.filter(x => {\r\n                return x.id !== action.trackId\r\n            })\r\n        case ActionTypes.ADD_STEM:\r\n            let hmm = tracks.map(x => {\r\n                if (x.id === action.trackId) {\r\n                    return Object.assign({}, x, {\r\n                        stems: [\r\n                            ...x.stems,\r\n                            StemModel.getNew(x.id)\r\n                        ]\r\n                    })\r\n                }\r\n                return x\r\n            });\r\n            return [...hmm];\r\n        case ActionTypes.REMOVE_STEM:\r\n            let hmmm = tracks.map(x => {\r\n                if (x.id === action.trackId) {\r\n                    return Object.assign({}, x, {\r\n                        stems: x.stems.filter(y => {\r\n                            return y.id !== action.stemId\r\n                        })\r\n                    })\r\n                }\r\n                return x\r\n            });\r\n            return [...hmmm];\r\n\r\n        // oldTrack = tracks.find(x=>{return x.id === action.trackId});\r\n        // return  Object.assign({},oldTrack,{\r\n        //     stems:[\r\n        //         ...oldTrack.stems.filter(x=>{return x.id!==action.stemId})\r\n        //     ]\r\n        // });\r\n        case ActionTypes.ADD_STEM_EFFECT:\r\n            let index = tracks.findIndex(x => {\r\n                return x.id === action.trackId\r\n            });\r\n            oldTrack = tracks[index];\r\n            // let effect = EffectModel.;\r\n            newTrack = Object.assign({}, oldTrack, {\r\n                stems: [...oldTrack.stems].map(x => {\r\n                    if (x.id === action.stemId) {\r\n                        return Object.assign({}, x, {effects: [...x.effects, EffectModel.getNew(action.effectType)]})\r\n                    }\r\n                    return x\r\n                })\r\n            });\r\n            newTracks = [...tracks];\r\n            newTracks[index] = newTrack;\r\n            return newTracks\r\n        case ActionTypes.UPDATE_TRACK:\r\n            oldTrack = tracks.find(x => {\r\n                return x.id === action.value.id\r\n            });\r\n            newTrack = Object.assign({}, oldTrack, action.value);\r\n            return tracks.map(x => {\r\n                if (x.id === newTrack.id) {\r\n                    return newTrack\r\n                }\r\n                return x\r\n            });\r\n\r\n        default:\r\n            return tracks\r\n    }\r\n}\r\n\r\n","\r\nconst ConnectionReducer = function (connection, action){\r\n    switch (action.type){\r\n        case 'CONNECT':\r\n            return {url: action.payload.url, port:action.payload.port, isConnected:action.payload.isConnected};\r\n        default:\r\n            return connection\r\n    }\r\n}\r\n\r\nexport default ConnectionReducer","import {ActionTypes} from \"../actions\";\r\nimport Model from \"../model\";\r\n\r\nconst MasterReducer = function (master, action) {\r\n    let obj,newVal;\r\n    switch (action.type) {\r\n        case \"MASTER_UPDATE\":\r\n            let newLang = Object.assign({},master[action.language],action.value);\r\n            master[action.language] = newLang;\r\n            return {...master};\r\n\r\n        // case ActionTypes.UPDATE_MASTER:\r\n        //     newVal = Object.assign({}, master[action.language], action.value);\r\n        //     obj = {};\r\n        //     obj[action.language] = newVal;\r\n        //     return Object.assign({}, master, obj);\r\n        // case ActionTypes.UPDATE_MASTER_EFFECT:\r\n        //     let previousMaster = master[action.effect.language];\r\n        //     newVal = Object.assign({}, previousMaster, {\r\n        //         effects: previousMaster.effects.map(x => {\r\n        //             if (x.id === action.effect.id) {\r\n        //                 return Object.assign({}, x, action.effect);\r\n        //             }\r\n        //             return x\r\n        //         })\r\n        //     });\r\n        //     obj = {};\r\n        //     obj[action.effect.language] = newVal;\r\n        //     return Object.assign({},master,obj);\r\n        default:\r\n            return master\r\n    }\r\n}\r\n\r\nexport default MasterReducer;","import {ActionTypes} from \"../actions\";\r\n\r\n\r\nconst StemReducer = (stems, action) => {\r\n    const payload = action.payload\r\n\r\n    if (action.type === 'STEM_UPDATE') {\r\n        stems[payload.stemId] = Object.assign({}, stems[payload.stemId], payload.value);\r\n        return {...stems};\r\n    } else if (action.type === 'STEM_DELETE_EFFECT') {\r\n        stems[payload.stemId] = Object.assign({}, stems[payload.stemId]);\r\n        stems[payload.stemId].effects = stems[payload.stemId].effects.filter(x => {\r\n            return x !== payload.effectId\r\n        });\r\n        return {...stems}\r\n    } else if (action.type === 'STEM_ADD_EFFECT') {\r\n        stems[payload.stemId] = Object.assign({}, stems[payload.stemId]);\r\n        stems[payload.stemId].effects.push(payload.effectId);\r\n        return {...stems}\r\n    } else if (action.type === 'STEM_COPY') {\r\n        // nothing\r\n        return stems\r\n    } else if (action.type === 'STEM_PASTE') {\r\n        console.log('paste not yet implemented');\r\n        return stems\r\n    } else if (action.type === 'TRACK_ADD_STEM') {\r\n        stems[payload.stemId] = payload.value;\r\n        return {...stems}\r\n    } else if (action.type === 'TRACK_DELETE_STEM') {\r\n        delete stems[payload.stemId];\r\n        return {...stems}\r\n    }\r\n\r\n    return stems\r\n}\r\n\r\nexport default StemReducer","import {ActionTypes} from \"../actions\";\r\n\r\n\r\nconst EffectReducer = (effects, action) => {\r\n    if (action.type === 'EFFECT_UPDATE') {\r\n        effects[action.payload.effectId] = Object.assign({}, effects[action.payload.effectId], action.payload.value);\r\n        return {...effects};\r\n    } else if (action.type === \"STEM_ADD_EFFECT\") {\r\n        effects[action.payload.effectId] = action.payload.value;\r\n        return {...effects};\r\n    } else if (action.type === \"STEM_DELETE_EFFECT\") {\r\n        delete effects[action.payload.effectId];\r\n        return {...effects}\r\n    } else if (action.type === 'TRACK_ADD_EFFECT') {\r\n        effects[action.payload.effectId] = action.payload.value;\r\n        return {...effects};\r\n    } else if (action.type === \"TRACK_DELETE_EFFECT\") {\r\n        delete effects[action.payload.effectId];\r\n        return {...effects}\r\n    }\r\n    return effects;\r\n}\r\n    export default EffectReducer","import Actions from '../actions'\r\nimport Model from '../model'\r\nimport TrackReducer from \"./Track\";\r\nimport ConnectionReducer from \"./Connection\";\r\nimport MasterReducer from \"./Master\";\r\nimport StemModel from \"../model/StemModel\";\r\nimport StemReducer from './Stem.js'\r\nimport EffectReducer from \"./Effect\";\r\n\r\nconst CopyReducer = (copy, action)=>{\r\n    if (action.type==='STEM_COPY'){\r\n        return {type:'stems', items:action.payload.items};\r\n    }\r\n    return copy\r\n}\r\n\r\nexport default (state = Model.defaultState, action) =>{\r\n    return {\r\n        copy: CopyReducer(state.copy,action),\r\n        master:MasterReducer(state.master, action),\r\n        connection: ConnectionReducer(state.connection, action),\r\n        tracks: TrackReducer(state.tracks, action),\r\n        stems: StemReducer(state.stems, action),\r\n        effects: EffectReducer(state.effects, action)\r\n    }\r\n}\r\n\r\n\r\n\r\n// function pasteStemAtPosition(state, stem, pos) {\r\n//     if (pos.trackIndex >= state.tracks.length) return state;\r\n//     if (pos.stemIndex >= state.tracks[pos.trackIndex].stems.length) return state;\r\n//     let track = state.tracks[pos.trackIndex];\r\n//     let newStem = StemModel.clone(stem);\r\n//     newStem.trackId = track.id;\r\n//     newStem.open = false;\r\n//     track.stems = state.tracks[pos.trackIndex].stems.concat([]);//insertAt(state.tracks[pos.trackIndex].stems,pos.stemIndex,newStem).concat([]);\r\n//     track.stems[pos.stemIndex] = newStem;//insertAt(state.tracks[pos.trackIndex].stems,pos.stemIndex,newStem).concat([]);\r\n//     return Object.assign({}, state, {\r\n//         tracks: state.tracks.map(x => {\r\n//             if (x.id === track.id) {\r\n//                 return track\r\n//             }\r\n//             return x\r\n//         })\r\n//     })\r\n// }\r\n//\r\n// function getStemPosition(stem, state) {\r\n//     let trackIndex = state.tracks.findIndex(x => x.id === stem.trackId);\r\n//     let stemIndex = state.tracks[trackIndex].stems.findIndex(x => x.id === stem.id);\r\n//     return {trackIndex, stemIndex}\r\n// }\r\n\r\n\r\n/*\r\nActions:\r\n______________\r\nadd track\r\nadd stem row\r\nupdate value\r\nopen in flyout\r\nclose in flyout\r\nsave\r\nload\r\n\r\nStore:\r\n____________\r\n */\r\n","import React, {Component} from 'react'\r\nimport AudienceRenderComponent from \"../components/AudienceRender\";\r\n\r\nexport default class AudienceRender extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('message',(e)=>{\r\n            if(e.origin!== window.location.origin) return;\r\n            this.setState(e.data.state);\r\n        })\r\n    }\r\n\r\n    render(){\r\n\r\n\r\n        return (\r\n                <AudienceRenderComponent {...this.state}/>\r\n        )\r\n    }\r\n\r\n}","import {render} from 'react-dom'\r\nimport {Provider} from 'react-redux'\r\nimport App from './containers/App';\r\nimport {applyMiddleware, createStore} from \"redux\";\r\nimport DeadReducer from './reducers'\r\nimport React from 'react';\r\nimport logger from 'redux-logger'\r\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\r\nimport AudienceRender from \"./containers/AudienceRender\";\r\n\r\nexport const store = createStore(DeadReducer, applyMiddleware(logger));\r\n\r\nrender(\r\n    (\r\n        <Router>\r\n            <Provider store={store}>\r\n                <Route path=\"/\" exact component={App}/>\r\n            </Provider>\r\n                {/*<Route path=\"/render\" exact component={AudienceRender}/>*/}\r\n        </Router>),\r\ndocument.getElementById('root')\r\n)","\r\nconst Id = {index:0};\r\n\r\nfunction getMaxId(obj){\r\n    let ids = [];\r\n    for (let i in obj){\r\n        if(i==='id'){\r\n            ids.push(obj[i])\r\n        } else if(typeof obj[i] === 'object'){\r\n            ids.push(getMaxId(obj[i]))\r\n        }\r\n    }\r\n    return Math.max(...ids)\r\n}\r\n\r\nId.init =  function (state){\r\n    Id.index = getMaxId(state);\r\n}\r\n\r\n\r\nId.new = function() {\r\n    return (Id.index++)+'';\r\n};\r\n\r\nexport default Id","import EffectModel from \"./EffectModel\";\r\n\r\n\r\nfunction getNew(language,properties){\r\n    return {\r\n        macros:'',\r\n        effects:[],\r\n        properties\r\n    }\r\n}\r\n\r\nconst MasterModel = {getNew};\r\n\r\n\r\n\r\nexport default MasterModel;\r\n","import TrackModel from \"./TrackModel\";\r\nimport MasterModel from \"./MasterModel\";\r\nimport Id from \"./Id\";\r\nimport EffectModel from \"./EffectModel\";\r\nimport StemModel from \"./StemModel\";\r\n\r\n\r\nconst Model = {};\r\n\r\nModel.Languages = {\r\n    TidalCycles: \"TidalCycles\",\r\n    Hydra: \"Hydra\"\r\n};\r\n\r\nconst tracks = {};\r\nconst stems = {};\r\nconst effects = {};\r\n\r\nconst TidalCycles = MasterModel.getNew('TidalCycles',{tempo:120});\r\nfor(let i in EffectModel.util.defaultEffects['TidalCycles']()){\r\n  let effectId = Id.new();\r\n  effects[effectId] = EffectModel.util.defaultEffects['TidalCycles']()[i];\r\n  TidalCycles.effects.push(effectId);\r\n}\r\n\r\n\r\nconst Hydra = MasterModel.getNew('Hydra');\r\nfor(let i in EffectModel.util.defaultEffects['Hydra']()){\r\n  let effectId = Id.new();\r\n  effects[effectId] = EffectModel.util.defaultEffects['Hydra']()[i];\r\n  Hydra.effects.push(effectId);\r\n}\r\n\r\nconst master = {TidalCycles, Hydra}\r\n\r\nfor (let i = 0; i < 5; i++) {\r\n    let trackId = Id.new();\r\n    tracks[trackId] = TrackModel.getNew();\r\n    for (let j = 0; j < 5; j++) {\r\n        let stemId = Id.new();\r\n        stems[stemId] = StemModel.getNew();\r\n        EffectModel.util.defaultEffects['TidalCycles']().forEach(effect => {\r\n            let effectId = Id.new();\r\n            effects[effectId] = effect;\r\n            stems[stemId].effects.push(effectId);\r\n        });\r\n        tracks[trackId].stems.push(stemId);\r\n    }\r\n    let mainEffectId = Id.new();\r\n    effects[mainEffectId] = EffectModel.getNew(\"gain\", EffectModel.Types.SLIDER, \"TidalCycles\", true, {\r\n        value: 1,\r\n        operator: \"|*\",\r\n        min: 0,\r\n        max: 2,\r\n        step: 0.01,\r\n        scale: 'linear'\r\n    });\r\n    tracks[trackId].effects.push(mainEffectId);\r\n}\r\n\r\nModel.defaultState = {\r\n    connection: {\r\n        isConnected: false,\r\n        url: '127.0.0.1',\r\n        port: 8001\r\n    },\r\n    master,\r\n    copy: null,\r\n    tracks,\r\n    stems,\r\n    effects\r\n}\r\n\r\nexport default Model\r\n\r\n\r\n\r\n// model structure:\r\nvar a = {\r\n    'connection': {},\r\n    'copy': null,\r\n    'master': {\r\n        'TidalCycles': {},\r\n        'Hydra': {}\r\n    },\r\n    'tracks': {\r\n        'track_1': {\r\n            'name': \"new track\",\r\n            'stems': ['stem_1', 'stem_2'],\r\n            'effects': ['effect_1']\r\n        }\r\n    },\r\n    'stems': {\r\n        'stem_1': {\r\n            name: '',\r\n            on: false,\r\n            selected: false,\r\n            open: false,\r\n            live: false,\r\n            language: 'TidalCycles',\r\n            code: '',\r\n            effects: ['effect_1', 'effect_2']\r\n        }\r\n    },\r\n    'effects': {\r\n        'effect_1': {\r\n            name: '',\r\n            on: false,\r\n            type: EffectModel.Types.SLIDER,\r\n            language: 'TidalCycles',\r\n            properties: {}\r\n        }\r\n    }\r\n}\r\n","import EffectModel from \"./EffectModel\";\r\n\r\n\r\nfunction clone (stem,trackId){\r\n    return {\r\n        ...stem,\r\n        trackId,\r\n        effects:[...stem.effects].map(EffectModel.clone),\r\n    }\r\n}\r\n\r\nfunction getNew(language = \"TidalCycles\"){\r\n    return {\r\n        name:'',\r\n        on: false,\r\n        selected:false,\r\n        open:false,\r\n        live:false,\r\n        language,\r\n        code:\"\",\r\n        effects: []\r\n    }\r\n};\r\n\r\nconst StemModel = {\r\n    getNew,\r\n    clone\r\n}\r\n\r\nexport default StemModel\r\n","import React from \"react\";\r\nimport \"./index.css\";\r\nimport EffectModel from \"../../model/EffectModel\";\r\nexport const Hydra = {\r\n    language:'Hydra',\r\n    getCode,\r\n    getAudienceDom,\r\n};\r\n\r\n\r\nfunction getAudienceDom(state){\r\n    return <div className={'code'}>{Hydra.getCode(state,\"blend\")}</div>\r\n}\r\n\r\nfunction getCode(fullState, mixMethod){\r\n    let tracksCode = [];\r\n    for(let i in fullState.tracks){\r\n        let track = fullState.tracks[i];\r\n        let code = trackToCode(track, mixMethod);\r\n        if(code){\r\n            tracksCode.push([code,track.gainEffect.properties.value]);\r\n        }\r\n    }\r\n\r\n    Object.keys(fullState.tracks);\r\n    // if(tracksCode.length<1){\r\n    //     return 'solid(0,0,0,0).out()'\r\n    // };\r\n\r\n    let code = 'solid(0,0,0,0)';\r\n\r\n    // [['osc()', 0.5],['noise()',0.7]]\r\n\r\n    // 'osc().blend(noise(),'\r\n\r\n\r\n    for (let i = 0;i<tracksCode.length;i++){\r\n        let trackCode = tracksCode[i][0];\r\n        let blendAmt = tracksCode[i][1];\r\n        code = `${code}.${mixMethod}(${trackCode},${blendAmt})`;\r\n        // code = `${code}.${mixMethod}(${trackCode}, ${blendAmt})`\r\n    }\r\n\r\n    code = code+\".out()\";\r\n    return code;\r\n}\r\n\r\n\r\nconst effectToCodeFuncs  = {}\r\neffectToCodeFuncs[EffectModel.Types.SLIDER] = function(effect){\r\n    return `.${effect.name}(${effect.properties.value})`\r\n}\r\n\r\nfunction effectToCode(effect){\r\n    return effectToCodeFuncs[effect.type](effect);\r\n}\r\n\r\nfunction trackToCode(track,mixMethod){\r\n\r\n    let stemsCode = [];\r\n    for(let i in track.stems){\r\n        let x = track.stems[i];\r\n        if(x.on && x.language==='Hydra' && x.code !==''){\r\n            stemsCode.push(stemToCode(x));\r\n        }\r\n    }\r\n\r\n\r\n    if(stemsCode.length<1){\r\n        return null\r\n    };\r\n\r\n    let code = stemsCode[0];\r\n    for (let i = 1;i<stemsCode.length;i++){\r\n        code = `${code}.${mixMethod}(${stemsCode[i]})`\r\n    }\r\n    // const trackGain =\r\n    return code;\r\n}\r\n\r\nfunction stemToCode(stem){\r\n    const effects = stem.effects.filter(x=>x.on).map(effectToCode).join(\"\");\r\n\r\n    return stem.code+effects;\r\n}","import React from \"react\";\r\nimport './index.css';\r\nimport Model from \"../../model\";\r\nimport EffectModel from \"../../model/EffectModel\";\r\n\r\nexport const TidalCycles = {\r\n    language: 'TidalCycles',\r\n    getCode,\r\n    trackToCode,\r\n    getTempoCode,\r\n    getAudienceDom\r\n}\r\n\r\n// function getAudienceDom(state){\r\n//\r\n//     let masterEffects = state.masterEffects.map(effectToCode).join(\" $ \");\r\n//     masterEffects= masterEffects + (state.masterEffects.length?\" $ \":\"\");\r\n//\r\n//     let stack = <span>{`d1 ${masterEffects} stack [`}</span>\r\n//     let stems = state.tracks.map(t=>t.stems).flat().filter(x=>{return x.on && x.language==='TidalCycles'}).map(stem=>{\r\n//         return [\r\n//             <div key={stem.id} className={'indented'}>{stemToCode(stem)}</div>,\r\n//             (<div key={stem.id+\"_c\"} style={{display:'inline-block'}}>{','}</div>)\r\n//         ]\r\n//     });\r\n//\r\n//     stems = stems.flat();\r\n//     stems = stems.slice(0,-1);\r\n//\r\n//     return (\r\n//         <div>\r\n//             {stack}\r\n//             {stems}\r\n//             ]\r\n//         </div>\r\n//     )\r\n// }\r\n\r\nfunction getAudienceDom(state){\r\n    // let effects = state.masterEffects.filter(effect=>effect.on).map(effectToDom).filter(x=>{return x!=null});\r\n    let tracks = [];\r\n    for(let i in state.tracks){\r\n        let trackDom = trackToDom((state.tracks[i]));\r\n        if(trackDom){\r\n            tracks.push(trackDom);\r\n            tracks.push(\",\");\r\n        }\r\n    }\r\n    tracks = tracks.slice(0,-1);\r\n\r\n    let effects = state.master[Model.Languages.TidalCycles].effects.filter(effect=>effect.on).map(effectToDom).filter(x=>x);\r\n    effects = effects.map(x=>{return [x,\" . \"]}).flat().slice(0,-1);\r\n\r\n\r\n    return (\r\n        <div className={'code TidalCycles'}>\r\n\r\n            d1 $ {effects} {effects.length?\"$\":\"\"} stack [\r\n            {tracks}\r\n            ]\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nfunction trackToDom(track){\r\n    let stems = [];\r\n    for(let i in track.stems){\r\n        let stem = track.stems[i];\r\n        if(stem.on && stem.language === 'TidalCycles'){\r\n            let code = stemToCode(stem);\r\n            if(code){\r\n                stems.push(code);\r\n            }\r\n        }\r\n    }\r\n\r\n    if(!stems.length){\r\n        return null;\r\n    }\r\n    stems = stems.map(x=>[x,\",\"]).flat().slice(0,-1);\r\n    let trackGain = `(|* gain ${track.gainEffect.properties.value*2})`;\r\n    return (\r\n        <div key={track.id} className=\"trackCode\">\r\n\r\n            {trackGain} {\" $ \"}\r\n            stack [\r\n            {stems}\r\n            ]\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction stemToDom(stem){\r\n    const code = stemToCode(stem);\r\n    if(code==='' || code ==='silence'){\r\n        return null;\r\n    }\r\n\r\n    let effects = stem.effects.filter(effect=>effect.on).map(effectToDom).filter(x=>x);\r\n    effects = effects.map(x=>{return [x,\" . \"]}).flat().slice(0,-1);\r\n    return (\r\n        <div key={stem.id} className=\"stemCode\">\r\n            {effects} {code}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nfunction effectToDom(effect){\r\n    if (!effect.on) {return null}\r\n    let code = effectToCode(effect);\r\n    return (\r\n        <div className={'effectCode'}>{code}</div>\r\n    )\r\n}\r\n\r\n// function getAudienceDom(state){\r\n//\r\n//     let masterEffects = state.masterEffects.map(effectToCode).join(\" $ \");\r\n//     masterEffects= masterEffects + (state.masterEffects.length?\" $ \":\"\");\r\n//\r\n//     let stack = <span>{`d1 ${masterEffects} stack [`}</span>\r\n//     let stems = state.tracks.map(t=>t.stems).flat().filter(x=>{return x.on && x.language==='TidalCycles'}).map(stem=>{\r\n//         return [\r\n//             <div key={stem.id} className={'indented'}>{stemToCode(stem)}</div>,\r\n//             (<div key={stem.id+\"_c\"} style={{display:'inline-block'}}>{','}</div>)\r\n//                 ]\r\n//     });\r\n//\r\n//     stems = stems.flat();\r\n//     stems = stems.slice(0,-1);\r\n//\r\n//     return (\r\n//         <div>\r\n//             {stack}\r\n//             {stems}\r\n//                 ]\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// function renderTidalCyclesBootScript(state){\r\n//     Connection.sendCode(state.bootScript);\r\n// }\r\n//\r\n// function renderTidalCyclesTempoChange(state){\r\n//     Connection.sendCode(getTempoCode(state));\r\n// };\r\n\r\nfunction getTempoCode(state){\r\n    return 'setcps ' + state.master.TidalCycles.properties.tempo/60/2;\r\n}\r\n\r\n\r\nconst EffectsToCode = {};\r\nEffectsToCode[EffectModel.Types.SLIDER] = (x)=>{\r\n    return `(${x.properties.operator} ${x.code} ${x.properties.value})`\r\n}\r\n\r\n\r\nfunction effectToCode(x){\r\n    return EffectsToCode[x.type](x)\r\n}\r\n\r\nfunction stemToCode(state, stem){\r\n    if(stem.code==='') {return ''}\r\n    let effectsOn = [];\r\n    stem.effects.forEach(e=>{\r\n        let effect = state.effects[e];\r\n        if(effect.on){\r\n            effectsOn.push(effectToCode(effect));\r\n        }\r\n    });\r\n    let code = effectsOn.join(\" $ \");\r\n    code += effectsOn.length?' $ ':'';\r\n    code += stem.code;\r\n    return code\r\n}\r\n\r\nfunction trackToCode(state, track){\r\n    let stemsCode = [];\r\n    track.stems.forEach(x=> {\r\n        let stem = state.stems[x];\r\n        if (stem.on && stem.language === 'TidalCycles') {\r\n            stemsCode.push(stemToCode(state, stem))\r\n        }\r\n    });\r\n    if (stemsCode.length<1){return ''};\r\n\r\n    stemsCode = stemsCode.join(\", \");\r\n\r\n    let effectsOn = [];\r\n    track.effects.forEach(e=>{\r\n        let effect = state.effects[e];\r\n        if(effect.on){\r\n            effectsOn.push(effectToCode(effect));\r\n        }\r\n    });\r\n    let effectsCode = effectsOn.join(\" $ \");\r\n    return `${effectsCode} $ stack [${stemsCode}]`;\r\n}\r\n\r\nfunction getCode(state){\r\n    let stems = 'stack [';\r\n\r\n    let tracks = Object.keys(state.tracks).map(x=>{return trackToCode(state, state.tracks[x])});\r\n\r\n    stems += tracks.filter(x=>x!=='').join(\", \")+']';\r\n\r\n    let masterEffects = [];\r\n    let onMasterEffects = state.master[Model.Languages.TidalCycles].effects.forEach(x=> {\r\n        let effect = state.effects[x];\r\n        if(effect.on){\r\n            masterEffects.push(effectToCode(effect));\r\n        }\r\n    })\r\n    let masterEffectsCode = masterEffects.join(\" $ \");\r\n\r\n    let code = `d1 $ ${masterEffectsCode}${masterEffects.length?' $ ':''}${stems}`;\r\n    return code;\r\n}","import {Hydra} from \"./Hydra/Hydra\"\r\nimport {TidalCycles} from \"./TidalCycles\";\r\n\r\nexport const Renderers = {\r\n    Hydra,\r\n    TidalCycles\r\n}","import EffectModel from \"./EffectModel\";\r\nimport StemModel from \"./StemModel\";\r\n\r\nlet getGainEffect = function () {\r\n    return EffectModel.getNew(\r\n        \"gain\",\r\n        EffectModel.Types.SLIDER,\r\n        '',\r\n        true,\r\n        {\r\n            value: 0.5,\r\n            operator: \"#\",\r\n            min: 0,\r\n            max: 1,\r\n            step: 0.01,\r\n            scale: 'linear'\r\n        }\r\n    )\r\n}\r\n\r\n\r\n\r\nfunction getNew(opt_language = \"TidalCycles\") {\r\n    return {\r\n        name: 'New Track',\r\n        stems:[],\r\n        effects:[]\r\n    }\r\n}\r\n\r\n\r\nfunction clone(track) {\r\n    return {\r\n        ...track,\r\n        stems: track.stems.map(x => {\r\n            return StemModel.clone(x)\r\n        }),\r\n        effects: track.effects.map(EffectModel.clone)\r\n    }\r\n}\r\n\r\nconst TrackModel = {\r\n    getNew,\r\n    clone\r\n}\r\n\r\nexport default TrackModel\r\n","import React, {Component} from 'react'\r\nimport Hydra from \"hydra-synth\";\r\nimport './index.css'\r\nimport {Renderers} from \"../../Renderers\";\r\n\r\nexport default class AudienceRender extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.hydraRef = React.createRef();\r\n\r\n        this.hydraCode = '';\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.hydra = new Hydra({canvas: this.hydraRef.current});\r\n        // window.hydra.resize(this.hydraRef.current.getBoundingClientRect().width,this.hydraRef.current.getBoundingClientRect().height);\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let hydraDom;\r\n        let tidalDom;\r\n        if (this.props.tracks) {\r\n            // debugger;\r\n            hydraDom = Renderers.Hydra.getAudienceDom(this.props);\r\n            tidalDom = Renderers.TidalCycles.getAudienceDom(this.props);\r\n\r\n            const hydraCode = Renderers.Hydra.getCode(this.props,\"blend\");\r\n            if (hydraCode !== this.hydraCode) {\r\n                console.log('hydra: ',hydraCode)\r\n                try {\r\n                    eval(hydraCode);\r\n                } catch (e) {\r\n                    console.warn(\"Hydra ERR:\", e);\r\n                }\r\n                this.hydraCode = hydraCode;\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className={'AudienceRender'}>\r\n                <canvas ref={this.hydraRef}></canvas>\r\n                <div className={\"code\"}>\r\n                    <div id='tidalcycles' className=\"column\">\r\n                        {tidalDom}\r\n                    </div>\r\n                    <div id='hydra' className=\"column\">\r\n                        {hydraDom}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}"],"sourceRoot":""}